{"version":3,"file":"camunda-tasklist-ui.js","sources":["../node_modules/camunda-commons-ui/node_modules/camunda-bpm-sdk-js/dist/camunda-bpm-sdk-angular.js","../node_modules/camunda-commons-ui/node_modules/angular-data-depend/src/dataDepend.js","scripts/config/date.js","scripts/index.html!text","text!scripts/user/controller/cam-auth-login.html","scripts/api/index.js","scripts/user/controller/cam-user-logout-ctrl.js","scripts/user/controller/cam-user-login-ctrl.js","scripts/user/index.js","scripts/config/routes.js","scripts/config/locales.js","scripts/config/tooltip.js","scripts/config/uris.js","scripts/controller/cam-tasklist-app-ctrl.js","scripts/controller/cam-tasklist-view-ctrl.js","scripts/services/cam-tasklist-assign-notification.js","scripts/services/cam-tasklist-configuration.js","text!scripts/variable/directives/cam-tasklist-variables.html","text!scripts/variable/modals/cam-tasklist-variables-detail-modal.html","scripts/variable/directives/cam-tasklist-variables.js","scripts/variable/modals/cam-tasklist-variables-detail-modal.js","../node_modules/camunda-commons-ui/node_modules/angular-moment/angular-moment.js","scripts/variable/index.js","scripts/tasklist/controller/cam-tasklist-list-ctrl.js","text!scripts/tasklist/directives/cam-tasklist-sorting-choices.html","scripts/tasklist/directives/cam-tasklist-sorting-choices.js","text!scripts/tasklist/directives/cam-tasklist-sorting-dropdown.html","scripts/tasklist/directives/cam-tasklist-sorting-dropdown.js","text!scripts/tasklist/directives/cam-tasklist-sorting-inputs.html","scripts/tasklist/directives/cam-tasklist-sorting-inputs.js","text!scripts/tasklist/directives/cam-tasklist-tasks.html","scripts/tasklist/directives/cam-tasklist-tasks.js","scripts/tasklist/filters/cam-query-component.js","text!scripts/tasklist/plugins/cam-tasklist-search-plugin.html","text!scripts/tasklist/plugins/cam-tasklist-search-plugin-config.json","scripts/tasklist/plugins/cam-tasklist-search-plugin.js","scripts/tasklist/index.js","text!scripts/task/directives/cam-tasklist-task.html","scripts/task/directives/cam-tasklist-task.js","text!scripts/task/directives/cam-tasklist-task-meta.html","text!scripts/task/modals/cam-tasklist-groups-modal.html","scripts/task/directives/cam-tasklist-task-meta.js","scripts/task/controller/cam-tasklist-task-action-ctrl.js","scripts/task/controller/cam-tasklist-task-groups-ctrl.js","text!scripts/task/plugins/detail/cam-tasklist-task-detail-form-plugin.html","scripts/task/plugins/detail/cam-tasklist-task-detail-form-plugin.js","text!scripts/task/plugins/detail/cam-tasklist-task-detail-history-plugin.html","scripts/task/plugins/detail/cam-tasklist-task-detail-history-plugin.js","text!scripts/task/plugins/detail/cam-tasklist-task-detail-diagram-plugin.html","scripts/task/plugins/detail/cam-tasklist-task-detail-diagram-plugin.js","text!scripts/task/plugins/detail/cam-tasklist-task-detail-description-plugin.html","scripts/task/plugins/detail/cam-tasklist-task-detail-description-plugin.js","text!scripts/task/plugins/action/cam-tasklist-task-action-comment-plugin.html","text!scripts/task/plugins/action/modals/cam-tasklist-comment-form.html","scripts/task/plugins/action/cam-tasklist-task-action-comment-plugin.js","scripts/task/plugins/action/modals/cam-tasklist-comment-form.js","scripts/task/modals/cam-tasklist-groups-modal.js","scripts/task/index.js","text!scripts/process/plugins/action/cam-tasklist-navbar-action-start-process-plugin.html","text!scripts/process/plugins/action/modals/cam-tasklist-process-start-modal.html","scripts/process/plugins/action/cam-tasklist-navbar-action-start-process-plugin.js","scripts/process/plugins/action/modals/cam-tasklist-process-start-modal.js","scripts/process/index.js","text!scripts/navigation/directives/cam-tasklist-navigation.html","scripts/navigation/directives/cam-tasklist-navigation.js","scripts/navigation/controllers/cam-layout-ctrl.js","scripts/navigation/index.js","text!scripts/form/directives/cam-tasklist-form.html","scripts/form/directives/cam-tasklist-form.js","text!scripts/form/directives/cam-tasklist-form-generic.html","scripts/form/directives/cam-tasklist-form-generic.js","text!scripts/form/directives/cam-tasklist-form-generic-variables.html","scripts/form/directives/cam-tasklist-form-generic-variables.js","text!scripts/form/directives/cam-tasklist-form-embedded.html","scripts/form/directives/cam-tasklist-form-embedded.js","text!scripts/form/directives/cam-tasklist-form-external.html","scripts/form/directives/cam-tasklist-form-external.js","scripts/form/directives/cam-tasklist-unique-value.js","scripts/form/index.js","text!scripts/filter/directives/cam-tasklist-filters.html","scripts/filter/directives/cam-tasklist-filters.js","text!scripts/filter/directives/cam-tasklist-filter-modal-form.html","scripts/filter/directives/cam-tasklist-filter-modal-form.js","text!scripts/filter/directives/cam-tasklist-filter-modal-form-general.html","scripts/filter/directives/cam-tasklist-filter-modal-form-general.js","text!scripts/filter/directives/cam-tasklist-filter-modal-form-criteria.html","scripts/filter/directives/cam-tasklist-filter-modal-criteria.js","scripts/filter/directives/cam-tasklist-filter-modal-form-criteria.js","text!scripts/filter/directives/cam-tasklist-filter-modal-form-variable.html","scripts/filter/directives/cam-tasklist-filter-modal-form-variable.js","text!scripts/filter/directives/cam-tasklist-filter-modal-form-permission.html","scripts/filter/directives/cam-tasklist-filter-modal-form-permission.js","text!scripts/filter/modals/cam-tasklist-filter-modal.html","scripts/filter/controllers/cam-tasklist-filters-ctrl.js","scripts/filter/modals/cam-tasklist-filter-modal.js","scripts/filter/index.js","scripts/camunda-tasklist-ui.js"],"names":["e","exports","module","define","amd","f","window","global","self","CamSDK","t","n","r","s","o","u","a","require","i","Error","call","length",1,"_dereq_","CamundaForm","angular","$","constants","CamundaFormAngular","extend","renderForm","autoBind","key","el","element","attr","camVarName","DIRECTIVE_CAM_VARIABLE_NAME","this","prototype","apply","arguments","formFieldHandlers","handler","selector","formElement","each","injector","scope","invoke","$compile","executeFormScript","script","camForm","$scope","inject","extensions","isFunction","isArray","instantiate","eval","fireEvent","args","doFireEvent","$rootScope","phase","$$phase","$apply","./../../forms/camunda-form","./../../forms/constants",2,"isType","ngModule","directive","link","elm","attrs","ctrl","on","evt","value","$setViewValue","$element","$attrs","validate","viewValue","type","camVariableType","$setValidity","$pristine","$dirty","addClass","removeClass","indexOf","files","size","camMaxFilesize","$parsers","unshift","$formatters","push","$observe","$viewValue","bind","./../../forms/type-util","./camunda-form-angular",3,"Client","Form","utils","./../api-client","./../utils","./forms",4,"noop","Events","BaseClass","AbstractClientResource","initialize","http","constructor","path","create","list","params","done","results","count","items","get","data","err","countRes","trigger","itemsRes","firstResult","parseInt","maxResults","update","delete","attach","./../base-class","./../events",5,"Buffer","end","response","ok","noContent","error","req","method","url","body","message","Object","keys","JSON","parse","text","solveHALEmbedded","request","HttpClient","config","baseUrl","post","options","fields","forEach","field","attachments","file","content","filename","name","set","send","query","load","accept","put","del","buffer","superagent",6,"CamundaClient","apiUri","engine","mock","resources","slice","proto","_resources","forwardError","conf","resConf","c","headers","resource","./http-client","./resources/authorization","./resources/case-definition","./resources/case-execution","./resources/case-instance","./resources/deployment","./resources/filter","./resources/group","./resources/history","./resources/incident","./resources/job","./resources/metrics","./resources/process-definition","./resources/process-instance","./resources/task","./resources/user","./resources/variable",7,"Authorization","authorizationId","authorization","id","save","./../abstract-client-resource",8,"CaseDefinition","caseDefinitionId",9,"CaseExecution","disable","executionId","reenable","manualStart","complete",10,"CaseInstance","close","instanceId",11,"Deployment","deployment-name","deploymentName","Array","enableDuplicateFiltering","deployChangedOnly",12,"Filter","filterId","getTasks","filter","authorizations",13,"Group","createMember","userId","deleteMember",14,"History","userOperation","processInstance","queryParams","p","processInstanceCount",15,"Incident",16,"Job","setRetries",17,"Metrics","sum",18,"ProcessDefinition","suspend","stats","start","getByKey","formVariables","pointer","queryData","deserializeValues","names","variableNames","join","submitForm","businessKey","variables","startForm","xml","submit","ids",19,"ProcessInstance","modify","instructions","skipCustomListeners","skipIoMappings",20,"Task","tasks","_embedded","task","procDefs","processDefinition","processDefinitionId","taskId","comments","identityLinks","identityLinksAdd","identityLinksDelete","createComment","assignee","delegate","claim","unclaim","form","localVariable","varId","localVariables",21,"User","required","profile","firstName","lastName","credentials","password","email","updateProfile","updateCredentials","authenticatedUserPassword",22,"Variable","instances",23,"protoProps","staticProps","child","Surrogate","parent","hasOwnProperty","./events",24,"toArray","obj","arr","once","func","memo","ran","ensureEvents","_events","off","eventName","callback","cb","_callback","shift",25,"client","clientConfig","processDefinitionKey","containerElement","formUrl","variableManager","VariableManager","InputFieldHandler","ChoicesFieldHandler","scripts","initializeHandler","FieldHandler","result","initializeForm","noCache","Date","now","formHtmlSource","html","append","initializeFormScripts","initializeFieldHandlers","executeFormScripts","fetchVariables","mergeVariables","storeOriginalValues","restore","applyVariables","formScriptElements","DIRECTIVE_CAM_SCRIPT","store","formId","caseInstanceId","storePrevented","retrieveVariables","date","vars","localStorage","setItem","stringify","isRestorable","getItem","stored","submitPrevented","transformFiles","removeItem","submitVariables","that","counter","callCallback","bytesToSize","bytes","k","sizes","Math","floor","log","pow","toPrecision","getAttribute","FileReader","reader","onloadend","binary","Uint8Array","target","len","byteLength","j","String","fromCharCode","variableName","btoa","readAsArrayBuffer","varManager","variableData","v","isDirty","val","isJsonVariable","valueInfo","find","setOriginalValue","isVariablesFetched","applyValue","getValue","cleanLocalStorage","timestamp","item","./constants","./controls/choices-field-handler","./controls/input-field-handler","./dom-lib","./variable-manager",26,"DIRECTIVE_CAM_FORM","DIRECTIVE_CAM_VARIABLE_TYPE","DIRECTIVE_CAM_CHOICES",27,"AbstractFormField","../../base-class","./../dom-lib",28,"variableType","choicesVariableName","createVariable","fetchVariable","originalValue","previousValue","selectedIndex","choicesVariableValue","variableValue","multiple","prop","./../constants","./abstract-form-field",29,"isBooleanCheckbox","getValueFromHtmlControl","applyValueToHtmlControl",30,"factory","root","jQuery","Zepto",31,"INTEGER_PATTERN","FLOAT_PATTERN","BOOLEAN_PATTERN","DATE_PATTERN","test","convertToType","trim","parseFloat",32,"variable","destroyVariable","supportedTypes","idx","serializationDataFormat","./type-util",33,"_eachSeries","iterator","completed","iterate","typeUtils","isId","str","embedded","splice","_embeddedRessources","properties","series","./forms/type-util",34,"subject","encoding","noZero","base64clean","TypeError","kMaxLength","RangeError","toString","buf","TYPED_ARRAY_SUPPORT","_augment","_isBuffer","_set","isArrayish","isBuffer","readUInt8","write","hexWrite","string","offset","Number","remaining","strLen","byte","substr","isNaN","utf8Write","charsWritten","blitBuffer","utf8ToBytes","asciiWrite","asciiToBytes","binaryWrite","base64Write","base64ToBytes","utf16leWrite","utf16leToBytes","base64Slice","base64","fromByteArray","utf8Slice","res","tmp","min","decodeUtf8Char","asciiSlice","ret","binarySlice","hexSlice","out","toHex","utf16leSlice","checkOffset","ext","checkInt","max","objectWriteUInt16","littleEndian","objectWriteUInt32","checkIEEE754","writeFloat","noAssert","ieee754","writeDouble","stringtrim","replace","INVALID_BASE64_RE","byteArray","b","charCodeAt","h","encodeURIComponent","split","hi","lo","toByteArray","src","dst","unitSize","decodeURIComponent","SlowBuffer","INSPECT_MAX_BYTES","poolSize","ArrayBuffer","foo","subarray","compare","x","y","isEncoding","toLowerCase","concat","totalLength","undefined","pos","copy","loweredCase","Infinity","equals","inspect","match","console","writeUInt8","isFinite","swap","toJSON","_arr","sliceLen","newBuf","readUInt16LE","readUInt16BE","readUInt32LE","readUInt32BE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","read","readFloatBE","readDoubleLE","readDoubleBE","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","target_start","source","fill","toArrayBuffer","BP","_get","toLocaleString","base64-js","is-array",35,"lookup","decode","elt","code","PLUS","SLASH","NUMBER","UPPER","LOWER","b64ToByteArray","b64","L","l","placeHolders","charAt","Arr","uint8ToBase64","uint8","encode","num","tripletToBase64","temp","extraBytes","output","base64js",36,"isLE","mLen","nBytes","m","eLen","eMax","eBias","nBits","d","NaN","rt","abs","LN2",37,38,"isHost","getXHR","XMLHttpRequest","location","protocol","ActiveXObject","isObject","serialize","pairs","parseString","parts","pair","parseHeader","index","line","lines","pop","reduce","Response","xhr","responseText","setStatusProperties","status","header","getAllResponseHeaders","getResponseHeader","setHeaderProperties","parseBody","Request","Emitter","_query","_header","original","serializeObject","types","json","urlencoded","form-data","application/x-www-form-urlencoded","application/json","ct","statusType","info","clientError","serverError","toError","accepted","badRequest","unauthorized","notAcceptable","notFound","forbidden","msg","use","fn","timeout","ms","_timeout","clearTimeout","_timer","abort","aborted","emit","unset","getHeader","auth","user","pass","_formData","FormData","_data","crossDomainError","crossDomain","timeoutError","withCredentials","_withCredentials","onreadystatechange","readyState","upload","onprogress","percent","loaded","total","setTimeout","open","setRequestHeader","head","patch","emitter",39,"mixin","addEventListener","event","_callbacks","removeListener","removeAllListeners","removeEventListener","callbacks","listeners","hasListeners",40,"initial","curr","createBinding","ensureArray","elements","arrayLike","dataDependFactory","$injector","$q","createDataDependFactory","annotate","nextTick","createProviders","providers","local","nextId","createProvider","setLoaded","newValue","oldValue","$loaded","$error","changed","notifyParentChanged","getTracker","tracker","parentValues","setLoading","dirty","getProvider","provider","registry","allChildrenDo","children","allDependenciesDo","dependencies","parentChanged","resolveDependencies","logValue","promises","promise","resolve","then","all","values","asyncLoad","reload","loading","eager","when","__resolve","__get","produces","filteredProvider","destroy","parentChildren","handleApi","createDataDepend","inheritedProvides","observe","internalCreateProvider","watchScope","expression","oldValueName","provide","$eval","oldValueProvider","$watch","localProviders","createChild","$on","$providers","newChild","$evalAsync","camDateFormatProvider","configurationProvider","dateProperties","setDateFormat","getDateFormat","apiModule","$location","$translate","Notifications","AngularClient","_wrapped","authentication","applyResponse","$broadcast","translations","addError","SESSION_EXPIRED","SESSION_EXPIRED_MESSAGE","exclusive","camAPIHttpClient","$window","Uri","appUri","tasklistConf","AuthenticationService","logout","translated","add","loginSuccess","addMessage","duration","loginError","login","username","api","camUserLogoutCtrl","camUserLoginCtrl","userModule","controller","tasklistTemplate","userLoginTemplate","$routeProvider","template","reloadOnSearch","otherwise","redirectTo","moment","appRoot","$http","isString","prefix","suffix","deferred","defer","success","labels","reject","$translateProvider","avail","getAvailableLocales","fallback","getFallbackLocale","useLoader","locale","dateLocales","lang","registerAvailableLanguageKeys","fallbackLanguage","determinePreferredLanguage","nav","navigator","browserLang","languages","language","browserLanguage","systemLanguage","userLanguage","lowercase","$tooltipProvider","appendToBody","popupDelay","UriProvider","href","uri","TasklistApp","refreshProvider","tasklistApp","getRefreshProvider","tasklistData","refreshTaskList","$interval","search","dataDepend","camAPI","getPropertyFromLocation","property","updateSilently","currentFilter","detailsTab","itemCount","resoureType","filters","focused","priority","currentPage","page","processVariables","taskVariables","caseInstanceVariables","searchQuery","taskListQuery","sorting","sortOrder","sortBy","active","_currentFilter","intervalPromise","cancel","refresh","oldTaskId","oldDetailsTab","processInstanceId","camTasklistConf","defaultConfig","dateFormat","monthName","day","abbr","normal","long","short","locales","availableLocales","fallbackLocale","formatName","dateFormatObj","getDateLocales","camDateLocales","$get","modalTemplate","$modal","filterProperties","variableDefinitions","variablesByName","expanded","shownVariablesCount","toggle","$event","preventDefault","stopPropagation","showValue","windowClass","details","download","_links","showUndefinedVariable","$dismiss","valueDeserialized","deserializationError","dataFormat","selectedTab","objectTypeName","selectTab","tab","angularMoment","constant","preprocess","timezone","format","statefulFilters","withoutSuffix","serverTime","titleFormat","amMoment","amTimeAgoConfig","angularMomentConfig","getNow","localNow","getTime","nowMillis","localDate","cancelTimer","activeTimeout","updateTime","momentInstance","from","isBindOnce","howOld","diff","secondsUntilUpdate","updateDateTimeAttr","isTimeElement","updateMoment","currentValue","momentValue","preprocessDate","currentFormat","toISOString","unwatchChanges","modelName","amTimeAgo","nodeName","toUpperCase","isDefined","amWithoutSuffix","service","$log","preprocessors","utc","unix","changeLocale","isUndefined","warn","applyTimezone","aMoment","tz","amCalendarFilter","isValid","calendar","$stateful","amDateFormatFilter","amDurationFormatFilter","humanize","amTimeAgoFilter","fromNow","camTasklistVariables","camTasklistVariablesDetailsModalCtrl","variableModule","Views","tasklistVars","tasklistPlugins","getProviders","component","stringifySortings","sortingQuery","map","by","order","parameters","$timeout","restrict","updateColumns","plannedRefresh","columns","parents","bodies","shown","$bdy","hasClass","css","minHeight","height","columnTop","columnTopHeight","positionDropdown","edgeLeft","position","left","edgeRight","outerWidth","$newSort","sortings","openDropdowns","openDropdownNew","sortedOn","uniqueProps","instant","created","dueDate","followUpDate","nameCaseInsensitive","byLabel","urlSortings","availableOptions","returned","addSorting","before","updateSortings","els","changeSorting","resetFunctions","openDropdown","newSorting","removeSorting","changeOrder","clickHandler","change","resetFunction","varName","varType","hasOptions","resetInputs","sortableVariables","focusedOn","handleClick","processVariable","executionVariable","taskVariable","caseExecutionVariable","caseInstanceVariable","showInputs","applyHandler","variableTypes","Boolean","Double","Integer","Long","Short","applySorting","forceFocus","pageNum","pageSize","totalItems","tasksData","assignees","parseAssignees","assigneeList","state","taskList","focus","scrollIntoView","currentTaskId","searchParams","selectNextTask","ceil","pageChange","selectPreviousTask","handleKeydown","keyCode","$el","getHrefUrl","resetPage","$filter","isDateValue","dateRegex","camDate","input","searchConfigJSON","expressionsRegex","searchConfig","parseValue","lastIndexOf","sanitizeValue","operator","sanitizeProperty","Controller","searches","tooltips","operators","op","searchData","ea","potentialNames","label","Configuration","ViewsProvider","registerDefaultView","$inject","camTasklistListCtrl","camTasklistSortingChoices","camTasklistSortingDropdown","camTasklistSortingInputs","camTasklistTasks","camQueryComponent","camTasklistSearchPlugin","TaskErrorManager","errorProvider","errorNotification","enhanceErrorMessage","clearTask","updateLocation","taskData","setDefaultTaskDetailTab","tabs","selectedTabId","selectedTaskDetailTab","errorHandler","_status","identityLink","groups","groupId","group","$root","caseDefinition","taskState","isAssignee","taskVars","taskDetailTabs","selectTaskDetailTab","editGroupsFormTemplate","successHandler","taskMetaData","saveDate","propName","inlineFieldScope","setEditingState","varValue","updateTask","resetProperty","toSend","notifyOnStartEditing","notifyOnCancelEditing","editingState","notify","action","messages","notifications","groupNames","saveFollowUpDate","resetFollowUpDate","startEditingFollowUpDate","cancelEditingFollowUpDate","saveDueDate","resetDueDate","startEditingDueDate","cancelEditingDueDate","followUp","due","assigned","assigneeReseted","claimed","unclaimed","startEditingAssignee","cancelEditingAssignee","assign","newAssignee","setAssignee","resetAssignee","editGroups","dialogClosed","groupsChanged","CamForm","taskActions","GROUP_TYPE","NEW_GROUP","newGroup","taskGroupsData","_groups","failure","FAILURE","initGroupsFailed","INIT_GROUPS_FAILURE","addGroupFailed","ADD_GROUP_FAILED","removeGroupFailed","REMOVE_GROUP_FAILED","modalGroupsState","validateNewGroup","_task","addGroup","taskGroupForm","$setPristine","removeGroup","newGroupId","currentGroup","assignNotification","taskFormData","DEFAULT_OPTIONS","hideCompleteButton","hideLoadVariablesButton","disableCompleteButton","disableForm","disableAddVariableButton","taskFormState","taskForm","completionCallback","jquery","isTimestampProperty","propertyName","findOrCreateDay","days","grep","elem","events","findOrCreateParentEvent","parentEvent","operationId","time","operationType","subEvents","historyData","history","historyEvent","propertyIsDate","orgValue","comment","diagramData","bpmn20xml","processDiagram","bpmn20Xml","processDiagramState","control","highlightTask","highlight","taskDefinitionKey","addCommentTemplate","addCommentFormTemplate","commentData","$close","taskDirective","taskMetaDirective","camTaskActionCtrl","camTaskGroupsCtrl","camTaskDetailFormPlugin","camTaskDetailHistoryPlugin","camTaskDetailDiagramPlugin","camTaskDetailDescriptionPlugin","camTaskActionCommentPlugin","camCommentCreateModalCtrl","camGroupEditModalCtrl","apiClient","taskModule","startProcessActionTemplate","processData","DEFAULT_PROCESS_DEFINITION_QUERY","latest","processDefinitionQuery","currentProcessDefinitionId","debounce","successNotification","processStartData","PROCESS_TO_START_SELECTED","current","searchValue","triggerOnStart","startFormState","processDefinitionState","processDefinitions","sort","aName","bName","lookupProcessDefinitionByName","nameLike","selectProcessDefinition","$invalid","back","executeAfterDestroy","job","registerCompletionHandler","startProcessInstance","notifyFormValidation","invalid","camNavbarActionStartProcessPlugin","camProcessStartModalCtrl","processModule","navbarVars","navbarActions","region","currentTarget","isClosed","toggleVariableSearch","toggleClass","toggleRegion","maximizeRegion","resetRegions","camTasklistNavigation","camLayoutCtrl","navigationModule","compact","ay","EMBEDDED_KEY","APP_KEY","ENGINE_KEY","tasklistForm","onFormCompletionCallback","onFormCompletion","onFormValidation","parseForm","applicationContextPath","contextPath","substring","completionHandler","saveHandler","showCompleteButton","notifyFormInitialized","notifyFormInitializationFailed","notifyFormValidated","notifyFormCompleted","notifyFormDirty","getOptions","getTasklistForm","getParams","registerSaveHandler","formController","showForm","clearVariableManager","clearFields","showBusinessKeyField","$valid","$update","_camForm","formName","camFormScope","localCallback","variablesLoaded","emptyVariable","addVariable","newVariable","removeVariable","delta","getVariableNames","loadVariables","variableAdded","fixedName","container","triggerHandler","Event","$elment","externalFormUrl","EXTERNAL_FORM_NOTE","queryParam","absoluteUrl","absUrl","encodeURI","camUniqueValue","nameFound","camTasklistForm","camTasklistFormGeneric","camTasklistFormGenericVariables","camTasklistFormEmbedded","camTasklistFormExternal","camTasklistUniqueValue","formModule","filtersData","openModal","filterCount","style","border-color","color","background-color","isFocused","GENERAL_ACCORDION","PERMISSION_ACCORDION","CRITERIA_ACCORDION","VARIABLE_ACCORDION","filterModalData","registerIsValidProvider","registerPostFilterSavedProvider","filterModalFormData","opened","accordion","general","permission","criteria","accesses","isValidProvider","filterForm","hintProvider","registerHintProvider","showHint","postFilterSavedProviders","postFilterSavedProvider","errors","removeArrayItem","newArr","parentCtrl","_form","filterGeneralForm","controls","filterColor","filterName","filterPriority","filterDescription","filterRefresh","showHintProvider","regex","exprSupport","valid","dateExpLangHelp","userExpLangHelp","commaSeparatedExps","commaSeparatedValues","numberRegex","help","bool","expressionSupport","includeAssignedTasksSupport","booleanCriterion","criteriaExpressionSupport","criteriaHelp","criteriaValidator","defaultValidate","criterion","emptyCriterion","includeAssignedTasks","canIncludeAssignedTasks","q","nestedForm","nestedForms","queryParamKey","queryParamValue","addForm","addCriterion","_emptyCriteria","removeCriterion","valueChanged","getCriterionName","validationResult","getQueryParamKeys","entry","criterionName","simple","getCriteriaHelp","isCriteriaHelpAvailable","variableLabel","_emptyVariable","RESOURCE_TYPE","isOpen","performSubmit","actions","submitAction","$permissions","$$hashKey","resourceId","resp","permissions","initializeAuthorizations","getNewPermissionField","newPermission","isGlobalAuthorization","isGrantAuthorization","isGlobalUserOrGroupId","hasProperty","hasReadPermission","perm","getGlobalAuthorization","getAuthorizationsWithReadPermissions","getAuthorziationMap","_authorizations","getAuthorziations","_criteria","addReadPermissionToAuthorization","removeReadPermissionFromAuthorization","showNewPermissionFields","actual","previous","disableAddButton","addReadPermission","filterAuthorizationData","filterPermissionForm","globalAuthorization","groupAuthorizationMap","userAuthorizationMap","NEW_DEFAULT_AUTHORIZATION","resourceType","NEW_PERMISSION","duplicate","authorizationState","isGlobalReadAuthorization","globalReadAuthorizationChanged","validateNewPermission","switchType","getReadAuthorizations","auths","_auth","keyPressed","removeReadPermission","submitAuthorizations","userCanCreateFilter","filterAuthorizations","links","rel","fixLike","likeExp","unfixLike","isQueryVariable","varExp","isExpression","expressionsExp","cleanJson","DEFAULT_COLOR","deletion","description","queryVariables","access","defaultValidationProvider","registerValidationProvider","_queryArray","_queryObj","toSave","filterResponse","abortDeletion","confirmDeletion","camTasklistFilters","camTasklistFilterModalForm","camTasklistFilterModalFormGeneral","camTasklistFilterModalFormCriteria","camTasklistFilterModalFormVariable","camTasklistFilterModalFormPermission","camTasklistFiltersCtrl","camTasklistFilterModal","filterModule","bootstrapApp","document","ready","bootstrap","$aufocused","parseUriConfig","$baseTag","ngDeps","pluginDependencies","ngModuleName","uriConfig","customScripts","custom","deps","pluginPackages","PLUGIN_PACKAGES","PLUGIN_DEPENDENCIES","packages","plugin","requirePackageName"],"mappings":"CAAA,SAAAA,GAAA,GAAA,gBAAAC,UAAA,mBAAAC,QAAAA,OAAAD,QAAAD,QAAA,IAAA,kBAAAG,SAAAA,OAAAC,IAAAD,OAAA,wBAAAH,OAAA,CAAA,GAAAK,EAAA,oBAAAC,QAAAD,EAAAC,OAAA,mBAAAC,QAAAF,EAAAE,OAAA,mBAAAC,QAAAH,EAAAG,MAAAH,EAAAI,OAAAT,MAAA,WAAA,GAAAG,QAAAD,OAAAD,OAAA,OAAA,SAAAD,GAAAU,EAAAC,EAAAC,GAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,GAAAE,GAAA,kBAAAC,UAAAA,OAAA,KAAAF,GAAAC,EAAA,MAAAA,GAAAF,GAAA,EAAA,IAAAI,EAAA,MAAAA,GAAAJ,GAAA,EAAA,MAAA,IAAAK,OAAA,uBAAAL,EAAA,KAAA,GAAAT,GAAAM,EAAAG,IAAAb,WAAAS,GAAAI,GAAA,GAAAM,KAAAf,EAAAJ,QAAA,SAAAD,GAAA,GAAAW,GAAAD,EAAAI,GAAA,GAAAd,EAAA,OAAAa,GAAAF,EAAAA,EAAAX,IAAAK,EAAAA,EAAAJ,QAAAD,EAAAU,EAAAC,EAAAC,GAAA,MAAAD,GAAAG,GAAAb,QAAA,IAAA,GAAAiB,GAAA,kBAAAD,UAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAS,OAAAP,IAAAD,EAAAD,EAAAE,GAAA,OAAAD,KAAAS,GAAA,SAAAC,QAAArB,OAAAD,SACA,YAGA,IAAAuB,aAAAD,QAAA,8BAEAE,QAAAnB,OAAA,QACAoB,EAAAF,YAAAE,EACAC,UAAAJ,QAAA,2BAGAK,mBAAAJ,YAAAK,QAGAC,WAAA,WAOA,QAAAC,GAAAC,EAAAC,GACA,GAAAC,GAAAR,EAAAO,EACA,KAAAC,EAAAC,KAAA,YAAA,CACA,GAAAC,GAAAF,EAAAC,KAAAR,UAAAU,4BACAD,IACAF,EAAAC,KAAA,WAAAC,IAXA,GAAA5B,GAAA8B,IAGAd,aAAAe,UAAAT,WAAAU,MAAAF,KAAAG,UAaA,KAAA,GAAAvB,GAAA,EAAAA,EAAAoB,KAAAI,kBAAArB,OAAAH,IAAA,CACA,GAAAyB,GAAAL,KAAAI,kBAAAxB,GACA0B,EAAAD,EAAAC,QACAlB,GAAAkB,EAAApC,EAAAqC,aAAAC,KAAAf,GAIA,GAAAgB,GAAAvC,EAAAqC,YAAAE,UACA,IAAAA,EAAA,CAEA,GAAAC,GAAAxC,EAAAqC,YAAAG,OACAD,GAAAE,QAAA,WAAA,SAAAC,GACAA,EAAA1C,EAAAqC,aAAAG,QAIAG,kBAAA,SAAAC,QAOA,GAAAL,UAAAT,KAAAO,YAAAE,WACAC,MAAAV,KAAAO,YAAAG,SAEA,SAAAK,QAAAC,QAGA,GAAAC,QAAA,SAAAC,GAGA,IAAA/B,QAAAgC,WAAAD,KAAA/B,QAAAiC,QAAAF,GAGA,KAAA,IAAArC,OAAA,6BAFA4B,UAAAY,YAAAH,GAAAF,OAAAN,QAOAY,MAAAR,SAGAd,KAAAU,QAIAa,UAAA,WAIA,GAAArD,GAAA8B,KACAwB,EAAArB,UACAO,EAAAV,KAAAO,YAAAG,QAEAe,EAAA,WACAvC,YAAAe,UAAAsB,UAAArB,MAAAhC,EAAAsD,IAGAf,EAAAvC,EAAAqC,YAAAE,UACAA,IAEAA,EAAAE,QAAA,aAAA,SAAAe,GACA,GAAAC,GAAAD,EAAAE,OAEA,YAAAD,GAAA,YAAAA,EACAjB,EAAAmB,OAAA,WACAJ,MAGAA,SAOA7D,QAAAD,QAAA2B,qBAEAwC,6BAAA,GAAAC,0BAAA,KAAAC,GAAA,SAAA/C,EAAArB,GACA,YAEA,IAAAuB,GAAAnB,OAAA,QACAsB,EAAAL,EAAA,0BACAgD,EAAAhD,EAAA,2BAAAgD,OAGAC,EAAA/C,EAAAvB,OAAA,wBAOAsE,GAAAC,UAAA,mBAAA,aAAA,SAAAT,GACA,OACA/C,QAAA,UACAyD,KAAA,SAAA1B,EAAA2B,EAAAC,EAAAC,GAEAF,EAAAG,GAAA,yBAAA,SAAAC,EAAAC,GACA,GAAAf,GAAAD,EAAAE,OAEA,YAAAD,GAAA,YAAAA,EACAjB,EAAAmB,OAAA,WACAU,EAAAI,cAAAD,KAGAH,EAAAI,cAAAD,UAQAR,EAAAC,UAAA,mBAAA,WAEA,OAEAxD,QAAA,UACAyD,KAAA,SAAApB,EAAA4B,EAAAC,EAAAN,GAEA,GAAAO,GAAA,SAAAC,GAEA,GAAAC,GAAAH,EAAAI,eAuBA,OArBAV,GAAAW,aAAA,mBAAA,IAEAH,GAAAA,KAAA,GAAA,UAAAC,KAEAT,EAAAY,YACAZ,EAAAY,WAAA,EACAZ,EAAAa,QAAA,EACAR,EAAAS,SAAA,YACAT,EAAAU,YAAA,gBAGA,MAAA,UAAA,SAAA,SAAAC,QAAAP,IAAAf,EAAAc,EAAAC,IACAT,EAAAW,aAAA,mBAAA,GAGA,SAAAL,EAAAG,MAAA,UAAAA,GAAAJ,EAAA,GAAAY,OAAAZ,EAAA,GAAAY,MAAA,IAAAZ,EAAA,GAAAY,MAAA,GAAAC,MAAAZ,EAAAa,gBAAA,MACAnB,EAAAW,aAAA,mBAAA,IAKAH,EAGAR,GAAAoB,SAAAC,QAAAd,GACAP,EAAAsB,YAAAC,KAAAhB,GAEAD,EAAAkB,SAAA,kBAAA,WACA,MAAAjB,GAAAP,EAAAyB,cAGApB,EAAAqB,KAAA,SAAA,WACAnB,EAAAP,EAAAyB,YACAhD,EAAAa,gBAMAjE,EAAAD,QAAA2B,IAGA4E,0BAAA,GAAAC,yBAAA,IAAAC,GAAA,SAAAnF,EAAArB,GAGAA,EAAAD,SACA0G,OAAApF,EAAA,mBACAqF,KAAArF,EAAA,WACAsF,MAAAtF,EAAA,iBAIAuF,kBAAA,EAAAC,aAAA,GAAAC,UAAA,IAAAC,GAAA,SAAA1F,EAAArB,GACA,YAOA,SAAAgH,MAJA,GAAAC,GAAA5F,EAAA,eACA6F,EAAA7F,EAAA,mBA2DA8F,EAAAD,EAAAvF,QAWAyF,WAAA,WAGAhF,KAAAiF,KAAAjF,KAAAkF,YAAAD,QAaAE,KAAA,GAQAF,QAaAG,OAAA,aAcAC,KAAA,SAAAC,EAAAC,GAEA,kBAAAD,KACAC,EAAAD,EACAA,MAEAA,EAAAA,MACAC,EAAAA,GAAAX,CAGA,IAAA1G,GAAA8B,KACAwF,GACAC,MAAA,EACAC,SAKA,OAAA1F,MAAAiF,KAAAU,IAAA3F,KAAAmF,KAAA,UACAS,KAAAN,EACAC,KAAA,SAAAM,EAAAC,GACA,MAAAD,IAKA3H,EAAA6H,QAAA,QAAAF,GACAN,EAAAM,KAGAL,EAAAC,MAAAK,EAAAL,UAEAvH,GAAA+G,KAAAU,IAAAzH,EAAAiH,MACAS,KAAAN,EACAC,KAAA,SAAAM,EAAAG,GACA,MAAAH,IAKA3H,EAAA6H,QAAA,QAAAF,GACAN,EAAAM,KAGAL,EAAAE,MAAAM,EAEAR,EAAAS,YAAAC,SAAAZ,EAAAW,aAAA,EAAA,IACAT,EAAAW,WAAAX,EAAAS,YAAAC,SAAAZ,EAAAa,YAAA,GAAA,IASAjI,EAAA6H,QAAA,SAAAP,OACAD,GAAAM,EAAAL,YAmBAY,OAAA,aAaAC,SAAA,cAIAxB,GAAAyB,OAAAvB,GAEAnH,EAAAD,QAAAoH,IAEAwB,kBAAA,GAAAC,cAAA,KAAAC,GAAA,SAAAxH,EAAArB,IACA,SAAA8I,GACA,YA2BA,SAAAC,GAAAzI,EAAAqH,GACA,MAAA,UAAAM,EAAAe,GAEA,MAAAf,KAAAe,EAAAC,KAAAD,EAAAE,WACAjB,EAAAA,GAAAe,EAAAG,OAAA,GAAAlI,OAAA,OAAA+H,EAAAI,IAAAC,OAAA,eAAAL,EAAAI,IAAAE,IAAA,WACAN,EAAAO,MACAP,EAAAO,KAAAC,UACAvB,EAAAuB,QAAAR,EAAAO,KAAAC,SAGAlJ,EAAA6H,QAAA,QAAAF,GACAN,EAAAM,KAOA,yBAAAe,EAAA5D,OACA4D,EAAAO,MAAA,IAAAE,OAAAC,KAAAV,EAAAO,MAAApI,SACA6H,EAAAO,KAAAI,KAAAC,MAAAZ,EAAAa,OAIAb,EAAAO,KAAA5C,EAAAmD,iBAAAd,EAAAO,WAGA5B,GAAA,KAAAqB,EAAAO,KAAAP,EAAAO,KAAAP,EAAAa,KAAAb,EAAAa,KAAA,MApDA,GAAAE,GAAA1I,EAAA,cACA4F,EAAA5F,EAAA,eACAsF,EAAAtF,EAAA,cACA2F,EAAA,aAUAgD,EAAA,SAAAC,GAGA,GAFAA,EAAAA,OAEAA,EAAAC,QACA,KAAA,IAAAjJ,OAAA,uDAGAgG,GAAAyB,OAAAtG,MAEAA,KAAA6H,OAAAA,EAqCAD,GAAA3H,UAAA8H,KAAA,SAAA5C,EAAA6C,GACAA,EAAAA,KACA,IAAAzC,GAAAyC,EAAAzC,MAAAX,EACA1G,EAAA8B,KACAkH,EAAAlH,KAAA6H,OAAAC,SAAA3C,EAAA,IAAAA,EAAA,IACA6B,EAAAW,EAAAI,KAAAb,EAGA,IAAA,mBAAAR,GACAW,OAAAC,KAAAU,EAAAC,YAAAC,QAAA,SAAAC,GACAnB,EAAAmB,MAAAA,EAAAH,EAAAC,OAAAE,OAGAH,EAAAI,iBAAAF,QAAA,SAAAG,GACArB,EAAAV,OAAA,OAAA,GAAAI,GAAA2B,EAAAC,UACAC,SAAAF,EAAAG,aAIA,IAAAR,EAAAC,QAAAD,EAAAI,YACA,MAAA7C,GAAA,GAAA1G,OAAA,gEAGAmI,GACAyB,IAAA,SAAA,iDACAC,KAAAV,EAAApC,UACA+C,MAAAX,EAAAW,WAEA3B,EAAAL,IAAAA,EAAAzI,EAAAqH,KAOAqC,EAAA3H,UAAA0F,IAAA,SAAAR,EAAA6C,GACA,GAAAd,GAAAlH,KAAA6H,OAAAC,SAAA3C,EAAA,IAAAA,EAAA,GACA,OAAAnF,MAAA4I,KAAA1B,EAAAc,IAMAJ,EAAA3H,UAAA2I,KAAA,SAAA1B,EAAAc,GACAA,EAAAA,KACA,IAAAzC,GAAAyC,EAAAzC,MAAAX,EACA1G,EAAA8B,KAEA6I,EAAAb,EAAAa,QAAA,gDAEA7B,EAAAW,EACAhC,IAAAuB,GACAuB,IAAA,SAAAI,GACAF,MAAAX,EAAApC,SAEAoB,GAAAL,IAAAA,EAAAzI,EAAAqH,KAOAqC,EAAA3H,UAAA6I,IAAA,SAAA3D,EAAA6C,GACAA,EAAAA,KACA,IAAAzC,GAAAyC,EAAAzC,MAAAX,EACA1G,EAAA8B,KACAkH,EAAAlH,KAAA6H,OAAAC,SAAA3C,EAAA,IAAAA,EAAA,IAEA6B,EAAAW,EACAmB,IAAA5B,GACAuB,IAAA,SAAA,iDACAC,KAAAV,EAAApC,SAEAoB,GAAAL,IAAAA,EAAAzI,EAAAqH,KAQAqC,EAAA3H,UAAA8I,IAAA,SAAA5D,EAAA6C,GACAA,EAAAA,KACA,IAAAzC,GAAAyC,EAAAzC,MAAAX,EACA1G,EAAA8B,KACAkH,EAAAlH,KAAA6H,OAAAC,SAAA3C,EAAA,IAAAA,EAAA,IAEA6B,EAAAW,EACAoB,IAAA7B,GACAuB,IAAA,SAAA,iDACAC,KAAAV,EAAApC,SAEAoB,GAAAL,IAAAA,EAAAzI,EAAAqH,KAQAqC,EAAA3H,UAAA+H,QAAA,SAAA7C,EAAA6C,GACAA,EAAAA,KACA,IAAAzC,GAAAyC,EAAAzC,MAAAX,EACA1G,EAAA8B,KACAkH,EAAAlH,KAAA6H,OAAAC,SAAA3C,EAAA,IAAAA,EAAA,IAEA6B,EAAAW,EAAA,UAAAT,GACAuB,IAAA,SAAA,gDAEAzB,GAAAL,IAAAA,EAAAzI,EAAAqH,KAIA3H,EAAAD,QAAAiK,IAEA9I,KAAAkB,KAAAf,EAAA,UAAAyH,UACAF,cAAA,GAAA/B,aAAA,GAAAuE,OAAA,GAAAC,WAAA,KAAAC,GAAA,SAAAjK,EAAArB,GACA,YAuBA,SAAAuL,GAAAtB,GACA,IAAAA,EACA,KAAA,IAAAhJ,OAAA,sBAGA,KAAAgJ,EAAAuB,OACA,KAAA,IAAAvK,OAAA,wBAGAgG,GAAAyB,OAAAtG,MAEA6H,EAAAwB,OAAAxB,EAAAwB,QAAA,UAGAxB,EAAAyB,KAAA,mBAAAzB,GAAAyB,KAAAzB,EAAAyB,MAAA,EAEAzB,EAAA0B,UAAA1B,EAAA0B,cAEAvJ,KAAA4H,WAAAC,EAAAD,YAAAuB,EAAAvB,WAEA5H,KAAA8H,QAAAD,EAAAuB,OACA,MAAApJ,KAAA8H,QAAA0B,MAAA,MACAxJ,KAAA8H,SAAA,KAEA9H,KAAA8H,SAAA,UAAAD,EAAAwB,OAEArJ,KAAA6H,OAAAA,EAEA7H,KAAAgF,aAlDA,GAAAH,GAAA5F,EAAA,cA2DAkK,GAAAvB,WAAA3I,EAAA,iBAGA,SAAAwK,GAOAA,EAAA5B,SAEA,IAAA6B,KAMAD,GAAAzE,WAAA,WAqBA,QAAA2E,GAAA9D,GACA3H,EAAA6H,QAAA,QAAAF,GApBA6D,EAAA,cAAAzK,EAAA,6BACAyK,EAAA,WAAAzK,EAAA,0BACAyK,EAAA,OAAAzK,EAAA,sBACAyK,EAAA,QAAAzK,EAAA,uBACAyK,EAAA,sBAAAzK,EAAA,kCACAyK,EAAA,oBAAAzK,EAAA,gCACAyK,EAAA,KAAAzK,EAAA,oBACAyK,EAAA,SAAAzK,EAAA,wBACAyK,EAAA,kBAAAzK,EAAA,8BACAyK,EAAA,iBAAAzK,EAAA,6BACAyK,EAAA,mBAAAzK,EAAA,+BACAyK,EAAA,KAAAzK,EAAA,oBACAyK,EAAA,MAAAzK,EAAA,qBACAyK,EAAA,SAAAzK,EAAA,wBACAyK,EAAA,IAAAzK,EAAA,mBACAyK,EAAA,QAAAzK,EAAA,sBAEA,IAAAf,GAAA8B,IAOAA,MAAAiF,KAAA,GAAAjF,MAAA4H,YAAAE,QAAA9H,KAAA8H,SAGA,IAAAU,GAAAoB,EAAAC,EAAAC,CACA,KAAAtB,IAAAkB,GAAA,CAEAE,GACApB,KAAAA,EAEAc,KAAAtJ,KAAA6H,OAAAyB,KACAxB,QAAA9H,KAAA8H,QACAiC,YAIAF,EAAA7J,KAAA6H,OAAA0B,UAAAf,MAEA,KAAAsB,IAAAD,GACAD,EAAAE,GAAAD,EAAAC,EAIAJ,GAAAlB,GAAAvD,KAAA,GAAAjF,MAAA4H,WAAAgC,GAGAF,EAAAlB,GAAAvD,KAAAzC,GAAA,QAAAmH,KAYAF,EAAAO,SAAA,SAAAxB,GACA,MAAAkB,GAAAlB,KAEAW,EAAAlJ,WAGArC,EAAAD,QAAAwL,IAsBA3C,cAAA,GAAAyD,gBAAA,EAAAC,4BAAA,EAAAC,8BAAA,EAAAC,6BAAA,EAAAC,4BAAA,GAAAC,yBAAA,GAAAC,qBAAA,GAAAC,oBAAA,GAAAC,sBAAA,GAAAC,uBAAA,GAAAC,kBAAA,GAAAC,sBAAA,GAAAC,iCAAA,GAAAC,+BAAA,GAAAC,mBAAA,GAAAC,mBAAA,GAAAC,uBAAA,KAAAC,GAAA,SAAAjM,EAAArB,GACA,YAEA,IAAAmH,GAAA9F,EAAA,iCAUAkM,EAAApG,EAAAxF,QAMA4L,GAAAhG,KAAA,gBA2BAgG,EAAA9F,KAAA,SAAAC,EAAAC,GACA,MAAAvF,MAAAiF,KAAAU,IAAA3F,KAAAmF,MACAS,KAAAN,EACAC,KAAAA,KAYA4F,EAAAxF,IAAA,SAAAyF,EAAA7F,GACA,MAAAvF,MAAAiF,KAAAU,IAAA3F,KAAAmF,KAAA,IAAAiG,GACA7F,KAAAA,KAWA4F,EAAA/F,OAAA,SAAAiG,EAAA9F,GACA,MAAAvF,MAAAiF,KAAA8C,KAAA/H,KAAAmF,KAAA,WACAS,KAAAyF,EACA9F,KAAAA,KAWA4F,EAAA/E,OAAA,SAAAiF,EAAA9F,GACA,MAAAvF,MAAAiF,KAAA6D,IAAA9I,KAAAmF,KAAA,IAAAkG,EAAAC,IACA1F,KAAAyF,EACA9F,KAAAA,KAiBA4F,EAAAI,KAAA,SAAAF,EAAA9F,GACA,MAAA4F,GAAAE,EAAAC,GAAA,SAAA,UAAAD,EAAA9F,IAWA4F,EAAAA,UAAA,SAAAG,EAAA/F,GACA,MAAAvF,MAAAiF,KAAA8D,IAAA/I,KAAAmF,KAAA,IAAAmG,GACA/F,KAAAA,KAMA3H,EAAAD,QAAAwN,IAGAK,gCAAA,IAAAC,GAAA,SAAAxM,EAAArB,GACA,YAEA,IAAAmH,GAAA9F,EAAA,iCAQAyM,EAAA3G,EAAAxF,QAMAmM,GAAAvG,KAAA,kBAEAuG,EAAArG,KAAA,SAAAC,EAAAC,GACA,MAAAvF,MAAAiF,KAAAU,IAAA3F,KAAAmF,MACAS,KAAAN,EACAC,KAAAA,KAIAmG,EAAAtG,OAAA,SAAAuG,EAAArG,EAAAC,GACAvF,KAAAiF,KAAA8C,KAAA/H,KAAAmF,KAAA,IAAAwG,EAAA,WACA/F,KAAAN,EACAC,KAAAA,KAIA3H,EAAAD,QAAA+N,IAEAF,gCAAA,IAAAI,GAAA,SAAA3M,EAAArB,GACA,YAEA,IAAAmH,GAAA9F,EAAA,iCAQA4M,EAAA9G,EAAAxF,QAMAsM,GAAA1G,KAAA,iBAEA0G,EAAAxG,KAAA,SAAAC,EAAAC,GACA,MAAAvF,MAAAiF,KAAAU,IAAA3F,KAAAmF,MACAS,KAAAN,EACAC,KAAA,SAAAM,EAAAD,GACA,MAAAC,GACAN,EAAAM,OAGAN,GAAA,KAAAK,OAKAiG,EAAAC,QAAA,SAAAC,EAAAzG,EAAAC,GACAvF,KAAAiF,KAAA8C,KAAA/H,KAAAmF,KAAA,IAAA4G,EAAA,YACAnG,KAAAN,EACAC,KAAAA,KAIAsG,EAAAG,SAAA,SAAAD,EAAAzG,EAAAC,GACAvF,KAAAiF,KAAA8C,KAAA/H,KAAAmF,KAAA,IAAA4G,EAAA,aACAnG,KAAAN,EACAC,KAAAA,KAIAsG,EAAAI,YAAA,SAAAF,EAAAzG,EAAAC,GACAvF,KAAAiF,KAAA8C,KAAA/H,KAAAmF,KAAA,IAAA4G,EAAA,iBACAnG,KAAAN,EACAC,KAAAA,KAIAsG,EAAAK,SAAA,SAAAH,EAAAzG,EAAAC,GACAvF,KAAAiF,KAAA8C,KAAA/H,KAAAmF,KAAA,IAAA4G,EAAA,aACAnG,KAAAN,EACAC,KAAAA,KAIA3H,EAAAD,QAAAkO,IAEAL,gCAAA,IAAAW,IAAA,SAAAlN,EAAArB,GACA,YAEA,IAAAmH,GAAA9F,EAAA,iCAQAmN,EAAArH,EAAAxF,QAMA6M,GAAAjH,KAAA,gBAEAiH,EAAA/G,KAAA,SAAAC,EAAAC,GACA,MAAAvF,MAAAiF,KAAAU,IAAA3F,KAAAmF,MACAS,KAAAN,EACAC,KAAAA,KAIA6G,EAAAC,MAAA,SAAAC,EAAAhH,EAAAC,GACAvF,KAAAiF,KAAA8C,KAAA/H,KAAAmF,KAAA,IAAAmH,EAAA,UACA1G,KAAAN,EACAC,KAAAA,KAIA3H,EAAAD,QAAAyO,IAEAZ,gCAAA,IAAAe,IAAA,SAAAtN,EAAArB,GACA,YAEA,IAAAmH,GAAA9F,EAAA,iCAUAuN,EAAAzH,EAAAxF,QAMAiN,GAAArH,KAAA,aAcAqH,EAAApH,OAAA,SAAA4C,EAAAzC,GACA,GAAA0C,IACAwE,kBAAAzE,EAAA0E,gBAEAlJ,EAAAmJ,MAAAvL,QAAA4G,EAAAxE,OACAwE,EAAAxE,OACAwE,EAAAxE,MAUA,OARAwE,GAAA4E,2BACA3E,EAAA,8BAAA,QAGAD,EAAA6E,oBACA5E,EAAA,uBAAA,QAGAjI,KAAAiF,KAAA8C,KAAA/H,KAAAmF,KAAA,WACAS,QACAqC,OAAAA,EACAG,YAAA5E,EACA+B,KAAAA,KAkCAiH,EAAAnH,KAAA,WACAN,EAAAM,KAAAnF,MAAAF,KAAAG,YAIAvC,EAAAD,QAAA6O,IAEAhB,gCAAA,IAAAsB,IAAA,SAAA7N,EAAArB,GACA,YAEA,IAAAmH,GAAA9F,EAAA,iCAUA8N,EAAAhI,EAAAxF,QAMAwN,GAAA5H,KAAA,SASA4H,EAAApH,IAAA,SAAAqH,EAAAzH,GACA,MAAAvF,MAAAiF,KAAAU,IAAA3F,KAAAmF,KAAA,IAAA6H,GACAzH,KAAAA,KAgBAwH,EAAA1H,KAAA,SAAAO,EAAAL,GACA,MAAAvF,MAAAiF,KAAAU,IAAA3F,KAAAmF,MACAS,KAAAA,EACAL,KAAAA,KAgBAwH,EAAAE,SAAA,SAAArH,EAAAL,GACA,GAAAJ,GAAAnF,KAAAmF,KAAA,GAeA,OAbA,gBAAAS,IACAT,EAAAA,EAAAS,EAAA,QACAA,OAGAT,EAAAA,EAAAS,EAAA0F,GAAA,cACA1F,GAAA0F,IAIAnG,GAAA,iBAAAS,EAAAK,aAAA,GACAd,GAAA,gBAAAS,EAAAO,YAAA,IAEAnG,KAAAiF,KAAA8C,KAAA5C,GACAS,KAAAA,EACAL,KAAAA,KAWAwH,EAAA3H,OAAA,SAAA8H,EAAA3H,GACA,MAAAvF,MAAAiF,KAAA8C,KAAA/H,KAAAmF,KAAA,WACAS,KAAAsH,EACA3H,KAAAA,KAWAwH,EAAA3G,OAAA,SAAA8G,EAAA3H,GACA,MAAAvF,MAAAiF,KAAA6D,IAAA9I,KAAAmF,KAAA,IAAA+H,EAAA5B,IACA1F,KAAAsH,EACA3H,KAAAA,KAgBAwH,EAAAxB,KAAA,SAAA2B,EAAA3H,GACA,MAAAwH,GAAAG,EAAA5B,GAAA,SAAA,UAAA4B,EAAA3H,IAUAwH,EAAAA,UAAA,SAAAzB,EAAA/F,GACA,MAAAvF,MAAAiF,KAAA8D,IAAA/I,KAAAmF,KAAA,IAAAmG,GACA/F,KAAAA,KAWAwH,EAAAI,eAAA,SAAA7B,EAAA/F,GACA,MAAA,KAAApF,UAAApB,OACAiB,KAAAiF,KAAA+C,QAAAhI,KAAAmF,MACAI,KAAA+F,IAIAtL,KAAAiF,KAAA+C,QAAAhI,KAAAmF,KAAA,IAAAmG,GACA/F,KAAAA,KAKA3H,EAAAD,QAAAoP,IAGAvB,gCAAA,IAAA4B,IAAA,SAAAnO,EAAArB,GACA,YAEA,IAAAmH,GAAA9F,EAAA,iCAQAoO,EAAAtI,EAAAxF,QAMA8N,GAAAlI,KAAA,QAYAkI,EAAAjI,OAAA,SAAA4C,EAAAzC,GACA,MAAAvF,MAAAiF,KAAA8C,KAAA/H,KAAAmF,KAAA,WACAS,KAAAoC,EACAzC,KAAAA,GAAA,gBAeA8H,EAAA5H,MAAA,SAAAuC,EAAAzC,GACA,IAAApF,UAAApB,QACAwG,EAAAyC,EACAA,MAGAA,EAAAA,MAGAhI,KAAAiF,KAAAU,IAAA3F,KAAAmF,KAAA,UACAS,KAAAoC,EACAzC,KAAAA,GAAA,gBAWA8H,EAAA1H,IAAA,SAAAqC,EAAAzC,GACA,GAAA+F,GAAA,gBAAAtD,GAAAA,EAAAA,EAAAsD,EAEAtL,MAAAiF,KAAAU,IAAA3F,KAAAmF,KAAA,IAAAmG,GACA1F,KAAAoC,EACAzC,KAAAA,GAAA,gBA4BA8H,EAAAhI,KAAA,SAAA2C,EAAAzC,GACAvF,KAAAiF,KAAAU,IAAA3F,KAAAmF,MACAS,KAAAoC,EACAzC,KAAAA,GAAA,gBAYA8H,EAAAC,aAAA,SAAAtF,EAAAzC,GACA,MAAAvF,MAAAiF,KAAA6D,IAAA9I,KAAAmF,KAAA,IAAA6C,EAAAsD,GAAA,YAAAtD,EAAAuF,QACA3H,KAAAoC,EACAzC,KAAAA,GAAA,gBAYA8H,EAAAG,aAAA,SAAAxF,EAAAzC,GACA,MAAAvF,MAAAiF,KAAA8D,IAAA/I,KAAAmF,KAAA,IAAA6C,EAAAsD,GAAA,YAAAtD,EAAAuF,QACA3H,KAAAoC,EACAzC,KAAAA,GAAA,gBAWA8H,EAAAjH,OAAA,SAAA4B,EAAAzC,GACA,MAAAvF,MAAAiF,KAAA6D,IAAA9I,KAAAmF,KAAA,IAAA6C,EAAAsD,IACA1F,KAAAoC,EACAzC,KAAAA,GAAA,gBAWA8H,EAAAA,UAAA,SAAArF,EAAAzC,GACA,MAAAvF,MAAAiF,KAAA8D,IAAA/I,KAAAmF,KAAA,IAAA6C,EAAAsD,IACA1F,KAAAoC,EACAzC,KAAAA,GAAA,gBAIA3H,EAAAD,QAAA0P,IAEA7B,gCAAA,IAAAiC,IAAA,SAAAxO,EAAArB,GACA,YAEA,IAAAmH,GAAA9F,EAAA,iCAUAyO,EAAA3I,EAAAxF,QAMAmO,GAAAvI,KAAA,UA4BAuI,EAAAC,cAAA,SAAArI,EAAAC,GAMA,MALApF,WAAApB,OAAA,IACAwG,EAAApF,UAAA,GACAmF,MAGAtF,KAAAiF,KAAAU,IAAA3F,KAAAmF,KAAA,mBACAS,KAAAN,EACAC,KAAAA,KA4DAmI,EAAAE,gBAAA,SAAAtI,EAAAC,GACApF,UAAApB,OAAA,IACAwG,EAAApF,UAAA,GACAmF,KAGA,IAAA6B,MACAwB,KACAkF,GAAA,cAAA,aAEA,KAAA,GAAAC,KAAAxI,GACAuI,EAAAtK,QAAAuK,GAAA,GACAnF,EAAAmF,GAAAxI,EAAAwI,GAGA3G,EAAA2G,GAAAxI,EAAAwI,EAIA,OAAA9N,MAAAiF,KAAA8C,KAAA/H,KAAAmF,KAAA,qBACAS,KAAAuB,EACAwB,MAAAA,EACApD,KAAAA,KASAmI,EAAAK,qBAAA,SAAAzI,EAAAC,GAMA,MALApF,WAAApB,OAAA,IACAwG,EAAApF,UAAA,GACAmF,MAGAtF,KAAAiF,KAAA8C,KAAA/H,KAAAmF,KAAA,2BACAS,KAAAN,EACAC,KAAAA,KAIA3H,EAAAD,QAAA+P,IAGAlC,gCAAA,IAAAwC,IAAA,SAAA/O,EAAArB,GACA,YAEA,IAAAmH,GAAA9F,EAAA,iCAUAgP,EAAAlJ,EAAAxF,QAMA0O,GAAA9I,KAAA,WA8CA8I,EAAAtI,IAAA,SAAAL,EAAAC,GACAvF,KAAAiF,KAAAU,IAAA3F,KAAAmF,MACAS,KAAAN,EACAC,KAAAA,KA+BA0I,EAAAxI,MAAA,SAAAH,EAAAC,GACAvF,KAAAiF,KAAAU,IAAA3F,KAAAmF,KAAA,UACAS,KAAAN,EACAC,KAAAA,KAIA3H,EAAAD,QAAAsQ,IAGAzC,gCAAA,IAAA0C,IAAA,SAAAjP,EAAArB,GACA,YAEA,IAAAmH,GAAA9F,EAAA,iCAUAkP,EAAApJ,EAAAxF,QAMA4O,GAAAhJ,KAAA,MA+BAgJ,EAAA9I,KAAA,SAAAC,EAAAC,GAEA,GAAAJ,GAAAnF,KAAAmF,IASA,OANAA,IAAA,iBAAAG,EAAAW,aAAA,GACAX,EAAAa,aACAhB,GAAA,eAAAG,EAAA,YAIAtF,KAAAiF,KAAA8C,KAAA5C,GACAS,KAAAN,EACAC,KAAAA,KAWA4I,EAAAC,WAAA,SAAA9I,EAAAC,GACA,MAAAvF,MAAAiF,KAAA6D,IAAA9I,KAAAmF,KAAA,IAAAG,EAAAgG,GAAA,YACA1F,KAAAN,EACAC,KAAAA,KAIA3H,EAAAD,QAAAwQ,IAEA3C,gCAAA,IAAA6C,IAAA,SAAApP,EAAArB,GACA,YAEA,IAAAmH,GAAA9F,EAAA,iCAUAqP,EAAAvJ,EAAAxF,QAMA+O,GAAAnJ,KAAA,UAUAmJ,EAAAC,IAAA,SAAAjJ,EAAAC,GAEA,GAAAJ,GAAAnF,KAAAmF,KAAA,IAAAG,EAAAkD,KAAA,MAGA,cAFAlD,GAAAkD,KAEAxI,KAAAiF,KAAAU,IAAAR,GAAAS,KAAAN,EAAAC,KAAAA,KAGA3H,EAAAD,QAAA2Q,IAEA9C,gCAAA,IAAAgD,IAAA,SAAAvP,EAAArB,GACA,YAOA,SAAAgH,MALA,GAAAG,GAAA9F,EAAA,iCAaAwP,EAAA1J,EAAAxF,QASAmP,QAAA,SAAApJ,EAAAC,GASA,MAPA,kBAAAD,KACAC,EAAAD,EACAA,MAEAA,EAAAA,MACAC,EAAAA,GAAAX,EAEA5E,KAAAiF,KAAA8C,KAAA/H,KAAAmF,MACAI,KAAAA,KAUAoJ,MAAA,SAAApJ,GACA,MAAAvF,MAAAiF,KAAA8C,KAAA/H,KAAAmF,MACAI,KAAAA,GAAAX,KAuBAgK,MAAA,SAAArJ,GACA,MAAAvF,MAAAiF,KAAA8C,KAAA/H,KAAAmF,MACAS,QACAL,KAAAA,OASAJ,KAAA,qBAWAQ,IAAA,SAAA2F,EAAA/F,GAUA,MAAAvF,MAAAiF,KAAAU,IAAA3F,KAAAmF,KAAA,IAAAmG,GACA/F,KAAAA,KAWAsJ,SAAA,SAAAnP,EAAA6F,GACA,MAAAvF,MAAAiF,KAAAU,IAAA3F,KAAAmF,KAAA,QAAAzF,GACA6F,KAAAA,KAmDAF,KAAA,WACAN,EAAAM,KAAAnF,MAAAF,KAAAG,YAYA2O,cAAA,SAAAlJ,EAAAL,GACA,GAAAwJ,GAAA,EACA,IAAAnJ,EAAAlG,IACAqP,EAAA,OAAAnJ,EAAAlG,QAEA,CAAA,IAAAkG,EAAA0F,GAIA,MAAA/F,GAAA,GAAA1G,OAAA,kEAHAkQ,GAAAnJ,EAAA0F,GAMA,GAAA0D,IACAC,kBAAArJ,EAAAqJ,kBAOA,OAJArJ,GAAAsJ,QACAF,EAAAG,eAAAvJ,EAAAsJ,WAAAE,KAAA,MAGApP,KAAAiF,KAAAU,IAAA3F,KAAAmF,KAAA,IAAA4J,EAAA,mBACAnJ,KAAAoJ,EACAzJ,KAAAA,GAAA,gBAeA8J,WAAA,SAAAzJ,EAAAL,GACA,GAAAwJ,GAAA,EACA,IAAAnJ,EAAAlG,IACAqP,EAAA,OAAAnJ,EAAAlG,QAEA,CAAA,IAAAkG,EAAA0F,GAIA,MAAA/F,GAAA,GAAA1G,OAAA,kEAHAkQ,GAAAnJ,EAAA0F,GAMA,MAAAtL,MAAAiF,KAAA8C,KAAA/H,KAAAmF,KAAA,IAAA4J,EAAA,gBACAnJ,MACA0J,YAAA1J,EAAA0J,YACAC,UAAA3J,EAAA2J,WAEAhK,KAAAA,GAAA,gBASAiK,UAAA,SAAA5J,EAAAL,GACA,GAAAJ,GAAAnF,KAAAmF,KAAA,KAAAS,EAAAlG,IAAA,OAAAkG,EAAAlG,IAAAkG,EAAA0F,IAAA,YACA,OAAAtL,MAAAiF,KAAAU,IAAAR,GACAI,KAAAA,GAAAX,KASA6K,IAAA,SAAA7J,EAAAL,GACA,GAAAJ,GAAAnF,KAAAmF,KAAA,KAAAS,EAAA0F,GAAA1F,EAAA0F,GAAA,OAAA1F,EAAAlG,KAAA,MACA,OAAAM,MAAAiF,KAAAU,IAAAR,GACAI,KAAAA,GAAAX,KAWA8K,OAAA,SAAA9J,EAAAL,GACA,GAAAJ,GAAAnF,KAAAmF,IASA,OAPAA,IADAS,EAAAlG,IACA,QAAAkG,EAAAlG,IAGA,IAAAkG,EAAA0F,GAEAnG,GAAA,eAEAnF,KAAAiF,KAAA8C,KAAA5C,GACAS,KAAAA,EACAL,KAAAA,KAYAmJ,QAAA,SAAAiB,EAAArK,EAAAC,GAWA,MATA,kBAAAD,KACAC,EAAAD,EACAA,MAEAA,EAAAA,MACAC,EAAAA,GAAAX,EAEA+K,EAAAhD,MAAAvL,QAAAuO,GAAAA,GAAAA,GAEA3P,KAAAiF,KAAA8C,KAAA/H,KAAAmF,MACAI,KAAAA,KAcAqJ,MAAA,SAAAtJ,EAAAC,GACA,MAAAvF,MAAAiF,KAAA8C,KAAA/H,KAAAmF,KAAA,KAAAG,EAAAgG,GAAAhG,EAAAgG,GAAA,OAAAhG,EAAA5F,KAAA,UACAkG,KAAAN,EACAC,KAAAA,MAMA3H,GAAAD,QAAA8Q,IAGAjD,gCAAA,IAAAoE,IAAA,SAAA3Q,EAAArB,GACA,YAEA,IAAAmH,GAAA9F,EAAA,iCAYA4Q,EAAA9K,EAAAxF,WAWA4F,KAAA,mBAYAC,OAAA,SAAAE,EAAAC,GACA,MAAAvF,MAAAiF,KAAA8C,KAAAzC,EAAAC,IAuEAF,KAAA,WACAN,EAAAM,KAAAnF,MAAAF,KAAAG,YAwBA2P,OAAA,SAAAxK,EAAAC,GACAvF,KAAAiF,KAAA8C,KAAA/H,KAAAmF,KAAA,IAAAG,EAAAgG,GAAA,iBACA1F,MACAmK,aAAAzK,EAAAyK,aACAC,oBAAA1K,EAAA0K,oBACAC,eAAA3K,EAAA2K,gBAEA1K,KAAAA,MAMA3H,GAAAD,QAAAkS,IAEArE,gCAAA,IAAA0E,IAAA,SAAAjR,EAAArB,GACA,YAEA,IAAAmH,GAAA9F,EAAA,iCAUAkR,EAAApL,EAAAxF,QAMA4Q,GAAAhL,KAAA,OA2EAgL,EAAA9K,KAAA,SAAAC,EAAAC,GACA,MAAAvF,MAAAiF,KAAAU,IAAA3F,KAAAmF,MACAS,KAAAN,EACAC,KAAA,SAAAM,EAAAD,GACA,GAAAC,EACA,MAAAN,GAAAM,EAIA,IAAAuK,GAAAxK,EAAAyK,UAAAC,MAAA1K,EAAAyK,UAAAD,MACAG,EAAA3K,EAAAyK,UAAAG,iBAEA,KAAA,GAAApS,KAAAgS,GAAA,CACA,GAAAE,GAAAF,EAAAhS,EACAkS,GAAAD,UAAAC,EAAAD,aACA,KAAA,GAAAvC,KAAAyC,GACA,GAAAA,EAAAzC,GAAAxC,KAAAgF,EAAAG,oBAAA,CACAH,EAAAD,UAAAG,mBAAAD,EAAAzC,GACA,QAKAvI,EAAA,KAAAK,OAWAuK,EAAAxK,IAAA,SAAA+K,EAAAnL,GACA,MAAAvF,MAAAiF,KAAAU,IAAA3F,KAAAmF,KAAA,IAAAuL,GACAnL,KAAAA,KASA4K,EAAAQ,SAAA,SAAAD,EAAAnL,GACA,MAAAvF,MAAAiF,KAAAU,IAAA3F,KAAAmF,KAAA,IAAAuL,EAAA,YACAnL,KAAAA,KASA4K,EAAAS,cAAA,SAAAF,EAAAnL,GACA,MAAAvF,MAAAiF,KAAAU,IAAA3F,KAAAmF,KAAA,IAAAuL,EAAA,mBACAnL,KAAAA,KAaA4K,EAAAU,iBAAA,SAAAH,EAAApL,EAAAC,GACA,MAAAvF,MAAAiF,KAAA8C,KAAA/H,KAAAmF,KAAA,IAAAuL,EAAA,mBACA9K,KAAAN,EACAC,KAAAA,KAaA4K,EAAAW,oBAAA,SAAAJ,EAAApL,EAAAC,GACA,MAAAvF,MAAAiF,KAAA8C,KAAA/H,KAAAmF,KAAA,IAAAuL,EAAA,0BACA9K,KAAAN,EACAC,KAAAA,KAWA4K,EAAAY,cAAA,SAAAL,EAAAtJ,EAAA7B,GACA,MAAAvF,MAAAiF,KAAA8C,KAAA/H,KAAAmF,KAAA,IAAAuL,EAAA,mBACA9K,MACAwB,QAAAA,GAEA7B,KAAAA,KAUA4K,EAAA/K,OAAA,SAAAkL,EAAA/K,GACA,MAAAvF,MAAAiF,KAAA8C,KAAA/H,KAAAmF,KAAA,WACAS,KAAA0K,EACA/K,KAAAA,KAWA4K,EAAA/J,OAAA,SAAAkK,EAAA/K,GACA,MAAAvF,MAAAiF,KAAA6D,IAAA9I,KAAAmF,KAAA,IAAAmL,EAAAhF,IACA1F,KAAA0K,EACA/K,KAAAA,KAgCA4K,EAAAa,SAAA,SAAAN,EAAAnD,EAAAhI,GACA,GAAAK,IACA2H,OAAAA,EASA,OANA,KAAApN,UAAApB,SACA2R,EAAAvQ,UAAA,GAAAuQ,OACA9K,EAAA2H,OAAApN,UAAA,GAAAoN,OACAhI,EAAApF,UAAA,IAGAH,KAAAiF,KAAA8C,KAAA/H,KAAAmF,KAAA,IAAAuL,EAAA,aACA9K,KAAAA,EACAL,KAAAA,KAeA4K,EAAAc,SAAA,SAAAP,EAAAnD,EAAAhI,GACA,GAAAK,IACA2H,OAAAA,EASA,OANA,KAAApN,UAAApB,SACA2R,EAAAvQ,UAAA,GAAAuQ,OACA9K,EAAA2H,OAAApN,UAAA,GAAAoN,OACAhI,EAAApF,UAAA,IAGAH,KAAAiF,KAAA8C,KAAA/H,KAAAmF,KAAA,IAAAuL,EAAA,aACA9K,KAAAA,EACAL,KAAAA,KAiBA4K,EAAAe,MAAA,SAAAR,EAAAnD,EAAAhI,GACA,GAAAK,IACA2H,OAAAA,EASA,OANA,KAAApN,UAAApB,SACA2R,EAAAvQ,UAAA,GAAAuQ,OACA9K,EAAA2H,OAAApN,UAAA,GAAAoN,OACAhI,EAAApF,UAAA,IAGAH,KAAAiF,KAAA8C,KAAA/H,KAAAmF,KAAA,IAAAuL,EAAA,UACA9K,KAAAA,EACAL,KAAAA,KAaA4K,EAAAgB,QAAA,SAAAT,EAAAnL,GAKA,MAJA,gBAAAmL,KACAA,EAAAA,EAAAA,QAGA1Q,KAAAiF,KAAA8C,KAAA/H,KAAAmF,KAAA,IAAAuL,EAAA,YACAnL,KAAAA,KAmBA4K,EAAAd,WAAA,SAAAzJ,EAAAL,GACA,MAAAK,GAAA0F,GAIAtL,KAAAiF,KAAA8C,KAAA/H,KAAAmF,KAAA,IAAAS,EAAA0F,GAAA,gBACA1F,MACA2J,UAAA3J,EAAA2J,WAEAhK,KAAAA,GAAA,eAPAA,EAAA,GAAA1G,OAAA,sCAgBAsR,EAAArB,cAAA,SAAAlJ,EAAAL,GACA,GAAAwJ,GAAA,EACA,IAAAnJ,EAAAlG,IACAqP,EAAA,OAAAnJ,EAAAlG,QAEA,CAAA,IAAAkG,EAAA0F,GAIA,MAAA/F,GAAA,GAAA1G,OAAA,+CAHAkQ,GAAAnJ,EAAA0F,GAMA,GAAA0D,IACAC,kBAAArJ,EAAAqJ,kBAOA,OAJArJ,GAAAsJ,QACAF,EAAAG,cAAAvJ,EAAAsJ,MAAAE,KAAA,MAGApP,KAAAiF,KAAAU,IAAA3F,KAAAmF,KAAA,IAAA4J,EAAA,mBACAnJ,KAAAoJ,EACAzJ,KAAAA,GAAA,gBASA4K,EAAAiB,KAAA,SAAAV,EAAAnL,GACA,MAAAvF,MAAAiF,KAAAU,IAAA3F,KAAAmF,KAAA,IAAAuL,EAAA,SACAnL,KAAAA,KAcA4K,EAAAkB,cAAA,SAAA/L,EAAAC,GACA,MAAAvF,MAAAiF,KAAA6D,IAAA9I,KAAAmF,KAAA,IAAAG,EAAAgG,GAAA,mBAAAhG,EAAAgM,OACA1L,KAAAN,EACAC,KAAAA,KASA4K,EAAAoB,eAAA,SAAAb,EAAAnL,GACA,MAAAvF,MAAAiF,KAAAU,IAAA3F,KAAAmF,KAAA,IAAAuL,EAAA,mBACAnL,KAAAA,KAIA3H,EAAAD,QAAAwS,IAGA3E,gCAAA,IAAAgG,IAAA,SAAAvS,EAAArB,GACA,YAEA,IAAAmH,GAAA9F,EAAA,iCAQAwS,EAAA1M,EAAAxF,QAMAkS,GAAAtM,KAAA,OAaAsM,EAAArM,OAAA,SAAA4C,EAAAzC,GACAyC,EAAAA,KAEA,IAAA0J,IACA,KACA,YACA,WACA,WAEA,KAAA,GAAApT,KAAAoT,GAAA,CACA,GAAAlJ,GAAAkJ,EAAApT,EACA,KAAA0J,EAAAQ,GACA,MAAAjD,GAAA,GAAA1G,OAAA,WAAA2J,EAAA,2BAIA,GAAA5C,IACA+L,SACArG,GAAAtD,EAAAsD,GACAsG,UAAA5J,EAAA4J,UACAC,SAAA7J,EAAA6J,UAEAC,aACAC,SAAA/J,EAAA+J,UAQA,OAJA/J,GAAAgK,QACApM,EAAA+L,QAAAK,MAAAhK,EAAAgK,OAGAhS,KAAAiF,KAAA8C,KAAA/H,KAAAmF,KAAA,WACAS,KAAAA,EACAL,KAAAA,GAAA,gBAsBAkM,EAAApM,KAAA,SAAA2C,EAAAzC,GACA,IAAApF,UAAApB,QACAwG,EAAAyC,EACAA,MAGAA,EAAAA,MAGAhI,KAAAiF,KAAAU,IAAA3F,KAAAmF,MACAS,KAAAoC,EACAzC,KAAAA,GAAA,gBAiBAkM,EAAAhM,MAAA,SAAAuC,EAAAzC,GACA,IAAApF,UAAApB,QACAwG,EAAAyC,EACAA,MAGAA,EAAAA,MAGAhI,KAAAiF,KAAAU,IAAA3F,KAAAmF,KAAA,UACAS,KAAAoC,EACAzC,KAAAA,GAAA,gBAWAkM,EAAAE,QAAA,SAAA3J,EAAAzC,GACA,GAAA+F,GAAA,gBAAAtD,GAAAA,EAAAA,EAAAsD,EAEAtL,MAAAiF,KAAA8D,IAAA/I,KAAAmF,KAAA,IAAAmG,EAAA,YACA/F,KAAAA,GAAA,gBAcAkM,EAAAQ,cAAA,SAAAjK,EAAAzC,GAGA,MAFAyC,GAAAA,MAEAA,EAAAsD,OAIAtL,MAAAiF,KAAA6D,IAAA9I,KAAAmF,KAAA,IAAA6C,EAAAsD,GAAA,YACA1F,KAAAoC,EACAzC,KAAAA,GAAA,eALAA,EAAA,GAAA1G,OAAA,8CAmBA4S,EAAAS,kBAAA,SAAAlK,EAAAzC,GAGA,GAFAyC,EAAAA,OAEAA,EAAAsD,GACA,MAAA/F,GAAA,GAAA1G,OAAA,gDAGA,KAAAmJ,EAAA+J,SACA,MAAAxM,GAAA,GAAA1G,OAAA,sDAGA,IAAA+G,IACAmM,SAAA/J,EAAA+J,SAGA/J,GAAAmK,4BACAvM,EAAAuM,0BAAAnK,EAAAmK,2BAGAnS,KAAAiF,KAAA6D,IAAA9I,KAAAmF,KAAA,IAAA6C,EAAAsD,GAAA,gBACA1F,KAAAA,EACAL,KAAAA,GAAA,gBAWAkM,EAAAA,UAAA,SAAAzJ,EAAAzC,GACA,GAAA+F,GAAA,gBAAAtD,GAAAA,EAAAA,EAAAsD,EAEAtL,MAAAiF,KAAA8D,IAAA/I,KAAAmF,KAAA,IAAAmG,GACA/F,KAAAA,GAAA,gBAIA3H,EAAAD,QAAA8T,IAEAjG,gCAAA,IAAA4G,IAAA,SAAAnT,EAAArB,GACA,YAEA,IAAAmH,GAAA9F,EAAA,iCAUAoT,EAAAtN,EAAAxF,QAMA8S,GAAAlN,KAAA,oBA+GAkN,EAAAC,UAAA,SAAA1M,EAAAL,GACAvF,KAAAiF,KAAA8C,KAAA/H,KAAAmF,MACAS,KAAAA,EACAL,KAAAA,KAIA3H,EAAAD,QAAA0U,IAGA7G,gCAAA,IAAA+G,IAAA,SAAAtT,EAAArB,GACA,YAIA,SAAAgH,MAkBA,QAAAE,KACA9E,KAAAgF,aArBA,GAAAH,GAAA5F,EAAA,WAoCA6F,GAAAvF,OAAA,SAAAiT,EAAAC,GACAD,EAAAA,MACAC,EAAAA,KAEA,IACAC,GAAAC,EAAApU,EAAAK,EADAgU,EAAA5S,IAIA0S,GADAF,GAAAnL,OAAAwL,eAAA/T,KAAA8T,EAAA,eACAJ,EAAAtN,YAGA,WAAA,MAAA0N,GAAA1S,MAAAF,KAAAG,WAGA,KAAA5B,IAAAqU,GACAF,EAAAnU,GAAAqU,EAAArU,EAEA,KAAAA,IAAAkU,GACAC,EAAAnU,GAAAkU,EAAAlU,EAGAoU,GAAA,WAAA3S,KAAAkF,YAAAwN,GACAC,EAAA1S,UAAA2S,EAAA3S,UACAyS,EAAAzS,UAAA,GAAA0S,EAEA,KAAA/T,IAAA4T,GACAE,EAAAzS,UAAArB,GAAA4T,EAAA5T,EAGA,OAAA8T,IAUA5N,EAAA7E,UAAA+E,WAAAJ,EAGAC,EAAAyB,OAAAxB,GAIAlH,EAAAD,QAAAmH,IAEAgO,WAAA,KAAAC,IAAA,SAAA9T,EAAArB,GACA,YA2BA,SAAAoV,GAAAC,GACA,GAAAvU,GAAAwU,IACA,KAAAxU,IAAAuU,GACAC,EAAApP,KAAAmP,EAAAvU,GAEA,OAAAwU,GASA,QAAAC,GAAAC,GACA,GAAAC,GAAAC,GAAA,CACA,OAAA,YACA,MAAAA,GAAAD,GACAC,GAAA,EACAD,EAAAD,EAAAlT,MAAAF,KAAAG,WACAiT,EAAA,KACAC,IAUA,QAAAE,GAAAN,EAAAzK,GACAyK,EAAAO,QAAAP,EAAAO,YACAP,EAAAO,QAAAhL,GAAAyK,EAAAO,QAAAhL,OAzCA,GAAA3D,KAiDAA,GAAAyB,OAAA,SAAA2M,GACAA,EAAAzQ,GAAAxC,KAAAwC,GACAyQ,EAAAE,KAAAnT,KAAAmT,KACAF,EAAAQ,IAAAzT,KAAAyT,IACAR,EAAAlN,QAAA/F,KAAA+F,QACAkN,EAAAO,YASA3O,EAAArC,GAAA,SAAAkR,EAAAC,GAKA,MAJAJ,GAAAvT,KAAA0T,GAEA1T,KAAAwT,QAAAE,GAAA5P,KAAA6P,GAEA3T,MASA6E,EAAAsO,KAAA,SAAAO,EAAAC,GACA,GAAAzV,GAAA8B,KACA4T,EAAAT,EAAA,WACAjV,EAAAuV,IAAAC,EAAAP,GACAQ,EAAAzT,MAAAF,KAAAG,YAGA,OADAyT,GAAAC,UAAAF,EACA3T,KAAAwC,GAAAkR,EAAAE,IASA/O,EAAA4O,IAAA,SAAAC,EAAAC,GAGA,GAFAJ,EAAAvT,KAAA0T,IAEAC,EAEA,aADA3T,MAAAwT,QAAAE,GACA1T,IAGA,IAAAtC,GAAAwV,IACA,KAAAxV,IAAAsC,MAAAwT,QAAAE,GACA1T,KAAAwT,QAAAE,GAAAhW,KAAAiW,GACAT,EAAApP,KAAA9D,KAAAwT,QAAAE,GAAAhW,GAKA,OAFAsC,MAAAwT,QAAAE,GAAAR,EAEAlT,MASA6E,EAAAkB,QAAA,WACA,GAAAvE,GAAAwR,EAAA7S,WACAuT,EAAAlS,EAAAsS,OACAP,GAAAvT,KAAA0T,EAEA,IAAAhW,EACA,KAAAA,IAAAsC,MAAAwT,QAAAE,GACA1T,KAAAwT,QAAAE,GAAAhW,GAAAsC,KAAAwB,EAGA,OAAAxB,OAIApC,EAAAD,QAAAkH,OAEAkP,IAAA,SAAA9U,QAAArB,OAAAD,SACA,YAuCA,SAAAuB,aAAA8I,GACA,IAAAA,EACA,KAAA,IAAAnJ,OAAA,mDAGA,IAAA0G,GAAAyC,EAAAzC,KAAAyC,EAAAzC,MAAA,SAAAM,GAAA,GAAAA,EAAA,KAAAA,GASA,OANA7F,MAAAgU,OADAhM,EAAAgM,OACAhM,EAAAgM,OAGA,GAAA7V,QAAAkG,OAAA2D,EAAAiM,kBAGAjM,EAAA0I,QAAA1I,EAAAyI,qBAAAzI,EAAAkM,sBAIAlU,KAAA0Q,OAAA1I,EAAA0I,OACA1Q,KAAAyQ,oBAAAzI,EAAAyI,oBACAzQ,KAAAkU,qBAAAlM,EAAAkM,qBAEAlU,KAAAO,YAAAyH,EAAAzH,YACAP,KAAAmU,iBAAAnM,EAAAmM,iBACAnU,KAAAoU,QAAApM,EAAAoM,QAEApU,KAAAO,aAAAP,KAAAmU,iBAIAnU,KAAAO,aAAAP,KAAAoU,SAQApU,KAAAqU,gBAAA,GAAAC,kBACAN,OAAAhU,KAAAgU,SAOAhU,KAAAI,kBAAA4H,EAAA5H,oBACAmU,kBACAC,qBAGAxU,KAAAsP,YAAA,KAEAtP,KAAAiI,UAEAjI,KAAAyU,WAEAzU,KAAAgI,QAAAA,EAGAnD,OAAAyB,OAAAtG,UAEAA,MAAAgF,WAAAO,IA/BAA,EAAA,GAAA1G,OAAA,+EAJA0G,EAAA,GAAA1G,OAAA,wFAZA0G,EAAA,GAAA1G,OAAA,oHA9CA,GAAAO,GAAAH,QAAA,aAEAqV,gBAAArV,QAAA,sBAEAsV,kBAAAtV,QAAA,kCAEAuV,oBAAAvV,QAAA,oCAEA6F,UAAA7F,QAAA,mBAEAI,UAAAJ,QAAA,eAEA4F,OAAA5F,QAAA,cAuFAC,aAAAe,UAAAyU,kBAAA,SAAAC,GACA,GAAAzW,GAAA8B,KACAM,EAAAqU,EAAArU,QACAlB,GAAAkB,EAAApC,EAAAqC,aAAAC,KAAA,WACAtC,EAAA+J,OAAAnE,KAAA,GAAA6Q,GAAA3U,KAAA9B,EAAAmW,qBASAnV,YAAAe,UAAA+E,WAAA,SAAAO,GACAA,EAAAA,GAAA,SAAAM,GAAA,GAAAA,EAAA,KAAAA,GACA,IAAA3H,GAAA8B,IAGA,IAAAA,KAAAoU,QAEApU,KAAAgU,OAAA/O,KAAA2D,KAAA5I,KAAAoU,SACAvL,OAAA,MACAtD,KAAA,SAAAM,EAAA+O,GACA,GAAA/O,EACA,MAAAN,GAAAM,EAGA,KACA3H,EAAAsB,WAAAoV,GACA1W,EAAA2W,eAAAtP,GAEA,MAAAwB,GACAxB,EAAAwB,KAGAnB,MAAAkP,QAAAC,KAAAC,aAIA,KACAhV,KAAA6U,eAAAtP,GAEA,MAAAwB,GACAxB,EAAAwB,KAUA7H,YAAAe,UAAAT,WAAA,SAAAyV,GAKA7V,EAAAY,KAAAmU,kBACAe,KAAA,IACAC,OAAA,sCAAAF,EAAA,SAGA,IAAA1U,GAAAP,KAAAO,YAAAnB,EAAA,OAAAY,KAAAmU,iBACA,IAAA,IAAA5T,EAAAxB,OACA,KAAA,IAAAF,OAAA,kDAEA0B,GAAAV,KAAA,SACAU,EAAAV,KAAA,OAAA,cASAX,YAAAe,UAAA4U,eAAA,SAAAtP,GACA,GAAArH,GAAA8B,IAGAA,MAAAoV,wBAGApV,KAAAqV,0BAGArV,KAAAsV,qBAGAtV,KAAAuB,UAAA,eAEAvB,KAAAuV,eAAA,SAAA1P,EAAA+O,GACA,GAAA/O,EACA,KAAAA,EAIA3H,GAAAsX,eAAAZ,GAGA1W,EAAAuX,oBAAAb,GAGA1W,EAAAqD,UAAA,qBAGArD,EAAAwX,UAGAxX,EAAAqD,UAAA,sBAGArD,EAAAyX,iBAGAzX,EAAAqD,UAAA,qBAGAgE,EAAA,KAAArH,MAIAgB,YAAAe,UAAAoV,wBAAA,WACA,IAAA,GAAAV,KAAA3U,MAAAI,kBACAJ,KAAA0U,kBAAA1U,KAAAI,kBAAAuU,KAOAzV,YAAAe,UAAAmV,sBAAA,WAEA,IAAA,GADAQ,GAAAxW,EAAA,UAAAC,UAAAwW,qBAAA,IAAA7V,KAAAO,aACA3B,EAAA,EAAAA,EAAAgX,EAAA7W,OAAAH,IACAoB,KAAAyU,QAAA3Q,KAAA8R,EAAAhX,GAAA6I,OAIAvI,YAAAe,UAAAqV,mBAAA,WACA,IAAA,GAAA1W,GAAA,EAAAA,EAAAoB,KAAAyU,QAAA1V,OAAAH,IACAoB,KAAAa,kBAAAb,KAAAyU,QAAA7V,KAIAM,YAAAe,UAAAY,kBAAA,SAAAC,SAEA,SAAAC,SAGAO,KAAAR,SAGAd,OAcAd,YAAAe,UAAA6V,MAAA,SAAAnC,GACA,GAAAoC,GAAA/V,KAAA0Q,QAAA1Q,KAAAyQ,qBAAAzQ,KAAAgW,cAEA,KAAAD,EAAA,CACA,GAAA,kBAAApC,GACA,MAAAA,GAAA,GAAA9U,OAAA,mCAEA,MAAA,IAAAA,OAAA,mCAMA,GAFAmB,KAAAiW,gBAAA,EACAjW,KAAAuB,UAAA,UACAvB,KAAAiW,eAAA,CAIA,IAEAjW,KAAAkW,mBAGA,IAAAJ,IAAAK,KAAApB,KAAAC,MAAAoB,QACA,KAAA,GAAA5N,KAAAxI,MAAAqU,gBAAA9E,UACA,UAAAvP,KAAAqU,gBAAA9E,UAAA/G,GAAAxF,OACA8S,EAAAM,KAAA5N,GAAAxI,KAAAqU,gBAAA9E,UAAA/G,GAAA9F,MAKA2T,cAAAC,QAAA,WAAAP,EAAAxO,KAAAgP,UAAAT,IAEA,MAAA/O,GACA,GAAA,kBAAA4M,GACA,MAAAA,GAAA5M,EAEA,MAAAA,GAGA/G,KAAAuB,UAAA,oBACA,kBAAAoS,IACAA,MAUAzU,YAAAe,UAAAuW,aAAA,WACA,GAAAT,GAAA/V,KAAA0Q,QAAA1Q,KAAAyQ,qBAAAzQ,KAAAgW,cAEA,KAAAD,EACA,KAAA,IAAAlX,OAAA,kCAIA,KAAAwX,aAAAI,QAAA,WAAAV,GACA,OAAA,CAIA,IAAAW,GAAAL,aAAAI,QAAA,WAAAV,EACA,KACAW,EAAAnP,KAAAC,MAAAkP,GAEA,MAAA3P,GACA,OAAA,EAIA,MAAA2P,IAAArP,OAAAC,KAAAoP,GAAA3X,QAIA,GAHA,GAgBAG,YAAAe,UAAAyV,QAAA,SAAA/B,GACA,GAAA+C,GACAN,EAAApW,KAAAqU,gBAAA9E,UACAwG,EAAA/V,KAAA0Q,QAAA1Q,KAAAyQ,qBAAAzQ,KAAA2L,gBAEA,KAAAoK,EAAA,CACA,GAAA,kBAAApC,GACA,MAAAA,GAAA,GAAA9U,OAAA,mCAEA,MAAA,IAAAA,OAAA,mCAMA,GAAAmB,KAAAwW,eAAA,CAOA,IAEAE,EAAAL,aAAAI,QAAA,WAAAV,GACAW,EAAAnP,KAAAC,MAAAkP,GAAAN,KAEA,MAAArP,GACA,GAAA,kBAAA4M,GACA,MAAAA,GAAA5M,EAEA,MAAAA,GAKA,IAAA,GAAAyB,KAAAkO,GACAN,EAAA5N,GACA4N,EAAA5N,GAAA9F,MAAAgU,EAAAlO,GAGA4N,EAAA5N,IACAA,KAAAA,EACA9F,MAAAgU,EAAAlO,GAKA,mBAAAmL,IACAA,QAjCA,IAAA,kBAAAA,GACA,MAAAA,MAyCAzU,YAAAe,UAAAyP,OAAA,SAAAiE,GACA,GAAAoC,GAAA/V,KAAA0Q,QAAA1Q,KAAAyQ,mBAKA,IAFAzQ,KAAA2W,iBAAA,EACA3W,KAAAuB,UAAA,WACAvB,KAAA2W,gBAAA,CAIA,IAEA3W,KAAAkW,oBACA,MAAAnP,GACA,MAAA4M,GAAA5M,GAGA,GAAA7I,GAAA8B,IACAA,MAAA4W,eAAA,WAEAP,aAAAQ,WAAA,WAAAd,GAGA7X,EAAA4Y,gBAAA,SAAAjR,EAAA+O,GACA,MAAA/O,IACA3H,EAAAqD,UAAA,gBAAAsE,GACA8N,EAAA9N,KAGA3H,EAAAqD,UAAA,sBACAoS,GAAA,KAAAiB,UAMA1V,YAAAe,UAAA2W,eAAA,SAAAjD,GACA,GAAAoD,GAAA/W,KACAgX,EAAA,EAEAC,EAAA,WACA,MAAAD,GACArD,KAIAuD,EAAA,SAAAC,GACA,GAAA,IAAAA,EAAA,MAAA,QACA,IAAAC,GAAA,IACAC,GAAA,QAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,MACAzY,EAAA0Y,KAAAC,MAAAD,KAAAE,IAAAL,GAAAG,KAAAE,IAAAJ,GACA,QAAAD,EAAAG,KAAAG,IAAAL,EAAAxY,IAAA8Y,YAAA,GAAA,IAAAL,EAAAzY,GAGA,KAAA,GAAAA,KAAAoB,MAAAiI,OAAA,CACA,GAAArI,GAAAI,KAAAiI,OAAArJ,GAAAgB,QAAA,EACA,IAAA,SAAAA,EAAA+X,aAAA,QACA,GAAA,kBAAAC,aAAAhY,EAAA4D,MAAAzE,OAAA,EAAA,CACA,GAAAa,EAAA4D,MAAA,GAAAC,MAAAyC,SAAAtG,EAAA+X,aAAA,oBAAA,KAAA,KACA,KAAA,IAAA9Y,OAAA,wBAAAqY,EAAAhR,SAAAtG,EAAA+X,aAAA,oBAAA,KAAA,KAAA,aAEA,IAAAE,GAAA,GAAAD,WAEAC,GAAAC,UAAA,SAAAlZ,GACA,MAAA,UAAAlB,GAIA,IAAA,GAHAqa,GAAA,GACAZ,EAAA,GAAAa,YAAAta,EAAAua,OAAArD,QACAsD,EAAAf,EAAAgB,WACAC,EAAA,EAAAF,EAAAE,EAAAA,IACAL,GAAAM,OAAAC,aAAAnB,EAAAiB,GAEArB,GAAA1C,gBAAA9E,UAAAwH,EAAA9O,OAAArJ,GAAA2Z,cAAA7V,MAAA8V,KAAAT,GACAd,MAEArY,GAEAiZ,EAAAY,kBAAA7Y,EAAA4D,MAAA,IACAwT,QAEAD,GAAA1C,gBAAA9E,UAAAwH,EAAA9O,OAAArJ,GAAA2Z,cAAA7V,MAAA,KAKAuU,KAOA/X,YAAAe,UAAAsV,eAAA,SAAAhQ,GACAA,EAAAA,GAAA,YACA,IAAA2J,GAAAlP,KAAAqU,gBAAAlF,eACA,IAAAD,EAAAnQ,OAAA,CAEA,GAAA6G,IACAsJ,MAAAA,EACAD,mBAAA,EAIAjP,MAAA0Q,QACA9K,EAAA0F,GAAAtL,KAAA0Q,OACA1Q,KAAAgU,OAAAhK,SAAA,QAAA8E,cAAAlJ,EAAAL,KAGAK,EAAA0F,GAAAtL,KAAAyQ,oBACA7K,EAAAlG,IAAAM,KAAAkU,qBACAlU,KAAAgU,OAAAhK,SAAA,sBAAA8E,cAAAlJ,EAAAL,QAIAA,MASArG,YAAAe,UAAA6W,gBAAA,SAAAvR,GACAA,EAAAA,GAAA,YAEA,IAAAmT,GAAA1Y,KAAAqU,gBACA+B,EAAAsC,EAAAnJ,UAEAoJ,IACA,KAAA,GAAAC,KAAAxC,GAGA,GAAAsC,EAAAG,QAAAD,GAAA,CACA,GAAAE,GAAA1C,EAAAwC,GAAAlW,KAGAgW,GAAAK,eAAAH,KACAE,EAAAvR,KAAAgP,UAAAuC,IAGAH,EAAAC,IACAlW,MAAAoW,EACA9V,KAAAoT,EAAAwC,GAAA5V,KACAgW,UAAA5C,EAAAwC,GAAAI,WAKA,GAAApT,IAAA2J,UAAAoJ,EAGA,IAAA3Y,KAAA0Q,OACA9K,EAAA0F,GAAAtL,KAAA0Q,OACA1Q,KAAAgU,OAAAhK,SAAA,QAAAqF,WAAAzJ,EAAAL,OAEA,CACA,GAAA+J,GAAAtP,KAAAsP,aAAAtP,KAAAO,YAAA0Y,KAAA,wCAAAH,KACAxJ,KACA1J,EAAA0J,YAAAA,GAEA1J,EAAA0F,GAAAtL,KAAAyQ,oBACA7K,EAAAlG,IAAAM,KAAAkU,qBACAlU,KAAAgU,OAAAhK,SAAA,sBAAAqF,WAAAzJ,EAAAL,KAOArG,YAAAe,UAAAwV,oBAAA,SAAAlG,GACA,IAAA,GAAAqJ,KAAArJ,GACAvP,KAAAqU,gBAAA6E,iBAAAN,EAAArJ,EAAAqJ,GAAAlW,QAOAxD,YAAAe,UAAAuV,eAAA,SAAAjG,GAEA,GAAA6G,GAAApW,KAAAqU,gBAAA9E,SAEA,KAAA,GAAAqJ,KAAArJ,GAAA,CACA,GAAA6G,EAAAwC,GACA,IAAA,GAAA9K,KAAAyB,GAAAqJ,GACAxC,EAAAwC,GAAA9K,GAAAsI,EAAAwC,GAAA9K,IAAAyB,EAAAqJ,GAAA9K,OAIAsI,GAAAwC,GAAArJ,EAAAqJ,EAGA5Y,MAAAqU,gBAAA0E,eAAAH,KACAxC,EAAAwC,GAAAlW,MAAA6E,KAAAC,MAAA+H,EAAAqJ,GAAAlW,QAEA1C,KAAAqU,gBAAA8E,oBAAA,IASAja,YAAAe,UAAA0V,eAAA,WAEA,IAAA,GAAA/W,KAAAoB,MAAAiI,OACAjI,KAAAiI,OAAArJ,GAAAwa,cAUAla,YAAAe,UAAAiW,kBAAA,WACA,IAAA,GAAAtX,KAAAoB,MAAAiI,OACAjI,KAAAiI,OAAArJ,GAAAya,YAOAna,YAAAe,UAAAsB,UAAA,SAAAmS,EAAAT,GACAjT,KAAA+F,QAAA2N,EAAAT,IAMA/T,YAAAE,EAAAA,EAEAF,YAAAoV,gBAAAA,gBACApV,YAAA+I,UACA/I,YAAA+I,OAAAsM,kBAAAA,kBACArV,YAAA+I,OAAAuM,oBAAAA,oBAKAtV,YAAAoa,kBAAA,SAAAC,GACA,IAAA,GAAA3a,GAAA,EAAAA,EAAAyX,aAAAtX,OAAAH,IAAA,CACA,GAAAc,GAAA2W,aAAA3W,IAAAd,EACA,IAAA,IAAAc,EAAA6D,QAAA,YAAA,CACA,GAAAiW,GAAAjS,KAAAC,MAAA6O,aAAAI,QAAA/W,GACA8Z,GAAArD,KAAAoD,IACAlD,aAAAQ,WAAAnX,GACAd,QAaAM,YAAAK,OAAAuF,UAAAvF,OAEA3B,OAAAD,QAAAuB,cAGAqH,kBAAA,GAAAC,cAAA,GAAAiT,cAAA,GAAAC,mCAAA,GAAAC,iCAAA,GAAAC,YAAA,GAAAC,qBAAA,KAAAC,IAAA,SAAA7a,EAAArB,GACA,YAEAA,GAAAD,SACAoc,mBAAA,WACAha,4BAAA,oBACAia,4BAAA,oBACAC,sBAAA,cACApE,qBAAA,mBAGAqE,IAAA,SAAAjb,EAAArB,GACA,YAKA,SAAAgH,MAUA,QAAAuV,GAAAva,EAAAyU,GACArU,KAAAJ,QAAAR,EAAAQ,GACAI,KAAAqU,gBAAAA,EAEArU,KAAAuY,aAAA,KAEAvY,KAAAgF,aAnBA,GAAAF,GAAA7F,EAAA,oBACAG,EAAAH,EAAA,eA2BAkb,GAAA7Z,SAAA,KASA6Z,EAAA5a,OAAAuF,EAAAvF,OAQA4a,EAAAla,UAAA+E,WAAAJ,EAYAuV,EAAAla,UAAAmZ,WAAAxU,EAQAuV,EAAAla,UAAAoZ,SAAAzU,EAEAhH,EAAAD,QAAAwc,IAGAC,mBAAA,GAAAC,eAAA,KAAAC,IAAA,SAAArb,EAAArB,GACA,YAEA,IAAAyB,GAAAJ,EAAA,kBACAkb,EAAAlb,EAAA,yBACAG,EAAAH,EAAA,gBASAuV,EAAA2F,EAAA5a,QAMAyF,WAAA,WAEA,GAAAuT,GAAAvY,KAAAuY,aAAAvY,KAAAJ,QAAAC,KAAAR,EAAAU,6BACAwa,EAAAva,KAAAua,aAAAva,KAAAJ,QAAAC,KAAAR,EAAA2a,6BACAQ,EAAAxa,KAAAwa,oBAAAxa,KAAAJ,QAAAC,KAAAR,EAAA4a,sBAGAja;KAAAqU,gBAAAoG,gBACAjS,KAAA+P,EACAvV,KAAAuX,EACA7X,MAAA1C,KAAAJ,QAAAkZ,OAAA,OAIA0B,GACAxa,KAAAqU,gBAAAqG,cAAAF,GAIAxa,KAAA2a,cAAA3a,KAAAJ,QAAAkZ,OAAA,KAEA9Y,KAAA4a,cAAA5a,KAAA2a,cAGA3a,KAAAuY,aAAAA,GAQAa,WAAA,WAEA,GAAAyB,GAAA7a,KAAAJ,QAAA,GAAAib,aAEA,IAAA7a,KAAAwa,oBAAA,CACA,GAAAM,GAAA9a,KAAAqU,gBAAA0G,cAAA/a,KAAAwa,oBACA,IAAAM,EAEA,GAAAA,YAAAnO,OACA,IAAA,GAAA/N,GAAA,EAAAA,EAAAkc,EAAA/b,OAAAH,IAAA,CACA,GAAAka,GAAAgC,EAAAlc,EACAoB,MAAAJ,QAAAqZ,KAAA,gBAAAH,EAAA,MAAA/Z,QACAiB,KAAAJ,QAAAuV,OAAA/V,EAAA,YACAsD,MAAAoW,EACArR,KAAAqR,SAMA,KAAA,GAAAhL,KAAAgN,GACA9a,KAAAJ,QAAAqZ,KAAA,iBAAAnL,EAAA,MAAA/O,QACAiB,KAAAJ,QAAAuV,OAAA/V,EAAA,YACAsD,MAAAoL,EACArG,KAAAqT,EAAAhN,MASA9N,KAAAJ,QAAA,GAAAib,cAAAA,EAGA7a,KAAA4a,cAAA5a,KAAAJ,QAAAkZ,OAAA,EACA,IAAAiC,GAAA/a,KAAAqU,gBAAA0G,cAAA/a,KAAAuY,aAOA,OANAwC,KAAA/a,KAAA4a,gBAEA5a,KAAAJ,QAAAkZ,IAAAiC,GACA/a,KAAAJ,QAAAmG,QAAA,yBAAAgV,IAGA/a,MAQAqZ,SAAA,WAEA,GAAA3W,GACAsY,EAAAhb,KAAAJ,QAAAqb,KAAA,WAeA,OAbAD,IACAtY,KACA1C,KAAAJ,QAAAqZ,KAAA,mBAAAzY,KAAA,WACAkC,EAAAoB,KAAA1E,EAAAY,MAAA8Y,UAIApW,EAAA1C,KAAAJ,QAAAqZ,KAAA,mBAAApZ,KAAA,SAIAG,KAAAqU,gBAAA0G,cAAA/a,KAAAuY,aAAA7V,GAEAA,KAMApC,SAAA,UAAAjB,EAAAU,4BAAA,KAIAnC,GAAAD,QAAA6W,IAGA0G,iBAAA,GAAAb,eAAA,GAAAc,wBAAA,KAAAC,IAAA,SAAAnc,EAAArB,GACA,YAEA,IAAAyB,GAAAJ,EAAA,kBACAkb,EAAAlb,EAAA,yBAGAoc,GAFApc,EAAA,gBAEA,SAAAW,GACA,MAAA,aAAAA,EAAAC,KAAA,SAAA,YAAAD,EAAAC,KAAAR,EAAA2a,+BASAzF,EAAA4F,EAAA5a,QAMAyF,WAAA,WAEA,GAAAuT,GAAAvY,KAAAJ,QAAAC,KAAAR,EAAAU,6BACAwa,EAAAva,KAAAJ,QAAAC,KAAAR,EAAA2a,4BAGAha,MAAAqU,gBAAAoG,gBACAjS,KAAA+P,EACAvV,KAAAuX,IAIAva,KAAA2a,cAAA3a,KAAAJ,QAAAkZ,MAEA9Y,KAAA4a,cAAA5a,KAAA2a,cAGA3a,KAAAuY,aAAAA,EAEAvY,KAAAqZ,YAQAD,WAAA,WACApZ,KAAA4a,cAAA5a,KAAAsb,2BAAA,EACA,IAAAP,GAAA/a,KAAAqU,gBAAA0G,cAAA/a,KAAAuY,aAOA,OANAwC,KAAA/a,KAAA4a,gBAEA5a,KAAAub,wBAAAR,GACA/a,KAAAJ,QAAAmG,QAAA,yBAAAgV,IAGA/a,MASAqZ,SAAA,WACA,GAAA3W,GAAA1C,KAAAsb,yBAKA,OAFAtb,MAAAqU,gBAAA0G,cAAA/a,KAAAuY,aAAA7V,GAEAA,GAGA4Y,wBAAA,WACA,MAAAD,GAAArb,KAAAJ,SACAI,KAAAJ,QAAAqb,KAAA,WAEAjb,KAAAJ,QAAAkZ,OAIAyC,wBAAA,SAAAR,GACAM,EAAArb,KAAAJ,SACAI,KAAAJ,QAAAqb,KAAA,UAAAF,GACA,SAAA/a,KAAAJ,QAAA,GAAAoD,MACAhD,KAAAJ,QAAAkZ,IAAAiC,MASAza,SAAA,SAAAjB,EAAAU,4BAAA,cACAV,EAAAU,4BAAA,KAIAnC,GAAAD,QAAA4W,IAGA2G,iBAAA,GAAAb,eAAA,GAAAc,wBAAA,KAAAK,IAAA,SAAAvc,EAAArB,IACA,SAAAK,GACA,cAEA,SAAAwd,GAEAA,EAAA,mBAAAzd,QAAAA,OAAAC,IACA,SAAAyd,GACAA,EAAAA,MACA9d,EAAAD,QAAA+d,EAAAC,SACAD,EAAAvc,QAAAuc,EAAAvc,QAAAS,SAAA,IACA8b,EAAAE,UAGA9c,KAAAkB,KAAA,mBAAA9B,MAAAA,KAAA,mBAAAF,QAAAA,gBACA6d,IAAA,SAAA5c,EAAArB,GACA,YAEA,IAAAke,GAAA,YAEAC,EAAA,+DAEAC,EAAA,iBAEAC,EAAA,+JAEAha,EAAA,SAAAS,EAAAM,GACA,OAAAA,GACA,IAAA,UACA,IAAA,OACA,IAAA,QACA,MAAA8Y,GAAAI,KAAAxZ,EACA,KAAA,QACA,IAAA,SACA,MAAAqZ,GAAAG,KAAAxZ,EACA,KAAA,UACA,MAAAsZ,GAAAE,KAAAxZ,EACA,KAAA,OACA,MAAAuZ,GAAAC,KAAAxZ,KAIAyZ,EAAA,SAAAzZ,EAAAM,GAMA,GAJA,gBAAAN,KACAA,EAAAA,EAAA0Z,QAGA,WAAApZ,GAAA,UAAAA,EACA,MAAAN,EACA,KAAAT,EAAAS,EAAAM,GAeA,KAAA,IAAAnE,OAAA,UAAA6D,EAAA,oBAAAM,EAdA,QAAAA,GACA,IAAA,UACA,IAAA,OACA,IAAA,QACA,MAAAkD,UAAAxD,EAAA,GACA,KAAA,QACA,IAAA,SACA,MAAA2Z,YAAA3Z,EACA,KAAA,UACA,MAAA,SAAAA,CACA,KAAA,OACA,MAAAA,IAOA9E,GAAAD,SACAwe,cAAAA,EACAla,OAAAA,QAGAqa,IAAA,SAAArd,EAAArB,GACA,YAkBA,SAAA0W,KAGAtU,KAAAuP,aAGAvP,KAAAmZ,oBAAA,EAtBA,GAAAgD,GAAAld,EAAA,eAAAkd,aA0BA7H,GAAArU,UAAAya,cAAA,SAAA6B,GACA,GAAAvc,KAAAmZ,mBACA,KAAA,IAAAta,OAAA,yEAEAmB,MAAAya,gBAAAjS,KAAA+T,KAGAjI,EAAArU,UAAAwa,eAAA,SAAA8B,GACA,GAAAvc,KAAAuP,UAAAgN,EAAA/T,MAGA,KAAA,IAAA3J,OAAA,iCAAA0d,EAAA/T,KAAA,oBAFAxI,MAAAuP,UAAAgN,EAAA/T,MAAA+T,GAMAjI,EAAArU,UAAAuc,gBAAA,SAAAjE,GACA,IAAAvY,KAAAuP,UAAAgJ,GAGA,KAAA,IAAA1Z,OAAA,oCAAA0Z,EAAA,oCAFAvY,MAAAuP,UAAAgJ,IAMAjE,EAAArU,UAAAiZ,iBAAA,SAAAX,EAAA7V,GACA,IAAA1C,KAAAuP,UAAAgJ,GAGA,KAAA,IAAA1Z,OAAA,mDAAA0Z,EAAA,6BAFAvY,MAAAuP,UAAAgJ,GAAAoC,cAAAjY,GAOA4R,EAAArU,UAAAsc,SAAA,SAAAhE,GACA,MAAAvY,MAAAuP,UAAAgJ,IAGAjE,EAAArU,UAAA8a,cAAA,SAAAxC,EAAA7V,GAEA,GAAA6Z,GAAAvc,KAAAuc,SAAAhE,EAmBA,OAjBA,mBAAA7V,IAAA,OAAAA,EACAA,EAAA,KAEA,KAAAA,GAAA,WAAA6Z,EAAAvZ,KAEAN,EAAA,KAEA,gBAAAA,IAAA,WAAA6Z,EAAAvZ,OAEAN,EAAAyZ,EAAAzZ,EAAA6Z,EAAAvZ,OAIA,IAAA7C,UAAApB,SACAwd,EAAA7Z,MAAAA,GAGA6Z,EAAA7Z,OAGA4R,EAAArU,UAAA4Y,QAAA,SAAArQ,GACA,GAAA+T,GAAAvc,KAAAuc,SAAA/T,EACA,OAAAxI,MAAA+Y,eAAAvQ,GACA+T,EAAA5B,gBAAApT,KAAAgP,UAAAgG,EAAA7Z,OAEA6Z,EAAA5B,gBAAA4B,EAAA7Z,OAAA,WAAA6Z,EAAAvZ,MAIAsR,EAAArU,UAAA8Y,eAAA,SAAAvQ,GACA,GAAA+T,GAAAvc,KAAAuc,SAAA/T,GACAxF,EAAAuZ,EAAAvZ,KAEAyZ,GAAA,SAAA,OAAA,QACAC,EAAAD,EAAAlZ,QAAAP,EAEA,OAAA,KAAA0Z,EACA,KAAAH,EAAAvD,UAAA2D,wBAAApZ,QAAA,oBAGA,KAAAmZ,GAGApI,EAAArU,UAAAkP,cAAA,WAEA,MAAA9H,QAAAC,KAAAtH,KAAAuP,YAGA3R,EAAAD,QAAA2W,IAGAsI,cAAA,KAAAC,IAAA,SAAA5d,EAAArB,GACA,YA4DA,SAAAkf,GAAA5J,EAAA6J,EAAApJ,GAEA,GADAA,EAAAA,GAAA,cACAT,EAAAnU,OACA,MAAA4U,IAEA,IAAAqJ,GAAA,EACAC,EAAA,WACAF,EAAA7J,EAAA8J,GAAA,SAAAnX,GACAA,GACA8N,EAAA9N,GACA8N,EAAA,eAGAqJ,GAAA,EACAA,GAAA9J,EAAAnU,OACA4U,IAGAsJ,OAKAA,KA7EA,GAAA1Y,GAAA3G,EAAAD,SAAAuf,UAAAje,EAAA,qBAEAsF,GAAAmD,iBAAA,SAAAlC,GAEA,QAAA2X,GAAAC,GACA,GAAA,OAAAA,EAAA5T,MAAA,IAAA,OAAA,CAEA,IAAAyR,GAAAmC,EAAA5T,MAAA,EAAA,IACA6T,EAAA7X,EAAA6K,SACA,UAAAgN,EAAApC,KAAAoC,EAAApC,GAAAlc,QAGA,QAAAuI,GAAA2L,GACA,GAAAC,GAAA7L,OAAAC,KAAA2L,EAEA,KAAA,GAAAvU,KAAAwU,GACA,MAAAA,EAAAxU,GAAA,IAAAye,EAAAjK,EAAAxU,KACAwU,EAAAoK,OAAA5e,EAAA,EAIA,OAAAwU,GAGA,GAAAqK,GAAAlW,OAAAC,KAAA9B,EAAA6K,cACA,KAAA,GAAA/R,KAAAif,GAAA,CACA,GAAA/U,GAAA+U,EAAAjf,EAEA,KAAA,GAAAM,KAAA4G,GAAA6K,UAAA7H,GAAA,CACAhD,EAAA6K,UAAA7H,GAAA5J,GAAAyR,UAAA7K,EAAA6K,UAAA7H,GAAA5J,GAAAyR,aAEA,IAAAmN,GAAAlW,EAAA9B,EAAA6K,UAAA7H,GAAA5J,GAEA,KAAA,GAAAkP,KAAA0P,GAAA,CACA,GAAAvC,GAAAuC,EAAA1P,EACA,IAAAtI,EAAA6K,UAAA7H,GAAA5J,GAAAqc,GAAA,CACA,GAAAoC,GAAA7X,EAAA6K,UAAA4K,EAAAzR,MAAA,EAAA,IACA,KAAA,GAAA9L,KAAA2f,GACAA,EAAA3f,GAAA4N,KAAA9F,EAAA6K,UAAA7H,GAAA5J,GAAAqc,KACAzV,EAAA6K,UAAA7H,GAAA5J,GAAAyR,UAAA4K,EAAAzR,MAAA,EAAA,MAAA6T,EAAA3f,QAQA,MAAA8H,IAqDAjB,EAAAkZ,OAAA,SAAArN,EAAAuD,GACAA,EAAAA,GAAA,YAEA,IAAAnO,KACAsX,GAAAzV,OAAAC,KAAA8I,GAAA,SAAAgH,EAAAzD,GACAvD,EAAAgH,GAAA,SAAAvR,GACA,GAAArE,GAAAmL,MAAA1M,UAAAuJ,MAAA1K,KAAAqB,UAAA,EACAqB,GAAAzC,QAAA,IACAyC,EAAAA,EAAA,IAEAgE,EAAA4R,GAAA5V,EACAmS,EAAA9N,MAEA,SAAAA,GACA8N,EAAA9N,EAAAL,QAIAkY,oBAAA,KAAAC,IAAA,SAAA1e,EAAArB,EAAAD,GAkEA,QAAA+I,GAAAkX,EAAAC,EAAAC,GACA,KAAA9d,eAAA0G,IACA,MAAA,IAAAA,GAAAkX,EAAAC,EAAAC,EAEA,IAGA/e,GAHAiE,QAAA4a,EAIA,IAAA,WAAA5a,EACAjE,EAAA6e,EAAA,EAAAA,IAAA,EAAA,MACA,IAAA,WAAA5a,EACA,WAAA6a,IACAD,EAAAG,EAAAH,IACA7e,EAAA2H,EAAAyR,WAAAyF,EAAAC,OACA,CAAA,GAAA,WAAA7a,GAAA,OAAA4a,EAKA,KAAA,IAAAI,WAAA,kDAJA,YAAAJ,EAAA5a,MAAA5B,EAAAwc,EAAAhY,QACAgY,EAAAA,EAAAhY,MACA7G,GAAA6e,EAAA7e,OAAA,EAAAuY,KAAAC,OAAAqG,EAAA7e,QAAA,EAIA,GAAAiB,KAAAjB,OAAAkf,EACA,KAAA,IAAAC,YAAA,0DACAD,EAAAE,SAAA,IAAA,SAEA,IAAAC,EACA1X,GAAA2X,oBAEAD,EAAA1X,EAAA4X,SAAA,GAAAtG,YAAAjZ,KAGAqf,EAAApe,KACAoe,EAAArf,OAAAA,EACAqf,EAAAG,WAAA,EAGA,IAAA3f,EACA,IAAA8H,EAAA2X,qBAAA,gBAAAT,GAAAzF,WAEAiG,EAAAI,KAAAZ,OACA,IAAAa,EAAAb,GAEA,GAAAlX,EAAAgY,SAAAd,GACA,IAAAhf,EAAA,EAAAG,EAAAH,EAAAA,IACAwf,EAAAxf,GAAAgf,EAAAe,UAAA/f,OAEA,KAAAA,EAAA,EAAAG,EAAAH,EAAAA,IACAwf,EAAAxf,IAAAgf,EAAAhf,GAAA,IAAA,KAAA,QAEA,IAAA,WAAAoE,EACAob,EAAAQ,MAAAhB,EAAA,EAAAC,OACA,IAAA,WAAA7a,IAAA0D,EAAA2X,sBAAAP,EACA,IAAAlf,EAAA,EAAAG,EAAAH,EAAAA,IACAwf,EAAAxf,GAAA,CAIA,OAAAwf,GAsLA,QAAAS,GAAAT,EAAAU,EAAAC,EAAAhgB,GACAggB,EAAAC,OAAAD,IAAA,CACA,IAAAE,GAAAb,EAAArf,OAAAggB,CACAhgB,IAGAA,EAAAigB,OAAAjgB,GACAA,EAAAkgB,IACAlgB,EAAAkgB,IAJAlgB,EAAAkgB,CASA,IAAAC,GAAAJ,EAAA/f,MACA,IAAAmgB,EAAA,IAAA,EAAA,KAAA,IAAArgB,OAAA,qBAEAE,GAAAmgB,EAAA,IACAngB,EAAAmgB,EAAA,EAEA,KAAA,GAAAtgB,GAAA,EAAAG,EAAAH,EAAAA,IAAA,CACA,GAAAugB,GAAAjZ,SAAA4Y,EAAAM,OAAA,EAAAxgB,EAAA,GAAA,GACA,IAAAygB,MAAAF,GAAA,KAAA,IAAAtgB,OAAA,qBACAuf,GAAAW,EAAAngB,GAAAugB,EAEA,MAAAvgB,GAGA,QAAA0gB,GAAAlB,EAAAU,EAAAC,EAAAhgB,GACA,GAAAwgB,GAAAC,EAAAC,EAAAX,GAAAV,EAAAW,EAAAhgB,EACA,OAAAwgB,GAGA,QAAAG,GAAAtB,EAAAU,EAAAC,EAAAhgB,GACA,GAAAwgB,GAAAC,EAAAG,EAAAb,GAAAV,EAAAW,EAAAhgB,EACA,OAAAwgB,GAGA,QAAAK,GAAAxB,EAAAU,EAAAC,EAAAhgB,GACA,MAAA2gB,GAAAtB,EAAAU,EAAAC,EAAAhgB,GAGA,QAAA8gB,GAAAzB,EAAAU,EAAAC,EAAAhgB,GACA,GAAAwgB,GAAAC,EAAAM,EAAAhB,GAAAV,EAAAW,EAAAhgB,EACA,OAAAwgB,GAGA,QAAAQ,GAAA3B,EAAAU,EAAAC,EAAAhgB,GACA,GAAAwgB,GAAAC,EAAAQ,EAAAlB,GAAAV,EAAAW,EAAAhgB,EAAA,EACA,OAAAwgB,GAmEA,QAAAU,GAAA7B,EAAAxP,EAAAjI,GACA,MACAuZ,GAAAC,cADA,IAAAvR,GAAAjI,IAAAyX,EAAArf,OACAqf,EAEAA,EAAA5U,MAAAoF,EAAAjI,IAIA,QAAAyZ,GAAAhC,EAAAxP,EAAAjI,GACA,GAAA0Z,GAAA,GACAC,EAAA,EACA3Z,GAAA2Q,KAAAiJ,IAAAnC,EAAArf,OAAA4H,EAEA,KAAA,GAAA/H,GAAAgQ,EAAAjI,EAAA/H,EAAAA,IACAwf,EAAAxf,IAAA,KACAyhB,GAAAG,EAAAF,GAAAjI,OAAAC,aAAA8F,EAAAxf,IACA0hB,EAAA,IAEAA,GAAA,IAAAlC,EAAAxf,GAAAuf,SAAA,GAIA,OAAAkC,GAAAG,EAAAF,GAGA,QAAAG,GAAArC,EAAAxP,EAAAjI,GACA,GAAA+Z,GAAA,EACA/Z,GAAA2Q,KAAAiJ,IAAAnC,EAAArf,OAAA4H,EAEA,KAAA,GAAA/H,GAAAgQ,EAAAjI,EAAA/H,EAAAA,IACA8hB,GAAArI,OAAAC,aAAA8F,EAAAxf,GAEA,OAAA8hB,GAGA,QAAAC,GAAAvC,EAAAxP,EAAAjI,GACA,MAAA8Z,GAAArC,EAAAxP,EAAAjI,GAGA,QAAAia,GAAAxC,EAAAxP,EAAAjI,GACA,GAAAuR,GAAAkG,EAAArf,SAEA6P,GAAA,EAAAA,KAAAA,EAAA,KACAjI,GAAA,EAAAA,GAAAA,EAAAuR,KAAAvR,EAAAuR,EAGA,KAAA,GADA2I,GAAA,GACAjiB,EAAAgQ,EAAAjI,EAAA/H,EAAAA,IACAiiB,GAAAC,EAAA1C,EAAAxf,GAEA,OAAAiiB,GAGA,QAAAE,GAAA3C,EAAAxP,EAAAjI,GAGA,IAAA,GAFAwQ,GAAAiH,EAAA5U,MAAAoF,EAAAjI,GACA0Z,EAAA,GACAzhB,EAAA,EAAAA,EAAAuY,EAAApY,OAAAH,GAAA,EACAyhB,GAAAhI,OAAAC,aAAAnB,EAAAvY,GAAA,IAAAuY,EAAAvY,EAAA,GAEA,OAAAyhB,GA0CA,QAAAW,GAAAjC,EAAAkC,EAAAliB,GACA,GAAAggB,EAAA,IAAA,GAAA,EAAAA,EACA,KAAA,IAAAb,YAAA,qBACA,IAAAa,EAAAkC,EAAAliB,EACA,KAAA,IAAAmf,YAAA,yCA2GA,QAAAgD,GAAA9C,EAAA1b,EAAAqc,EAAAkC,EAAAE,EAAAZ,GACA,IAAA7Z,EAAAgY,SAAAN,GAAA,KAAA,IAAAJ,WAAA,mCACA,IAAAtb,EAAAye,GAAAZ,EAAA7d,EAAA,KAAA,IAAAsb,WAAA,yBACA,IAAAe,EAAAkC,EAAA7C,EAAArf,OAAA,KAAA,IAAAif,WAAA,sBAaA,QAAAoD,GAAAhD,EAAA1b,EAAAqc,EAAAsC,GACA,EAAA3e,IAAAA,EAAA,MAAAA,EAAA,EACA,KAAA,GAAA9D,GAAA,EAAAwZ,EAAAd,KAAAiJ,IAAAnC,EAAArf,OAAAggB,EAAA,GAAA3G,EAAAxZ,EAAAA,IACAwf,EAAAW,EAAAngB,IAAA8D,EAAA,KAAA,GAAA2e,EAAAziB,EAAA,EAAAA,MACA,GAAAyiB,EAAAziB,EAAA,EAAAA,GA4BA,QAAA0iB,GAAAlD,EAAA1b,EAAAqc,EAAAsC,GACA,EAAA3e,IAAAA,EAAA,WAAAA,EAAA,EACA,KAAA,GAAA9D,GAAA,EAAAwZ,EAAAd,KAAAiJ,IAAAnC,EAAArf,OAAAggB,EAAA,GAAA3G,EAAAxZ,EAAAA,IACAwf,EAAAW,EAAAngB,GAAA8D,IAAA,GAAA2e,EAAAziB,EAAA,EAAAA,GAAA,IAgGA,QAAA2iB,GAAAnD,EAAA1b,EAAAqc,EAAAkC,EAAAE,EAAAZ,GACA,GAAA7d,EAAAye,GAAAZ,EAAA7d,EAAA,KAAA,IAAAsb,WAAA,yBACA,IAAAe,EAAAkC,EAAA7C,EAAArf,OAAA,KAAA,IAAAif,WAAA,sBAGA,QAAAwD,GAAApD,EAAA1b,EAAAqc,EAAAsC,EAAAI,GAIA,MAHAA,IACAF,EAAAnD,EAAA1b,EAAAqc,EAAA,EAAA,sBAAA,wBACA2C,EAAA9C,MAAAR,EAAA1b,EAAAqc,EAAAsC,EAAA,GAAA,GACAtC,EAAA,EAWA,QAAA4C,GAAAvD,EAAA1b,EAAAqc,EAAAsC,EAAAI,GAIA,MAHAA,IACAF,EAAAnD,EAAA1b,EAAAqc,EAAA,EAAA,uBAAA,yBACA2C,EAAA9C,MAAAR,EAAA1b,EAAAqc,EAAAsC,EAAA,GAAA,GACAtC,EAAA,EAmKA,QAAAhB,GAAAX,GAIA,IAFAA,EAAAwE,EAAAxE,GAAAyE,QAAAC,EAAA,IAEA1E,EAAAre,OAAA,IAAA,GACAqe,GAAA,GAEA,OAAAA,GAGA,QAAAwE,GAAAxE,GACA,MAAAA,GAAAhB,KAAAgB,EAAAhB,OACAgB,EAAAyE,QAAA,aAAA,IAGA,QAAApD,GAAAb,GACA,MAAAxc,GAAAwc,IAAAlX,EAAAgY,SAAAd,IACAA,GAAA,gBAAAA,IACA,gBAAAA,GAAA7e,OAGA,QAAA+hB,GAAAziB,GACA,MAAA,IAAAA,EAAA,IAAAA,EAAA8f,SAAA,IACA9f,EAAA8f,SAAA,IAGA,QAAAsB,GAAArC,GAEA,IAAA,GADA2E,MACAnjB,EAAA,EAAAA,EAAAwe,EAAAre,OAAAH,IAAA,CACA,GAAAojB,GAAA5E,EAAA6E,WAAArjB,EACA,IAAA,KAAAojB,EACAD,EAAAje,KAAAke,OACA,CACA,GAAApT,GAAAhQ,CACAojB,IAAA,OAAA,OAAAA,GAAApjB,GAEA,KAAA,GADAsjB,GAAAC,mBAAA/E,EAAA5T,MAAAoF,EAAAhQ,EAAA,IAAAwgB,OAAA,GAAAgD,MAAA,KACAhK,EAAA,EAAAA,EAAA8J,EAAAnjB,OAAAqZ,IACA2J,EAAAje,KAAAoC,SAAAgc,EAAA9J,GAAA,MAIA,MAAA2J,GAGA,QAAApC,GAAAvC,GAEA,IAAA,GADA2E,MACAnjB,EAAA,EAAAA,EAAAwe,EAAAre,OAAAH,IAEAmjB,EAAAje,KAAA,IAAAsZ,EAAA6E,WAAArjB,GAEA,OAAAmjB,GAGA,QAAA/B,GAAA5C,GAGA,IAAA,GAFAtT,GAAAuY,EAAAC,EACAP,KACAnjB,EAAA,EAAAA,EAAAwe,EAAAre,OAAAH,IACAkL,EAAAsT,EAAA6E,WAAArjB,GACAyjB,EAAAvY,GAAA,EACAwY,EAAAxY,EAAA,IACAiY,EAAAje,KAAAwe,GACAP,EAAAje,KAAAue,EAGA,OAAAN,GAGA,QAAAjC,GAAA1C,GACA,MAAA8C,GAAAqC,YAAAnF,GAGA,QAAAoC,GAAAgD,EAAAC,EAAA1D,EAAAhgB,EAAA2jB,GACAA,IAAA3jB,GAAAA,EAAA2jB,EACA,KAAA,GAAA9jB,GAAA,EAAAG,EAAAH,KACAA,EAAAmgB,GAAA0D,EAAA1jB,QAAAH,GAAA4jB,EAAAzjB,QADAH,IAGA6jB,EAAA7jB,EAAAmgB,GAAAyD,EAAA5jB,EAEA,OAAAA,GAGA,QAAA4hB,GAAApD,GACA,IACA,MAAAuF,oBAAAvF,GACA,MAAAvX,GACA,MAAAwS,QAAAC,aAAA,QAlhCA,GAAA4H,GAAAjhB,EAAA,aACAyiB,EAAAziB,EAAA,WACAmC,EAAAnC,EAAA,WAEAtB,GAAA+I,OAAAA,EACA/I,EAAAilB,WAAAlc,EACA/I,EAAAklB,kBAAA,GACAnc,EAAAoc,SAAA,IAEA,IAAA7E,GAAA,UAwBAvX,GAAA2X,oBAAA,WACA,IACA,GAAAD,GAAA,GAAA2E,aAAA,GACA7P,EAAA,GAAA8E,YAAAoG,EAEA,OADAlL,GAAA8P,IAAA,WAAA,MAAA,KACA,KAAA9P,EAAA8P,OACA,kBAAA9P,GAAA+P,UACA,IAAA,GAAAjL,YAAA,GAAAiL,SAAA,EAAA,GAAA9K,WACA,MAAAza,GACA,OAAA,MA4EAgJ,EAAAgY,SAAA,SAAAsD,GACA,QAAA,MAAAA,IAAAA,EAAAzD,YAGA7X,EAAAwc,QAAA,SAAAxkB,EAAAsjB,GACA,IAAAtb,EAAAgY,SAAAhgB,KAAAgI,EAAAgY,SAAAsD,GACA,KAAA,IAAAhE,WAAA,4BAIA,KAAA,GAFAmF,GAAAzkB,EAAAK,OACAqkB,EAAApB,EAAAjjB,OACAH,EAAA,EAAAsZ,EAAAZ,KAAAiJ,IAAA4C,EAAAC,GAAAlL,EAAAtZ,GAAAF,EAAAE,KAAAojB,EAAApjB,GAAAA,KAKA,MAJAA,KAAAsZ,IACAiL,EAAAzkB,EAAAE,GACAwkB,EAAApB,EAAApjB,IAEAwkB,EAAAD,EAAA,GACAA,EAAAC,EAAA,EACA,GAGA1c,EAAA2c,WAAA,SAAAxF,GACA,OAAAxF,OAAAwF,GAAAyF,eACA,IAAA,MACA,IAAA,OACA,IAAA,QACA,IAAA,QACA,IAAA,SACA,IAAA,SACA,IAAA,MACA,IAAA,OACA,IAAA,QACA,IAAA,UACA,IAAA,WACA,OAAA,CACA,SACA,OAAA,IAIA5c,EAAA6c,OAAA,SAAAle,EAAAme,GACA,IAAApiB,EAAAiE,GAAA,KAAA,IAAA2Y,WAAA,uCAEA,IAAA,IAAA3Y,EAAAtG,OACA,MAAA,IAAA2H,GAAA,EACA,IAAA,IAAArB,EAAAtG,OACA,MAAAsG,GAAA,EAGA,IAAAzG,EACA,IAAA6kB,SAAAD,EAEA,IADAA,EAAA,EACA5kB,EAAA,EAAAA,EAAAyG,EAAAtG,OAAAH,IACA4kB,GAAAne,EAAAzG,GAAAG,MAIA,IAAAqf,GAAA,GAAA1X,GAAA8c,GACAE,EAAA,CACA,KAAA9kB,EAAA,EAAAA,EAAAyG,EAAAtG,OAAAH,IAAA,CACA,GAAA4a,GAAAnU,EAAAzG,EACA4a,GAAAmK,KAAAvF,EAAAsF,GACAA,GAAAlK,EAAAza,OAEA,MAAAqf,IAGA1X,EAAAyR,WAAA,SAAAiF,EAAAS,GACA,GAAA6C,EAEA,QADAtD,GAAA,GACAS,GAAA,QACA,IAAA,QACA,IAAA,SACA,IAAA,MACA6C,EAAAtD,EAAAre,MACA,MACA,KAAA,OACA,IAAA,QACA,IAAA,UACA,IAAA,WACA2hB,EAAA,EAAAtD,EAAAre,MACA,MACA,KAAA,MACA2hB,EAAAtD,EAAAre,SAAA,CACA,MACA,KAAA,OACA,IAAA,QACA2hB,EAAAjB,EAAArC,GAAAre,MACA,MACA,KAAA,SACA2hB,EAAAZ,EAAA1C,GAAAre,MACA,MACA,SACA2hB,EAAAtD,EAAAre,OAEA,MAAA2hB,IAIAha,EAAAzG,UAAAlB,OAAA0kB,OACA/c,EAAAzG,UAAA2S,OAAA6Q,OAGA/c,EAAAzG,UAAAke,SAAA,SAAAN,EAAAjP,EAAAjI,GACA,GAAAid,IAAA,CAQA,IANAhV,KAAA,EACAjI,EAAA8c,SAAA9c,GAAAkd,MAAAld,EAAA3G,KAAAjB,OAAA4H,IAAA,EAEAkX,IAAAA,EAAA,QACA,EAAAjP,IAAAA,EAAA,GACAjI,EAAA3G,KAAAjB,SAAA4H,EAAA3G,KAAAjB,QACA6P,GAAAjI,EAAA,MAAA,EAEA,QACA,OAAAkX,GACA,IAAA,MACA,MAAA+C,GAAA5gB,KAAA4O,EAAAjI,EAEA,KAAA,OACA,IAAA,QACA,MAAAyZ,GAAApgB,KAAA4O,EAAAjI,EAEA,KAAA,QACA,MAAA8Z,GAAAzgB,KAAA4O,EAAAjI,EAEA,KAAA,SACA,MAAAga,GAAA3gB,KAAA4O,EAAAjI,EAEA,KAAA,SACA,MAAAsZ,GAAAjgB,KAAA4O,EAAAjI,EAEA,KAAA,OACA,IAAA,QACA,IAAA,UACA,IAAA,WACA,MAAAoa,GAAA/gB,KAAA4O,EAAAjI,EAEA,SACA,GAAAid,EACA,KAAA,IAAA5F,WAAA,qBAAAH,EACAA,IAAAA,EAAA,IAAAyF,cACAM,GAAA,IAKAld,EAAAzG,UAAA6jB,OAAA,SAAA9B,GACA,IAAAtb,EAAAgY,SAAAsD,GAAA,KAAA,IAAAhE,WAAA,4BACA,OAAA,KAAAtX,EAAAwc,QAAAljB,KAAAgiB,IAGAtb,EAAAzG,UAAA8jB,QAAA,WACA,GAAA3G,GAAA,GACA+D,EAAAxjB,EAAAklB,iBAMA,OALA7iB,MAAAjB,OAAA,IACAqe,EAAApd,KAAAme,SAAA,MAAA,EAAAgD,GAAA6C,MAAA,SAAA5U,KAAA,KACApP,KAAAjB,OAAAoiB,IACA/D,GAAA,UAEA,WAAAA,EAAA,KAGA1W,EAAAzG,UAAAijB,QAAA,SAAAlB,GACA,IAAAtb,EAAAgY,SAAAsD,GAAA,KAAA,IAAAhE,WAAA,4BACA,OAAAtX,GAAAwc,QAAAljB,KAAAgiB,IAIAtb,EAAAzG,UAAA0F,IAAA,SAAAoZ,GAEA,MADAkF,SAAAzM,IAAA,6DACAxX,KAAA2e,UAAAI,IAIArY,EAAAzG,UAAAwI,IAAA,SAAAmQ,EAAAmG,GAEA,MADAkF,SAAAzM,IAAA,6DACAxX,KAAAkkB,WAAAtL,EAAAmG,IAsDArY,EAAAzG,UAAA2e,MAAA,SAAAE,EAAAC,EAAAhgB,EAAA8e,GAGA,GAAAsG,SAAApF,GACAoF,SAAAplB,KACA8e,EAAA9e,EACAA,EAAA0kB,YAEA,CACA,GAAAW,GAAAvG,CACAA,GAAAkB,EACAA,EAAAhgB,EACAA,EAAAqlB,EAGArF,EAAAC,OAAAD,IAAA,CACA,IAAAE,GAAAjf,KAAAjB,OAAAggB,CACAhgB,IAGAA,EAAAigB,OAAAjgB,GACAA,EAAAkgB,IACAlgB,EAAAkgB,IAJAlgB,EAAAkgB,EAOApB,EAAAxF,OAAAwF,GAAA,QAAAyF,aAEA,IAAA5C,EACA,QAAA7C,GACA,IAAA,MACA6C,EAAA7B,EAAA7e,KAAA8e,EAAAC,EAAAhgB,EACA,MACA,KAAA,OACA,IAAA,QACA2hB,EAAApB,EAAAtf,KAAA8e,EAAAC,EAAAhgB,EACA,MACA,KAAA,QACA2hB,EAAAhB,EAAA1f,KAAA8e,EAAAC,EAAAhgB,EACA,MACA,KAAA,SACA2hB,EAAAd,EAAA5f,KAAA8e,EAAAC,EAAAhgB,EACA,MACA,KAAA,SACA2hB,EAAAb,EAAA7f,KAAA8e,EAAAC,EAAAhgB,EACA,MACA,KAAA,OACA,IAAA,QACA,IAAA,UACA,IAAA,WACA2hB,EAAAX,EAAA/f,KAAA8e,EAAAC,EAAAhgB,EACA,MACA,SACA,KAAA,IAAAif,WAAA,qBAAAH,GAEA,MAAA6C,IAGAha,EAAAzG,UAAAokB,OAAA,WACA,OACArhB,KAAA,SACA4C,KAAA+G,MAAA1M,UAAAuJ,MAAA1K,KAAAkB,KAAAskB,MAAAtkB,KAAA,KAiEA0G,EAAAzG,UAAAuJ,MAAA,SAAAoF,EAAAjI,GACA,GAAAuR,GAAAlY,KAAAjB,MAuBA,IAtBA6P,IAAAA,EACAjI,EAAA8c,SAAA9c,EAAAuR,IAAAvR,EAEA,EAAAiI,GACAA,GAAAsJ,EACA,EAAAtJ,IACAA,EAAA,IACAA,EAAAsJ,IACAtJ,EAAAsJ,GAGA,EAAAvR,GACAA,GAAAuR,EACA,EAAAvR,IACAA,EAAA,IACAA,EAAAuR,IACAvR,EAAAuR,GAGAtJ,EAAAjI,IACAA,EAAAiI,GAEAlI,EAAA2X,oBACA,MAAA3X,GAAA4X,SAAAte,KAAAijB,SAAArU,EAAAjI,GAIA,KAAA,GAFA4d,GAAA5d,EAAAiI,EACA4V,EAAA,GAAA9d,GAAA6d,EAAAd,QAAA,GACA7kB,EAAA,EAAA2lB,EAAA3lB,EAAAA,IACA4lB,EAAA5lB,GAAAoB,KAAApB,EAAAgQ,EAEA,OAAA4V,IAcA9d,EAAAzG,UAAA0e,UAAA,SAAAI,EAAA0C,GAGA,MAFAA,IACAT,EAAAjC,EAAA,EAAA/e,KAAAjB,QACAiB,KAAA+e,IAGArY,EAAAzG,UAAAwkB,aAAA,SAAA1F,EAAA0C,GAGA,MAFAA,IACAT,EAAAjC,EAAA,EAAA/e,KAAAjB,QACAiB,KAAA+e,GAAA/e,KAAA+e,EAAA,IAAA,GAGArY,EAAAzG,UAAAykB,aAAA,SAAA3F,EAAA0C,GAGA,MAFAA,IACAT,EAAAjC,EAAA,EAAA/e,KAAAjB,QACAiB,KAAA+e,IAAA,EAAA/e,KAAA+e,EAAA,IAGArY,EAAAzG,UAAA0kB,aAAA,SAAA5F,EAAA0C,GAIA,MAHAA,IACAT,EAAAjC,EAAA,EAAA/e,KAAAjB,SAEAiB,KAAA+e,GACA/e,KAAA+e,EAAA,IAAA,EACA/e,KAAA+e,EAAA,IAAA,IACA,SAAA/e,KAAA+e,EAAA,IAGArY,EAAAzG,UAAA2kB,aAAA,SAAA7F,EAAA0C,GAIA,MAHAA,IACAT,EAAAjC,EAAA,EAAA/e,KAAAjB,QAEA,SAAAiB,KAAA+e,IACA/e,KAAA+e,EAAA,IAAA,GACA/e,KAAA+e,EAAA,IAAA,EACA/e,KAAA+e,EAAA,KAGArY,EAAAzG,UAAA4kB,SAAA,SAAA9F,EAAA0C,GAGA,MAFAA,IACAT,EAAAjC,EAAA,EAAA/e,KAAAjB,QACA,IAAAiB,KAAA+e,GAEA,IAAA,IAAA/e,KAAA+e,GAAA,GADA/e,KAAA+e,IAIArY,EAAAzG,UAAA6kB,YAAA,SAAA/F,EAAA0C,GACAA,GACAT,EAAAjC,EAAA,EAAA/e,KAAAjB,OACA,IAAA+Z,GAAA9Y,KAAA+e,GAAA/e,KAAA+e,EAAA,IAAA,CACA,OAAA,OAAAjG,EAAA,WAAAA,EAAAA,GAGApS,EAAAzG,UAAA8kB,YAAA,SAAAhG,EAAA0C,GACAA,GACAT,EAAAjC,EAAA,EAAA/e,KAAAjB,OACA,IAAA+Z,GAAA9Y,KAAA+e,EAAA,GAAA/e,KAAA+e,IAAA,CACA,OAAA,OAAAjG,EAAA,WAAAA,EAAAA,GAGApS,EAAAzG,UAAA+kB,YAAA,SAAAjG,EAAA0C,GAIA,MAHAA,IACAT,EAAAjC,EAAA,EAAA/e,KAAAjB,QAEAiB,KAAA+e,GACA/e,KAAA+e,EAAA,IAAA,EACA/e,KAAA+e,EAAA,IAAA,GACA/e,KAAA+e,EAAA,IAAA,IAGArY,EAAAzG,UAAAglB,YAAA,SAAAlG,EAAA0C,GAIA,MAHAA,IACAT,EAAAjC,EAAA,EAAA/e,KAAAjB,QAEAiB,KAAA+e,IAAA,GACA/e,KAAA+e,EAAA,IAAA,GACA/e,KAAA+e,EAAA,IAAA,EACA/e,KAAA+e,EAAA,IAGArY,EAAAzG,UAAAilB,YAAA,SAAAnG,EAAA0C,GAGA,MAFAA,IACAT,EAAAjC,EAAA,EAAA/e,KAAAjB,QACA2iB,EAAAyD,KAAAnlB,KAAA+e,GAAA,EAAA,GAAA,IAGArY,EAAAzG,UAAAmlB,YAAA,SAAArG,EAAA0C,GAGA,MAFAA,IACAT,EAAAjC,EAAA,EAAA/e,KAAAjB,QACA2iB,EAAAyD,KAAAnlB,KAAA+e,GAAA,EAAA,GAAA,IAGArY,EAAAzG,UAAAolB,aAAA,SAAAtG,EAAA0C,GAGA,MAFAA,IACAT,EAAAjC,EAAA,EAAA/e,KAAAjB,QACA2iB,EAAAyD,KAAAnlB,KAAA+e,GAAA,EAAA,GAAA,IAGArY,EAAAzG,UAAAqlB,aAAA,SAAAvG,EAAA0C,GAGA,MAFAA,IACAT,EAAAjC,EAAA,EAAA/e,KAAAjB,QACA2iB,EAAAyD,KAAAnlB,KAAA+e,GAAA,EAAA,GAAA,IASArY,EAAAzG,UAAAikB,WAAA,SAAAxhB,EAAAqc,EAAA0C,GAOA,MANA/e,IAAAA,EACAqc,KAAA,EACA0C,GACAP,EAAAlhB,KAAA0C,EAAAqc,EAAA,EAAA,IAAA,GACArY,EAAA2X,sBAAA3b,EAAA4U,KAAAC,MAAA7U,IACA1C,KAAA+e,GAAArc,EACAqc,EAAA,GAWArY,EAAAzG,UAAAslB,cAAA,SAAA7iB,EAAAqc,EAAA0C,GASA,MARA/e,IAAAA,EACAqc,KAAA,EACA0C,GACAP,EAAAlhB,KAAA0C,EAAAqc,EAAA,EAAA,MAAA,GACArY,EAAA2X,qBACAre,KAAA+e,GAAArc,EACA1C,KAAA+e,EAAA,GAAArc,IAAA,GACA0e,EAAAphB,KAAA0C,EAAAqc,GAAA,GACAA,EAAA,GAGArY,EAAAzG,UAAAulB,cAAA,SAAA9iB,EAAAqc,EAAA0C,GASA,MARA/e,IAAAA,EACAqc,KAAA,EACA0C,GACAP,EAAAlhB,KAAA0C,EAAAqc,EAAA,EAAA,MAAA,GACArY,EAAA2X,qBACAre,KAAA+e,GAAArc,IAAA,EACA1C,KAAA+e,EAAA,GAAArc,GACA0e,EAAAphB,KAAA0C,EAAAqc,GAAA,GACAA,EAAA,GAUArY,EAAAzG,UAAAwlB,cAAA,SAAA/iB,EAAAqc,EAAA0C,GAWA,MAVA/e,IAAAA,EACAqc,KAAA,EACA0C,GACAP,EAAAlhB,KAAA0C,EAAAqc,EAAA,EAAA,WAAA,GACArY,EAAA2X,qBACAre,KAAA+e,EAAA,GAAArc,IAAA,GACA1C,KAAA+e,EAAA,GAAArc,IAAA,GACA1C,KAAA+e,EAAA,GAAArc,IAAA,EACA1C,KAAA+e,GAAArc,GACA4e,EAAAthB,KAAA0C,EAAAqc,GAAA,GACAA,EAAA,GAGArY,EAAAzG,UAAAylB,cAAA,SAAAhjB,EAAAqc,EAAA0C,GAWA,MAVA/e,IAAAA,EACAqc,KAAA,EACA0C,GACAP,EAAAlhB,KAAA0C,EAAAqc,EAAA,EAAA,WAAA,GACArY,EAAA2X,qBACAre,KAAA+e,GAAArc,IAAA,GACA1C,KAAA+e,EAAA,GAAArc,IAAA,GACA1C,KAAA+e,EAAA,GAAArc,IAAA,EACA1C,KAAA+e,EAAA,GAAArc,GACA4e,EAAAthB,KAAA0C,EAAAqc,GAAA,GACAA,EAAA,GAGArY,EAAAzG,UAAA0lB,UAAA,SAAAjjB,EAAAqc,EAAA0C,GAQA,MAPA/e,IAAAA,EACAqc,KAAA,EACA0C,GACAP,EAAAlhB,KAAA0C,EAAAqc,EAAA,EAAA,IAAA,MACArY,EAAA2X,sBAAA3b,EAAA4U,KAAAC,MAAA7U,IACA,EAAAA,IAAAA,EAAA,IAAAA,EAAA,GACA1C,KAAA+e,GAAArc,EACAqc,EAAA,GAGArY,EAAAzG,UAAA2lB,aAAA,SAAAljB,EAAAqc,EAAA0C,GASA,MARA/e,IAAAA,EACAqc,KAAA,EACA0C,GACAP,EAAAlhB,KAAA0C,EAAAqc,EAAA,EAAA,MAAA,QACArY,EAAA2X,qBACAre,KAAA+e,GAAArc,EACA1C,KAAA+e,EAAA,GAAArc,IAAA,GACA0e,EAAAphB,KAAA0C,EAAAqc,GAAA,GACAA,EAAA,GAGArY,EAAAzG,UAAA4lB,aAAA,SAAAnjB,EAAAqc,EAAA0C,GASA,MARA/e,IAAAA,EACAqc,KAAA,EACA0C,GACAP,EAAAlhB,KAAA0C,EAAAqc,EAAA,EAAA,MAAA,QACArY,EAAA2X,qBACAre,KAAA+e,GAAArc,IAAA,EACA1C,KAAA+e,EAAA,GAAArc,GACA0e,EAAAphB,KAAA0C,EAAAqc,GAAA,GACAA,EAAA,GAGArY,EAAAzG,UAAA6lB,aAAA,SAAApjB,EAAAqc,EAAA0C,GAWA,MAVA/e,IAAAA,EACAqc,KAAA,EACA0C,GACAP,EAAAlhB,KAAA0C,EAAAqc,EAAA,EAAA,WAAA,aACArY,EAAA2X,qBACAre,KAAA+e,GAAArc,EACA1C,KAAA+e,EAAA,GAAArc,IAAA,EACA1C,KAAA+e,EAAA,GAAArc,IAAA,GACA1C,KAAA+e,EAAA,GAAArc,IAAA,IACA4e,EAAAthB,KAAA0C,EAAAqc,GAAA,GACAA,EAAA,GAGArY,EAAAzG,UAAA8lB,aAAA,SAAArjB,EAAAqc,EAAA0C,GAYA,MAXA/e,IAAAA,EACAqc,KAAA,EACA0C,GACAP,EAAAlhB,KAAA0C,EAAAqc,EAAA,EAAA,WAAA,aACA,EAAArc,IAAAA,EAAA,WAAAA,EAAA,GACAgE,EAAA2X,qBACAre,KAAA+e,GAAArc,IAAA,GACA1C,KAAA+e,EAAA,GAAArc,IAAA,GACA1C,KAAA+e,EAAA,GAAArc,IAAA,EACA1C,KAAA+e,EAAA,GAAArc,GACA4e,EAAAthB,KAAA0C,EAAAqc,GAAA,GACAA,EAAA,GAeArY,EAAAzG,UAAA+lB,aAAA,SAAAtjB,EAAAqc,EAAA0C,GACA,MAAAD,GAAAxhB,KAAA0C,EAAAqc,GAAA,EAAA0C,IAGA/a,EAAAzG,UAAAgmB,aAAA,SAAAvjB,EAAAqc,EAAA0C,GACA,MAAAD,GAAAxhB,KAAA0C,EAAAqc,GAAA,EAAA0C,IAUA/a,EAAAzG,UAAAimB,cAAA,SAAAxjB,EAAAqc,EAAA0C,GACA,MAAAE,GAAA3hB,KAAA0C,EAAAqc,GAAA,EAAA0C,IAGA/a,EAAAzG,UAAAkmB,cAAA,SAAAzjB,EAAAqc,EAAA0C,GACA,MAAAE,GAAA3hB,KAAA0C,EAAAqc,GAAA,EAAA0C,IAIA/a,EAAAzG,UAAA0jB,KAAA,SAAA1L,EAAAmO,EAAAxX,EAAAjI,GACA,GAAA0f,GAAArmB,IAOA,IALA4O,IAAAA,EAAA,GACAjI,GAAA,IAAAA,IAAAA,EAAA3G,KAAAjB,QACAqnB,IAAAA,EAAA,GAGAzf,IAAAiI,GACA,IAAAqJ,EAAAlZ,QAAA,IAAAsnB,EAAAtnB,OAAA,CAGA,GAAA6P,EAAAjI,EAAA,KAAA,IAAAqX,WAAA,0BACA,IAAA,EAAAoI,GAAAA,GAAAnO,EAAAlZ,OACA,KAAA,IAAAif,WAAA,4BACA,IAAA,EAAApP,GAAAA,GAAAyX,EAAAtnB,OAAA,KAAA,IAAAif,WAAA,4BACA,IAAA,EAAArX,GAAAA,EAAA0f,EAAAtnB,OAAA,KAAA,IAAAif,WAAA,0BAGArX,GAAA3G,KAAAjB,SACA4H,EAAA3G,KAAAjB,QACAkZ,EAAAlZ,OAAAqnB,EAAAzf,EAAAiI,IACAjI,EAAAsR,EAAAlZ,OAAAqnB,EAAAxX,EAEA,IAAAsJ,GAAAvR,EAAAiI,CAEA,IAAA,IAAAsJ,IAAAxR,EAAA2X,oBACA,IAAA,GAAAzf,GAAA,EAAAsZ,EAAAtZ,EAAAA,IACAqZ,EAAArZ,EAAAwnB,GAAApmB,KAAApB,EAAAgQ,OAGAqJ,GAAAuG,KAAAxe,KAAAijB,SAAArU,EAAAA,EAAAsJ,GAAAkO,KAKA1f,EAAAzG,UAAAqmB,KAAA,SAAA5jB,EAAAkM,EAAAjI,GAKA,GAJAjE,IAAAA,EAAA,GACAkM,IAAAA,EAAA,GACAjI,IAAAA,EAAA3G,KAAAjB,QAEA6P,EAAAjI,EAAA,KAAA,IAAAqX,WAAA,cAGA,IAAArX,IAAAiI,GACA,IAAA5O,KAAAjB,OAAA,CAEA,GAAA,EAAA6P,GAAAA,GAAA5O,KAAAjB,OAAA,KAAA,IAAAif,WAAA,sBACA,IAAA,EAAArX,GAAAA,EAAA3G,KAAAjB,OAAA,KAAA,IAAAif,WAAA,oBAEA,IAAApf,EACA,IAAA,gBAAA8D,GACA,IAAA9D,EAAAgQ,EAAAjI,EAAA/H,EAAAA,IACAoB,KAAApB,GAAA8D,MAEA,CACA,GAAAyU,GAAAsI,EAAA/c,EAAAyb,YACAjG,EAAAf,EAAApY,MACA,KAAAH,EAAAgQ,EAAAjI,EAAA/H,EAAAA,IACAoB,KAAApB,GAAAuY,EAAAvY,EAAAsZ,GAIA,MAAAlY,QAOA0G,EAAAzG,UAAAsmB,cAAA,WACA,GAAA,mBAAAvO,YAAA,CACA,GAAAtR,EAAA2X,oBACA,MAAA,IAAA3X,GAAA1G,MAAAgJ,MAGA,KAAA,GADAoV,GAAA,GAAApG,YAAAhY,KAAAjB,QACAH,EAAA,EAAAsZ,EAAAkG,EAAArf,OAAAmZ,EAAAtZ,EAAAA,GAAA,EACAwf,EAAAxf,GAAAoB,KAAApB,EAEA,OAAAwf,GAAApV,OAGA,KAAA,IAAAgV,WAAA,sDAOA,IAAAwI,GAAA9f,EAAAzG,SAKAyG,GAAA4X,SAAA,SAAApL,GAoDA,MAnDAA,GAAAhO,YAAAwB,EACAwM,EAAAqL,WAAA,EAGArL,EAAAuT,KAAAvT,EAAAvN,IACAuN,EAAAsL,KAAAtL,EAAAzK,IAGAyK,EAAAvN,IAAA6gB,EAAA7gB,IACAuN,EAAAzK,IAAA+d,EAAA/d,IAEAyK,EAAA0L,MAAA4H,EAAA5H,MACA1L,EAAAiL,SAAAqI,EAAArI,SACAjL,EAAAwT,eAAAF,EAAArI,SACAjL,EAAAmR,OAAAmC,EAAAnC,OACAnR,EAAA4Q,OAAA0C,EAAA1C,OACA5Q,EAAAgQ,QAAAsD,EAAAtD,QACAhQ,EAAAyQ,KAAA6C,EAAA7C,KACAzQ,EAAA1J,MAAAgd,EAAAhd,MACA0J,EAAAyL,UAAA6H,EAAA7H,UACAzL,EAAAuR,aAAA+B,EAAA/B,aACAvR,EAAAwR,aAAA8B,EAAA9B,aACAxR,EAAAyR,aAAA6B,EAAA7B,aACAzR,EAAA0R,aAAA4B,EAAA5B,aACA1R,EAAA2R,SAAA2B,EAAA3B,SACA3R,EAAA4R,YAAA0B,EAAA1B,YACA5R,EAAA6R,YAAAyB,EAAAzB,YACA7R,EAAA8R,YAAAwB,EAAAxB,YACA9R,EAAA+R,YAAAuB,EAAAvB,YACA/R,EAAAgS,YAAAsB,EAAAtB,YACAhS,EAAAkS,YAAAoB,EAAApB,YACAlS,EAAAmS,aAAAmB,EAAAnB,aACAnS,EAAAoS,aAAAkB,EAAAlB,aACApS,EAAAgR,WAAAsC,EAAAtC,WACAhR,EAAAqS,cAAAiB,EAAAjB,cACArS,EAAAsS,cAAAgB,EAAAhB,cACAtS,EAAAuS,cAAAe,EAAAf,cACAvS,EAAAwS,cAAAc,EAAAd,cACAxS,EAAAyS,UAAAa,EAAAb,UACAzS,EAAA0S,aAAAY,EAAAZ,aACA1S,EAAA2S,aAAAW,EAAAX,aACA3S,EAAA4S,aAAAU,EAAAV,aACA5S,EAAA6S,aAAAS,EAAAT,aACA7S,EAAA8S,aAAAQ,EAAAR,aACA9S,EAAA+S,aAAAO,EAAAP,aACA/S,EAAAgT,cAAAM,EAAAN,cACAhT,EAAAiT,cAAAK,EAAAL,cACAjT,EAAAoT,KAAAE,EAAAF,KACApT,EAAA6Q,QAAAyC,EAAAzC,QACA7Q,EAAAqT,cAAAC,EAAAD,cAEArT,EAGA,IAAA4O,GAAA,kBA2FA6E,YAAA,GAAAjF,QAAA,GAAAkF,WAAA,KAAAC,IAAA,SAAA5nB,EAAArB,EAAAD,GACA,GAAAmpB,GAAA,oEAEA,SAAAnpB,GACA,YAYA,SAAAopB,GAAAC,GACA,GAAAC,GAAAD,EAAA/E,WAAA,EACA,OAAAgF,KAAAC,EACA,GACAD,IAAAE,EACA,GACAC,EAAAH,EACA,GACAG,EAAA,GAAAH,EACAA,EAAAG,EAAA,GAAA,GACAC,EAAA,GAAAJ,EACAA,EAAAI,EACAC,EAAA,GAAAL,EACAA,EAAAK,EAAA,GADA,OAIA,QAAAC,GAAAC,GAuBA,QAAA1jB,GAAA8U,GACA1F,EAAAuU,KAAA7O,EAvBA,GAAAha,GAAAwZ,EAAAsP,EAAApH,EAAAqH,EAAAzU,CAEA,IAAAsU,EAAAzoB,OAAA,EAAA,EACA,KAAA,IAAAF,OAAA,iDAQA,IAAAqZ,GAAAsP,EAAAzoB,MACA4oB,GAAA,MAAAH,EAAAI,OAAA1P,EAAA,GAAA,EAAA,MAAAsP,EAAAI,OAAA1P,EAAA,GAAA,EAAA,EAGAhF,EAAA,GAAA2U,GAAA,EAAAL,EAAAzoB,OAAA,EAAA4oB,GAGAD,EAAAC,EAAA,EAAAH,EAAAzoB,OAAA,EAAAyoB,EAAAzoB,MAEA,IAAA0oB,GAAA,CAMA,KAAA7oB,EAAA,EAAAwZ,EAAA,EAAAsP,EAAA9oB,EAAAA,GAAA,EAAAwZ,GAAA,EACAkI,EAAAyG,EAAAS,EAAAI,OAAAhpB,KAAA,GAAAmoB,EAAAS,EAAAI,OAAAhpB,EAAA,KAAA,GAAAmoB,EAAAS,EAAAI,OAAAhpB,EAAA,KAAA,EAAAmoB,EAAAS,EAAAI,OAAAhpB,EAAA,IACAkF,GAAA,SAAAwc,IAAA,IACAxc,GAAA,MAAAwc,IAAA,GACAxc,EAAA,IAAAwc,EAYA,OATA,KAAAqH,GACArH,EAAAyG,EAAAS,EAAAI,OAAAhpB,KAAA,EAAAmoB,EAAAS,EAAAI,OAAAhpB,EAAA,KAAA,EACAkF,EAAA,IAAAwc,IACA,IAAAqH,IACArH,EAAAyG,EAAAS,EAAAI,OAAAhpB,KAAA,GAAAmoB,EAAAS,EAAAI,OAAAhpB,EAAA,KAAA,EAAAmoB,EAAAS,EAAAI,OAAAhpB,EAAA,KAAA,EACAkF,EAAAwc,GAAA,EAAA,KACAxc,EAAA,IAAAwc,IAGApN,EAGA,QAAA4U,GAAAC,GAMA,QAAAC,GAAAC,GACA,MAAAnB,GAAAc,OAAAK,GAGA,QAAAC,GAAAD,GACA,MAAAD,GAAAC,GAAA,GAAA,IAAAD,EAAAC,GAAA,GAAA,IAAAD,EAAAC,GAAA,EAAA,IAAAD,EAAA,GAAAC,GAVA,GAAArpB,GAGAupB,EAAAppB,EAFAqpB,EAAAL,EAAAhpB,OAAA,EACAspB,EAAA,EAYA,KAAAzpB,EAAA,EAAAG,EAAAgpB,EAAAhpB,OAAAqpB,EAAArpB,EAAAH,EAAAA,GAAA,EACAupB,GAAAJ,EAAAnpB,IAAA,KAAAmpB,EAAAnpB,EAAA,IAAA,GAAAmpB,EAAAnpB,EAAA,GACAypB,GAAAH,EAAAC,EAIA,QAAAC,GACA,IAAA,GACAD,EAAAJ,EAAAA,EAAAhpB,OAAA,GACAspB,GAAAL,EAAAG,GAAA,GACAE,GAAAL,EAAAG,GAAA,EAAA,IACAE,GAAA,IACA,MACA,KAAA,GACAF,GAAAJ,EAAAA,EAAAhpB,OAAA,IAAA,GAAAgpB,EAAAA,EAAAhpB,OAAA,GACAspB,GAAAL,EAAAG,GAAA,IACAE,GAAAL,EAAAG,GAAA,EAAA,IACAE,GAAAL,EAAAG,GAAA,EAAA,IACAE,GAAA,IAIA,MAAAA,GA7GA,GAAAR,GAAA,mBAAA7P,YACAA,WACArL,MAEAua,EAAA,IAAAjF,WAAA,GACAkF,EAAA,IAAAlF,WAAA,GACAmF,EAAA,IAAAnF,WAAA,GACAqF,EAAA,IAAArF,WAAA,GACAoF,EAAA,IAAApF,WAAA,EAwGAtkB,GAAA4kB,YAAAgF,EACA5pB,EAAAwiB,cAAA2H,GACA,mBAAAnqB,GAAAqC,KAAAsoB,YAAA3qB,QAEA4qB,IAAA,SAAAtpB,EAAArB,EAAAD,GACAA,EAAAwnB,KAAA,SAAAnc,EAAA+V,EAAAyJ,EAAAC,EAAAC,GACA,GAAAhrB,GAAAirB,EACAC,EAAA,EAAAF,EAAAD,EAAA,EACAI,GAAA,GAAAD,GAAA,EACAE,EAAAD,GAAA,EACAE,EAAA,GACAnqB,EAAA4pB,EAAAE,EAAA,EAAA,EACAM,EAAAR,EAAA,GAAA,EACAjqB,EAAAyK,EAAA+V,EAAAngB,EAOA,KALAA,GAAAoqB,EAEAtrB,EAAAa,GAAA,IAAAwqB,GAAA,EACAxqB,KAAAwqB,EACAA,GAAAH,EACAG,EAAA,EAAArrB,EAAA,IAAAA,EAAAsL,EAAA+V,EAAAngB,GAAAA,GAAAoqB,EAAAD,GAAA,GAKA,IAHAJ,EAAAjrB,GAAA,IAAAqrB,GAAA,EACArrB,KAAAqrB,EACAA,GAAAN,EACAM,EAAA,EAAAJ,EAAA,IAAAA,EAAA3f,EAAA+V,EAAAngB,GAAAA,GAAAoqB,EAAAD,GAAA,GAEA,GAAA,IAAArrB,EACAA,EAAA,EAAAorB,MACA,CAAA,GAAAprB,IAAAmrB,EACA,MAAAF,GAAAM,IAAApF,KAAAtlB,EAAA,GAAA,EAEAoqB,IAAArR,KAAAG,IAAA,EAAAgR,GACA/qB,GAAAorB,EAEA,OAAAvqB,EAAA,GAAA,GAAAoqB,EAAArR,KAAAG,IAAA,EAAA/Z,EAAA+qB,IAGA9qB,EAAAihB,MAAA,SAAA5V,EAAAtG,EAAAqc,EAAAyJ,EAAAC,EAAAC,GACA,GAAAhrB,GAAAirB,EAAA7e,EACA8e,EAAA,EAAAF,EAAAD,EAAA,EACAI,GAAA,GAAAD,GAAA,EACAE,EAAAD,GAAA,EACAK,EAAA,KAAAT,EAAAnR,KAAAG,IAAA,EAAA,KAAAH,KAAAG,IAAA,EAAA,KAAA,EACA7Y,EAAA4pB,EAAA,EAAAE,EAAA,EACAM,EAAAR,EAAA,EAAA,GACAjqB,EAAA,EAAAmE,GAAA,IAAAA,GAAA,EAAA,EAAAA,EAAA,EAAA,CAmCA,KAjCAA,EAAA4U,KAAA6R,IAAAzmB,GAEA2c,MAAA3c,IAAAmhB,MAAAnhB,GACAimB,EAAAtJ,MAAA3c,GAAA,EAAA,EACAhF,EAAAmrB,IAEAnrB,EAAA4Z,KAAAC,MAAAD,KAAAE,IAAA9U,GAAA4U,KAAA8R,KACA1mB,GAAAoH,EAAAwN,KAAAG,IAAA,GAAA/Z,IAAA,IACAA,IACAoM,GAAA,GAGApH,GADAhF,EAAAorB,GAAA,EACAI,EAAApf,EAEAof,EAAA5R,KAAAG,IAAA,EAAA,EAAAqR,GAEApmB,EAAAoH,GAAA,IACApM,IACAoM,GAAA,GAGApM,EAAAorB,GAAAD,GACAF,EAAA,EACAjrB,EAAAmrB,GACAnrB,EAAAorB,GAAA,GACAH,GAAAjmB,EAAAoH,EAAA,GAAAwN,KAAAG,IAAA,EAAAgR,GACA/qB,GAAAorB,IAEAH,EAAAjmB,EAAA4U,KAAAG,IAAA,EAAAqR,EAAA,GAAAxR,KAAAG,IAAA,EAAAgR,GACA/qB,EAAA,IAIA+qB,GAAA,EAAAzf,EAAA+V,EAAAngB,GAAA,IAAA+pB,EAAA/pB,GAAAoqB,EAAAL,GAAA,IAAAF,GAAA,GAIA,IAFA/qB,EAAAA,GAAA+qB,EAAAE,EACAC,GAAAH,EACAG,EAAA,EAAA5f,EAAA+V,EAAAngB,GAAA,IAAAlB,EAAAkB,GAAAoqB,EAAAtrB,GAAA,IAAAkrB,GAAA,GAEA5f,EAAA+V,EAAAngB,EAAAoqB,IAAA,IAAAzqB,QAGA8qB,IAAA,SAAApqB,EAAArB,GAMA,GAAAwD,GAAAuL,MAAAvL,QAMAgc,EAAA/V,OAAApH,UAAAke,QAmBAvgB,GAAAD,QAAAyD,GAAA,SAAA0X,GACA,QAAAA,GAAA,kBAAAsE,EAAAte,KAAAga,SAGAwQ,IAAA,SAAArqB,EAAArB,GAoBA,QAAAgH,MAaA,QAAA2kB,GAAAtW,GACA,GAAAmK,MAAAe,SAAArf,KAAAmU,EAEA,QAAAmK,GACA,IAAA,gBACA,IAAA,gBACA,IAAA,oBACA,OAAA,CACA,SACA,OAAA,GAQA,QAAAoM,KACA,GAAA9N,EAAA+N,iBACA,SAAA/N,EAAAgO,SAAAC,WAAAjO,EAAAkO,eACA,MAAA,IAAAH,eAEA,KAAA,MAAA,IAAAG,eAAA,qBAAA,MAAAlsB,IACA,IAAA,MAAA,IAAAksB,eAAA,sBAAA,MAAAlsB,IACA,IAAA,MAAA,IAAAksB,eAAA,sBAAA,MAAAlsB,IACA,IAAA,MAAA,IAAAksB,eAAA,kBAAA,MAAAlsB,IAEA,OAAA,EAuBA,QAAAmsB,GAAA5W,GACA,MAAAA,KAAA5L,OAAA4L,GAWA,QAAA6W,GAAA7W,GACA,IAAA4W,EAAA5W,GAAA,MAAAA,EACA,IAAA8W,KACA,KAAA,GAAArqB,KAAAuT,GACA,MAAAA,EAAAvT,IACAqqB,EAAAjmB,KAAAqe,mBAAAziB,GACA,IAAAyiB,mBAAAlP,EAAAvT,IAGA,OAAAqqB,GAAA3a,KAAA,KAiBA,QAAA4a,GAAA5M,GAMA,IAAA,GAHA6M,GACAC,EAHAjX,KACA8W,EAAA3M,EAAAgF,MAAA,KAIAxjB,EAAA,EAAAsZ,EAAA6R,EAAAhrB,OAAAmZ,EAAAtZ,IAAAA,EACAsrB,EAAAH,EAAAnrB,GACAqrB,EAAAC,EAAA9H,MAAA,KACAnP,EAAA0P,mBAAAsH,EAAA,KAAAtH,mBAAAsH,EAAA,GAGA,OAAAhX,GA8DA,QAAAkX,GAAA/M,GACA,GAEAgN,GACAC,EACAliB,EACA2Q,EALAwR,EAAAlN,EAAAgF,MAAA,SACAna,IAMAqiB,GAAAC,KAEA,KAAA,GAAA3rB,GAAA,EAAAsZ,EAAAoS,EAAAvrB,OAAAmZ,EAAAtZ,IAAAA,EACAyrB,EAAAC,EAAA1rB,GACAwrB,EAAAC,EAAA9mB,QAAA,KACA4E,EAAAkiB,EAAA7gB,MAAA,EAAA4gB,GAAA9G,cACAxK,EAAAsD,EAAAiO,EAAA7gB,MAAA4gB,EAAA,IACAniB,EAAAE,GAAA2Q,CAGA,OAAA7Q,GAWA,QAAAjF,GAAAoa,GACA,MAAAA,GAAAgF,MAAA,SAAAtO,QAWA,QAAAxO,GAAA8X,GACA,MAAAoN,GAAApN,EAAAgF,MAAA,SAAA,SAAAnP,EAAAmK,GACA,GAAA6M,GAAA7M,EAAAgF,MAAA,SACA1iB,EAAAuqB,EAAAnW,QACAgF,EAAAmR,EAAAnW,OAGA,OADApU,IAAAoZ,IAAA7F,EAAAvT,GAAAoZ,GACA7F,OAkDA,QAAAwX,GAAAzjB,EAAAgB,GACAA,EAAAA,MACAhI,KAAAgH,IAAAA,EACAhH,KAAA0qB,IAAA1qB,KAAAgH,IAAA0jB,IACA1qB,KAAAyH,KAAA,QAAAzH,KAAAgH,IAAAC,OACAjH,KAAA0qB,IAAAC,aACA,KACA3qB,KAAA4qB,oBAAA5qB,KAAA0qB,IAAAG,QACA7qB,KAAA8qB,OAAA9qB,KAAA+J,QAAAogB,EAAAnqB,KAAA0qB,IAAAK,yBAIA/qB,KAAA8qB,OAAA,gBAAA9qB,KAAA0qB,IAAAM,kBAAA,gBACAhrB,KAAAirB,oBAAAjrB,KAAA8qB,QACA9qB,KAAAmH,KAAA,QAAAnH,KAAAgH,IAAAC,OACAjH,KAAAkrB,UAAAlrB,KAAAyH,MACA,KAyIA,QAAA0jB,GAAAlkB,EAAAC,GACA,GAAAhJ,GAAA8B,IACAorB,GAAAtsB,KAAAkB,MACAA,KAAAqrB,OAAArrB,KAAAqrB,WACArrB,KAAAiH,OAAAA,EACAjH,KAAAkH,IAAAA,EACAlH,KAAA8qB,UACA9qB,KAAAsrB,WACAtrB,KAAAwC,GAAA,MAAA,WACA,GAAAqD,GAAA,KACAwa,EAAA,IAEA,KACAA,EAAA,GAAAoK,GAAAvsB,GACA,MAAAR,GACAmI,EAAA,GAAAhH,OAAA,0CACAgH,EAAA2B,OAAA,EACA3B,EAAA0lB,SAAA7tB,EAGAQ,EAAAyV,SAAA9N,EAAAwa,KA4eA,QAAA1Y,GAAAV,EAAAC,GAEA,MAAA,kBAAAA,GACA,GAAAikB,GAAA,MAAAlkB,GAAAN,IAAAO,GAIA,GAAA/G,UAAApB,OACA,GAAAosB,GAAA,MAAAlkB,GAGA,GAAAkkB,GAAAlkB,EAAAC,GAp8BA,GAAAkkB,GAAAnsB,EAAA,WACAurB,EAAAvrB,EAAA,UAMAyc,EAAA,mBAAA1d,QACAgC,KACAhC,OAyDAoe,EAAA,GAAAA,KACA,SAAA7d,GAAA,MAAAA,GAAA6d,QACA,SAAA7d,GAAA,MAAAA,GAAAsjB,QAAA,eAAA,IAsCAla,GAAA6jB,gBAAA1B,EA6BAniB,EAAAqiB,YAAAA,EASAriB,EAAA8jB,OACAvW,KAAA,YACAwW,KAAA,mBACAjc,IAAA,kBACAkc,WAAA,oCACAva,KAAA,oCACAwa,YAAA,qCAYAjkB,EAAAmiB,WACA+B,oCAAA/B,EACAgC,mBAAAvkB,KAAAgP,WAYA5O,EAAAH,OACAqkB,oCAAA7B,EACA8B,mBAAAvkB,KAAAC,OAyIAijB,EAAAxqB,UAAA0F,IAAA,SAAAwC,GACA,MAAAnI,MAAA8qB,OAAA3iB,EAAAmb,gBAeAmH,EAAAxqB,UAAAgrB,oBAAA,WAEA,GAAAc,GAAA/rB,KAAA8qB,OAAA,iBAAA,EACA9qB,MAAAgD,KAAAA,EAAA+oB,EAGA,IAAA9Y,GAAA3N,EAAAymB,EACA,KAAA,GAAArsB,KAAAuT,GAAAjT,KAAAN,GAAAuT,EAAAvT,IAcA+qB,EAAAxqB,UAAAirB,UAAA,SAAA9N,GACA,GAAA5V,GAAAG,EAAAH,MAAAxH,KAAAgD,KACA,OAAAwE,IAAA4V,GAAAA,EAAAre,OACAyI,EAAA4V,GACA,MAwBAqN,EAAAxqB,UAAA2qB,oBAAA,SAAAC,GACA,GAAA7nB,GAAA6nB,EAAA,IAAA,CAGA7qB,MAAA6qB,OAAAA,EACA7qB,KAAAgsB,WAAAhpB,EAGAhD,KAAAisB,KAAA,GAAAjpB,EACAhD,KAAA6G,GAAA,GAAA7D,EACAhD,KAAAksB,YAAA,GAAAlpB,EACAhD,KAAAmsB,YAAA,GAAAnpB,EACAhD,KAAA+G,MAAA,GAAA/D,GAAA,GAAAA,EACAhD,KAAAosB,WACA,EAGApsB,KAAAqsB,SAAA,KAAAxB,EACA7qB,KAAA8G,UAAA,KAAA+jB,GAAA,MAAAA,EACA7qB,KAAAssB,WAAA,KAAAzB,EACA7qB,KAAAusB,aAAA,KAAA1B,EACA7qB,KAAAwsB,cAAA,KAAA3B,EACA7qB,KAAAysB,SAAA,KAAA5B,EACA7qB,KAAA0sB,UAAA,KAAA7B,GAUAJ,EAAAxqB,UAAAmsB,QAAA,WACA,GAAAplB,GAAAhH,KAAAgH,IACAC,EAAAD,EAAAC,OACAC,EAAAF,EAAAE,IAEAylB,EAAA,UAAA1lB,EAAA,IAAAC,EAAA,KAAAlH,KAAA6qB,OAAA,IACAhlB,EAAA,GAAAhH,OAAA8tB,EAKA,OAJA9mB,GAAAglB,OAAA7qB,KAAA6qB,OACAhlB,EAAAoB,OAAAA,EACApB,EAAAqB,IAAAA,EAEArB,GAOA8B,EAAA8iB,SAAAA,EAsCAW,EAAAD,EAAAlrB,WAMAkrB,EAAAlrB,UAAA2sB,IAAA,SAAAC,GAEA,MADAA,GAAA7sB,MACAA,MAWAmrB,EAAAlrB,UAAA6sB,QAAA,SAAAC,GAEA,MADA/sB,MAAAgtB,SAAAD,EACA/sB,MAUAmrB,EAAAlrB,UAAAgtB,aAAA,WAGA,MAFAjtB,MAAAgtB,SAAA,EACAC,aAAAjtB,KAAAktB,QACAltB,MAUAmrB,EAAAlrB,UAAAktB,MAAA,WACA,MAAAntB,MAAAotB,QAAA,QACAptB,KAAAotB,SAAA,EACAptB,KAAA0qB,IAAAyC,QACAntB,KAAAitB,eACAjtB,KAAAqtB,KAAA,SACArtB,OAuBAmrB,EAAAlrB,UAAAwI,IAAA,SAAAN,EAAA2Q,GACA,GAAA+Q,EAAA1hB,GAAA,CACA,IAAA,GAAAzI,KAAAyI,GACAnI,KAAAyI,IAAA/I,EAAAyI,EAAAzI,GAEA,OAAAM,MAIA,MAFAA,MAAAsrB,QAAAnjB,EAAAmb,eAAAxK,EACA9Y,KAAA8qB,OAAA3iB,GAAA2Q,EACA9Y,MAiBAmrB,EAAAlrB,UAAAqtB,MAAA,SAAAnlB,GAGA,aAFAnI,MAAAsrB,QAAAnjB,EAAAmb,qBACAtjB,MAAA8qB,OAAA3iB,GACAnI,MAWAmrB,EAAAlrB,UAAAstB,UAAA,SAAAplB,GACA,MAAAnI,MAAAsrB,QAAAnjB,EAAAmb,gBAyBA6H,EAAAlrB,UAAA+C,KAAA,SAAAA,GAEA,MADAhD,MAAAyI,IAAA,eAAAd,EAAA8jB,MAAAzoB,IAAAA,GACAhD,MAuBAmrB,EAAAlrB,UAAA4I,OAAA,SAAA7F,GAEA,MADAhD,MAAAyI,IAAA,SAAAd,EAAA8jB,MAAAzoB,IAAAA,GACAhD,MAYAmrB,EAAAlrB,UAAAutB,KAAA,SAAAC,EAAAC,GACA,GAAAtQ,GAAA5E,KAAAiV,EAAA,IAAAC,EAEA,OADA1tB,MAAAyI,IAAA,gBAAA,SAAA2U,GACApd,MAiBAmrB,EAAAlrB,UAAA0I,MAAA,SAAAmQ,GAGA,MAFA,gBAAAA,KAAAA,EAAAgR,EAAAhR,IACAA,GAAA9Y,KAAAqrB,OAAAvnB,KAAAgV,GACA9Y,MAmBAmrB,EAAAlrB,UAAAkI,MAAA,SAAAK,EAAAsQ,GAGA,MAFA9Y,MAAA2tB,YAAA3tB,KAAA2tB,UAAA,GAAAC,WACA5tB,KAAA2tB,UAAAxY,OAAA3M,EAAAsQ,GACA9Y,MAoBAmrB,EAAAlrB,UAAAqG,OAAA,SAAA6B,EAAAE,EAAAE,GAGA,MAFAvI,MAAA2tB,YAAA3tB,KAAA2tB,UAAA,GAAAC,WACA5tB,KAAA2tB,UAAAxY,OAAAhN,EAAAE,EAAAE,GACAvI,MAsDAmrB,EAAAlrB,UAAAyI,KAAA,SAAA9C,GACA,GAAAqN,GAAA4W,EAAAjkB,GACA5C,EAAAhD,KAAAutB,UAAA,eAGA,IAAAta,GAAA4W,EAAA7pB,KAAA6tB,OACA,IAAA,GAAAnuB,KAAAkG,GACA5F,KAAA6tB,MAAAnuB,GAAAkG,EAAAlG,OAEA,gBAAAkG,IACA5C,GAAAhD,KAAAgD,KAAA,QACAA,EAAAhD,KAAAutB,UAAA,gBAEAvtB,KAAA6tB,MADA,qCAAA7qB,EACAhD,KAAA6tB,MACA7tB,KAAA6tB,MAAA,IAAAjoB,EACAA,GAEA5F,KAAA6tB,OAAA,IAAAjoB,GAGA5F,KAAA6tB,MAAAjoB,CAGA,OAAAqN,IACAjQ,GAAAhD,KAAAgD,KAAA,QACAhD,MAFAA,MAcAmrB,EAAAlrB,UAAA0T,SAAA,SAAA9N,EAAAwa,GACA,GAAAwM,GAAA7sB,KAAA6T,SAEA,OADA7T,MAAAitB,eACA,GAAAJ,EAAA9tB,OAAA8tB,EAAAhnB,EAAAwa,GACAxa,EAAA7F,KAAAqtB,KAAA,QAAAxnB,OACAgnB,GAAAxM,IASA8K,EAAAlrB,UAAA6tB,iBAAA,WACA,GAAAjoB,GAAA,GAAAhH,OAAA,uDACAgH,GAAAkoB,aAAA,EACA/tB,KAAA2T,SAAA9N,IASAslB,EAAAlrB,UAAA+tB,aAAA,WACA,GAAAlB,GAAA9sB,KAAAgtB,SACAnnB,EAAA,GAAAhH,OAAA,cAAAiuB,EAAA,cACAjnB,GAAAinB,QAAAA,EACA9sB,KAAA2T,SAAA9N,IAcAslB,EAAAlrB,UAAAguB,gBAAA,WAEA,MADAjuB,MAAAkuB,kBAAA,EACAluB,MAYAmrB,EAAAlrB,UAAA0G,IAAA,SAAAkmB,GACA,GAAA3uB,GAAA8B,KACA0qB,EAAA1qB,KAAA0qB,IAAAlB,IACA7gB,EAAA3I,KAAAqrB,OAAAjc,KAAA,KACA0d,EAAA9sB,KAAAgtB,SACApnB,EAAA5F,KAAA2tB,WAAA3tB,KAAA6tB,KA6CA,IA1CA7tB,KAAA6T,UAAAgZ,GAAAjoB,EAGA8lB,EAAAyD,mBAAA,WACA,MAAA,IAAAzD,EAAA0D,WACA,GAAA1D,EAAAG,OACA3sB,EAAAkvB,QAAAlvB,EAAA8vB,eACA9vB,EAAA4vB,uBAEA5vB,GAAAmvB,KAAA,OALA,QASA3C,EAAA2D,SACA3D,EAAA2D,OAAAC,WAAA,SAAA5wB,GACAA,EAAA6wB,QAAA7wB,EAAA8wB,OAAA9wB,EAAA+wB,MAAA,IACAvwB,EAAAmvB,KAAA,WAAA3vB,KAKAovB,IAAA9sB,KAAAktB,SACAltB,KAAAktB,OAAAwB,WAAA,WACAxwB,EAAAivB,SACAL,IAIAnkB,IACAA,EAAAhB,EAAA6jB,gBAAA7iB,GACA3I,KAAAkH,MAAAlH,KAAAkH,IAAA3D,QAAA,KACA,IAAAoF,EACA,IAAAA,GAIA+hB,EAAAiE,KAAA3uB,KAAAiH,OAAAjH,KAAAkH,KAAA,GAGAlH,KAAAkuB,mBAAAxD,EAAAuD,iBAAA,GAGA,OAAAjuB,KAAAiH,QAAA,QAAAjH,KAAAiH,QAAA,gBAAArB,KAAA2jB,EAAA3jB,GAAA,CAEA,GAAAkkB,GAAAniB,EAAAmiB,UAAA9pB,KAAAutB,UAAA,gBACAzD,KAAAlkB,EAAAkkB,EAAAlkB,IAIA,IAAA,GAAAuC,KAAAnI,MAAA8qB,OACA,MAAA9qB,KAAA8qB,OAAA3iB,IACAuiB,EAAAkE,iBAAAzmB,EAAAnI,KAAA8qB,OAAA3iB,GAMA,OAFAnI,MAAAqtB,KAAA,UAAArtB,MACA0qB,EAAAhiB,KAAA9C,GACA5F,MAOA2H,EAAAwjB,QAAAA,EAyCAxjB,EAAAhC,IAAA,SAAAuB,EAAAtB,EAAAinB,GACA,GAAA7lB,GAAAW,EAAA,MAAAT,EAIA,OAHA,kBAAAtB,KAAAinB,EAAAjnB,EAAAA,EAAA,MACAA,GAAAoB,EAAA2B,MAAA/C,GACAinB,GAAA7lB,EAAAL,IAAAkmB,GACA7lB,GAaAW,EAAAknB,KAAA,SAAA3nB,EAAAtB,EAAAinB,GACA,GAAA7lB,GAAAW,EAAA,OAAAT,EAIA,OAHA,kBAAAtB,KAAAinB,EAAAjnB,EAAAA,EAAA,MACAA,GAAAoB,EAAA0B,KAAA9C,GACAinB,GAAA7lB,EAAAL,IAAAkmB,GACA7lB,GAYAW,EAAAoB,IAAA,SAAA7B,EAAA2lB,GACA,GAAA7lB,GAAAW,EAAA,SAAAT,EAEA,OADA2lB,IAAA7lB,EAAAL,IAAAkmB,GACA7lB,GAaAW,EAAAmnB,MAAA,SAAA5nB,EAAAtB,EAAAinB,GACA,GAAA7lB,GAAAW,EAAA,QAAAT,EAIA,OAHA,kBAAAtB,KAAAinB,EAAAjnB,EAAAA,EAAA,MACAA,GAAAoB,EAAA0B,KAAA9C,GACAinB,GAAA7lB,EAAAL,IAAAkmB,GACA7lB,GAaAW,EAAAI,KAAA,SAAAb,EAAAtB,EAAAinB,GACA,GAAA7lB,GAAAW,EAAA,OAAAT,EAIA,OAHA,kBAAAtB,KAAAinB,EAAAjnB,EAAAA,EAAA,MACAA,GAAAoB,EAAA0B,KAAA9C,GACAinB,GAAA7lB,EAAAL,IAAAkmB,GACA7lB,GAaAW,EAAAmB,IAAA,SAAA5B,EAAAtB,EAAAinB,GACA,GAAA7lB,GAAAW,EAAA,MAAAT,EAIA,OAHA,kBAAAtB,KAAAinB,EAAAjnB,EAAAA,EAAA,MACAA,GAAAoB,EAAA0B,KAAA9C,GACAinB,GAAA7lB,EAAAL,IAAAkmB,GACA7lB,GAOApJ,EAAAD,QAAAgK,IAEAonB,QAAA,GAAAvE,OAAA,KAAAwE,IAAA,SAAA/vB,EAAArB,GAcA,QAAAwtB,GAAAnY,GACA,MAAAA,GAAAgc,EAAAhc,GAAA,OAWA,QAAAgc,GAAAhc,GACA,IAAA,GAAAvT,KAAA0rB,GAAAnrB,UACAgT,EAAAvT,GAAA0rB,EAAAnrB,UAAAP,EAEA,OAAAuT,GAxBArV,EAAAD,QAAAytB,EAoCAA,EAAAnrB,UAAAuC,GACA4oB,EAAAnrB,UAAAivB,iBAAA,SAAAC,EAAAtC,GAIA,MAHA7sB,MAAAovB,WAAApvB,KAAAovB,gBACApvB,KAAAovB,WAAAD,GAAAnvB,KAAAovB,WAAAD,QACArrB,KAAA+oB,GACA7sB,MAaAorB,EAAAnrB,UAAAkT,KAAA,SAAAgc,EAAAtC,GAIA,QAAArqB,KACAtE,EAAAuV,IAAA0b,EAAA3sB,GACAqqB,EAAA3sB,MAAAF,KAAAG,WALA,GAAAjC,GAAA8B,IAUA,OATAA,MAAAovB,WAAApvB,KAAAovB,eAOA5sB,EAAAqqB,GAAAA,EACA7sB,KAAAwC,GAAA2sB,EAAA3sB,GACAxC,MAaAorB,EAAAnrB,UAAAwT,IACA2X,EAAAnrB,UAAAovB,eACAjE,EAAAnrB,UAAAqvB,mBACAlE,EAAAnrB,UAAAsvB,oBAAA,SAAAJ,EAAAtC,GAIA,GAHA7sB,KAAAovB,WAAApvB,KAAAovB,eAGA,GAAAjvB,UAAApB,OAEA,MADAiB,MAAAovB,cACApvB,IAIA,IAAAwvB,GAAAxvB,KAAAovB,WAAAD,EACA,KAAAK,EAAA,MAAAxvB,KAGA,IAAA,GAAAG,UAAApB,OAEA,aADAiB,MAAAovB,WAAAD,GACAnvB,IAKA,KAAA,GADA4T,GACAhV,EAAA,EAAAA,EAAA4wB,EAAAzwB,OAAAH,IAEA,GADAgV,EAAA4b,EAAA5wB,GACAgV,IAAAiZ,GAAAjZ,EAAAiZ,KAAAA,EAAA,CACA2C,EAAAlS,OAAA1e,EAAA,EACA,OAGA,MAAAoB,OAWAorB,EAAAnrB,UAAAotB,KAAA,SAAA8B,GACAnvB,KAAAovB,WAAApvB,KAAAovB,cACA,IAAA5tB,MAAAgI,MAAA1K,KAAAqB,UAAA,GACAqvB,EAAAxvB,KAAAovB,WAAAD,EAEA,IAAAK,EAAA,CACAA,EAAAA,EAAAhmB,MAAA,EACA,KAAA,GAAA5K,GAAA,EAAAsZ,EAAAsX,EAAAzwB,OAAAmZ,EAAAtZ,IAAAA,EACA4wB,EAAA5wB,GAAAsB,MAAAF,KAAAwB,GAIA,MAAAxB,OAWAorB,EAAAnrB,UAAAwvB,UAAA,SAAAN,GAEA,MADAnvB,MAAAovB,WAAApvB,KAAAovB,eACApvB,KAAAovB,WAAAD,QAWA/D,EAAAnrB,UAAAyvB,aAAA,SAAAP,GACA,QAAAnvB,KAAAyvB,UAAAN,GAAApwB,aAGA4wB,IAAA,SAAA1wB,EAAArB,GAYAA,EAAAD,QAAA,SAAAuV,EAAA2Z,EAAA+C,GAOA,IANA,GAAAlT,GAAA,EACAxE,EAAAhF,EAAAnU,OACA8wB,EAAA,GAAA1vB,UAAApB,OACA6wB,EACA1c,EAAAwJ,KAEAxE,EAAAwE,GACAmT,EAAAhD,EAAA/tB,KAAA,KAAA+wB,EAAA3c,EAAAwJ,KAAAA,EAAAxJ,EAGA,OAAA2c,cAEA,IACA,KC/nOA,SAAA1wB,GAEA,QAAA2wB,GAAA3wB,GAUA,QAAA4wB,GAAAC,GACA,MAAA5uB,GAAA4uB,GAGAA,GAFAA,GAMA,QAAAhd,GAAAid,GACA,MAAAtjB,OAAA1M,UAAAuJ,MAAAtJ,MAAA+vB,GAjBA,GAAAryB,GAAAuB,EAAAvB,OAAA,iBAEAwD,EAAAjC,EAAAiC,QACAD,EAAAhC,EAAAgC,WAEA+G,GADA/I,EAAA0qB,SACA1qB,EAAA+I,SAeAgoB,GAdA/wB,EAAAI,QAcA,aAAA,YAAA,KAAA,SAAAmC,EAAAyuB,EAAAC,GAEA,QAAAC,GAAAC,EAAAC,GAEA,QAAAC,GAAA5d,GAIA,QAAAjN,GAAAjG,GACA,GAAAkZ,GAAA6X,EAAA/wB,EAOA,OANAkZ,IACAhG,IACAgG,EAAAhG,EAAAjN,IAAAjG,IAIAkZ,EAGA,QAAA9P,GAAApJ,EAAAgD,GACA,GAAAiD,EAAAjG,GACA,KAAA,IAAAb,OAAA,kCAAAa,EAAA,sBAGA+wB,GAAA/wB,GAAAgD,EAlBA,GAAA+tB,KAqBA,QACAC,MAAAD,EACA9qB,IAAAA,EACAmD,IAAAA,GAMA,QAAA6nB,KACA,MAAArlB,KAUA,QAAAslB,GAAA5oB,GA+CA,QAAA6oB,GAAAC,GAEA,GAAAC,GAAAnrB,EAAAlD,KAEAkD,GAAAorB,SAAA,QACAprB,GAAAqrB,OAEAC,GAAA,EAEAH,IAAAD,IACAlrB,EAAAlD,MAAAouB,EAEAtZ,EAAA,YAAAuZ,EAAA,OAAAD,GAEAK,KAIA,QAAAC,GAAA5oB,GACA,GAAA6oB,GAAAC,EAAA9oB,EAKA,OAJA6oB,KACAC,EAAA9oB,GAAA6oB,MAGAA,EAGA,QAAAE,KACA3rB,EAAAorB,SAAA,EACAQ,GAAA,EAGA,QAAAC,GAAA/xB,GACA,GAAAgyB,GAAAC,EAAAhsB,IAAAjG,EAEA,KAAAgyB,EACA,KAAA,IAAA7yB,OAAA,gCAAAa,EAGA,OAAAgyB,GAGA,QAAAE,GAAA/E,GACA3kB,EAAA2pB,EAAAhF,GAGA,QAAAiF,GAAAjF,GACA3kB,EAAA6pB,EAAAlF,GAGA,QAAAsE,KACAS,EAAA,SAAAlf,GACAA,EAAAsf,kBAIA,QAAAC,KAGA,QAAAC,GAAAlJ,EAAAtmB,GACA,GAAA2uB,GAAAD,EAAApI,GACA+H,EAAAM,EAAA3uB,KAEA8U,GAAA,sBAAAwR,EAAA,IAAA+H,EAAA,KAAAruB,GAEAquB,IAAAruB,IACA8U,EAAA,sBAAA,WAEA6Z,EAAA3uB,MAAAA,EACAwuB,GAAA,GAZA,GAAAiB,KA6BA,OAbAL,GAAA,SAAA9I,GACA,GAAA0I,GAAAD,EAAAzI,GAEAoJ,EAAAV,EAAAW,UAAAC,KAAA,SAAA5vB,GAEA,MADAwvB,GAAAlJ,EAAAtmB,GACAA;EACA,SAAAqE,GACA,KAAA,IAAAlI,OAAA,IAAAmqB,EAAA,QAAAjiB,EAAAK,UAGA+qB,GAAAruB,KAAAsuB,KAGAhC,EAAAmC,IAAAJ,GAAAG,KAAA,WAEA,GAAAE,KAWA,OAPAV,GAAA,SAAA9I,GACA,GAAApQ,GAAA6Y,EAAAzI,GAAArjB,KAEAusB,GAAAlJ,EAAApQ,GACA4Z,EAAA1uB,KAAA8U,KAGA4Z,IAIA,QAAAC,GAAAC,GACAnB,IAEA/Z,EAAA,uBAEA,IAAA4a,GAAAH,IAAAK,KAAA,SAAAE,GAIA,GAFAhb,EAAA,kCAAAgb,GAEAG,IAAAP,EAEA,MADA5a,GAAA,sCACAmb,CAGA,IAAAjwB,GAAAiD,GAEA,IAAA8V,IAKAyV,GAAAwB,GAAA,GAAAF,EAAAzzB,QAAA,CACAyY,EAAA,0BACA,KACA9U,EAAA+Y,EAAAvb,MAAAub,EAAA+W,GACA,MAAA90B,GACA,KAAA,IAAAmB,OAAA,iBAAAnB,EAAA0J,UAKA,MAAA1E,KACA4vB,KAAA,SAAA5vB,GAEA,MAAAiwB,KAAAP,GACA5a,EAAA,sCACAmb,IAGAnb,EAAA,4BAEAmb,EAAA,KACA9B,EAAAnuB,GACAA,IACA,SAAAqE,GAEA,GAAA4rB,IAAAP,EAEA,MADA5a,GAAA,sCACAmb,CASA,MANAnb,GAAA,yBAEAmb,EAAA,KACA/sB,EAAAqrB,OAAAlqB,EACAmqB,GAAA,EAEAnqB,GAGA,OAAAqrB,GAQA,QAAAJ,KAKA,MAHAxa,GAAA,uBAGAmb,MACAnb,GAAA,iCAIAga,GAAA,EAIAoB,IACApb,EAAA,+BAEA+Y,EAAA,WACA/Y,EAAA,yBACA6a,WAIAlB,MAGA,QAAAxrB,KACA,MAAAC,GAAAlD,MAMA,QAAA2vB,GAAArqB,GACAA,EAAAA,KAEA,IAAA0qB,GAAA1qB,EAAA0qB,MAMA,QAJAlB,GAAAkB,KACAC,EAAAF,EAAAC,IAGAC,GACAnb,EAAA,uBACAmb,IAEAnb,EAAA,sBACA4Y,EAAAyC,KAAAltB,MAIA,QAAA8C,GAAA/F,GACA,GAAA+Y,EACA,KAAA,IAAA5c,OAAA,mDACA,IAAAsC,EAAAuB,GACA,KAAA,IAAA7D,OAAA,iEAGAgyB,GAAAnuB,GAGA,QAAA8U,MAqBA,QAAAtK,GAAA1E,GAUA,QAAA0E,GAAAslB,GACA,MAAAA,GAGAA,EAAA9V,GAFA8V,EAMA,QAAAH,KACA,GAAA7wB,GAAAwR,EAAA7S,UACA,OAAA2yB,GAAA5yB,MAAA,KAAAsB,GAAA8wB,KAAAplB,GAGA,QAAAvH,KACA,GAAAnE,GAAAwR,EAAA7S,UACA,OAAA+M,GAAA6lB,EAAA7yB,MAAA,KAAAsB,IAvBA,IAAAJ,EAAAswB,EAAAsB,UACA,KAAA,IAAAn0B,OAAA,yDAGA,IAAA6d,GAAAgV,EAAAsB,SAAAzvB,QAAAiF,GACAuqB,EAAArB,EAAA/rB,IACAmtB,EAAApB,EAAAW,QAoBAY,EAAA9zB,EAAAI,UAAAmyB,GACAW,QAAAA,EACA1sB,IAAAA,GAGA,OAAAstB,GAGA,QAAAC,KACApB,EAAA,SAAA9I,GACA,GAAApW,GAAA6e,EAAAzI,GACAmK,EAAAvgB,EAAAif,SACAnV,EAAAyW,EAAA5vB,QAAAmuB,EAEA,MAAAhV,GACAyW,EAAA7V,OAAAZ,EAAA,KArVA1U,EAAAA,KAEA,IAAAgrB,GAAAhrB,EAAAgrB,SACArB,EAAA3pB,EAAA2pB,SACAI,EAAA/pB,EAAA+pB,iBACAtW,EAAAzT,EAAAyT,QACAmX,EAAA5qB,EAAA4qB,QAAA,EAEAtB,KACAO,KACAX,GAAA,EACAM,GAAA,EACAmB,EAAA,KACA/sB,GAAAorB,SAAA,GAIAU,GACAsB,SAAAA,EACAptB,KAAAA,EACAD,IAAAA,EACA8C,IAAAA,EACA4pB,QAAAA,EACAR,SAAAA,EACA3kB,OAAAA,EACAgmB,QAAAA,EACAlB,cAAAA,EAGAF,GAAA,SAAA9I,GACAyI,EAAAzI,GAAA6I,SAAA/tB,KAAA4tB,KAGAkB,IACApb,EAAA,iBACA+Y,EAAA,WACA/Y,EAAA,WACA6a,OAIA5W,GACAoV,EAAA7oB,EAAAtF,MAgTA,IAAA0wB,IACAV,OAAA,WACAL,GAAAK,QAAA,KAMA,OAFAvzB,GAAAI,OAAAqG,EAAAwtB,GAEA1B,EAGA,QAAA2B,GAAA3yB,EAAA4yB,GAyCA,QAAAC,GAAAhkB,EAAAoE,GAEA,GAAAnL,GAAA,YAAAmoB,GAiBA,IAfAhd,EAYApE,EAAAwgB,EAAAxgB,IATAoE,EAAApE,EACAA,EAAA+gB,EAAA3c,GAEAvS,EAAAuS,KACAA,EAAAA,EAAAA,EAAA5U,OAAA,MAQAoC,EAAAwS,GACA,KAAA,IAAA9U,OAAA,0GAGA,IAAA6yB,GAAA8B,GACAR,SAAAxqB,EACAiT,QAAA9H,EACAoe,aAAAxiB,EACAqjB,OAAA,EACAjB,SAAAlB,GAKA,OAAAiB,GAAA9rB,KAGA,QAAA4tB,GAAAxrB,GACA,GACA0pB,GADAsB,EAAAhrB,EAAAgrB,QAGA,KAAAA,EACA,KAAA,IAAAn0B,OAAA,gEAaA,OAVA6yB,GAAAd,EAAA5oB,GAEA5G,EAAA4xB,GACA9qB,EAAA8qB,EAAA,SAAAxqB,GACAioB,EAAA3nB,IAAAN,EAAAkpB,EAAAxkB,OAAA1E,MAGAioB,EAAA3nB,IAAAkqB,EAAAtB,GAGAA,EAcA,QAAA+B,GAAAjrB,EAAAkrB,GACAA,EAAAA,GAAAlrB,CAEA,IAAAmrB,GAAAnrB,EAAA,MAGAorB,GAAAprB,EAAA9H,EAAAmzB,MAAAH,IACAE,EAAAD,EAAA,KAEA,IAAAjC,GAAAjB,EAAA9qB,IAAA6C,GACAsrB,EAAArD,EAAA9qB,IAAAguB,EAWA,OATAjzB,GAAAqzB,OAAAL,EAAA,SAAA5C,EAAAC,GACAD,IAAAC,IACAW,EAAAjpB,IAAAqoB,GAGAgD,EAAArrB,IAAAsoB,MAIAW,EAAA9rB,KAWA,QAAAguB,GAAAprB,EAAA9F,GACA,GAAA+Y,GACAlM,EACAmiB,CAEA,IAAAjB,EAAA9qB,IAAA6C,GACA,KAAA,IAAA3J,OAAA,6BAAA2J,EAAA,sBAyBA,QAtBArH,EAAAuB,IAAAtB,EAAAsB,IAAAvB,EAAAuB,EAAAA,EAAA3D,OAAA,OAGA0c,EAAA/Y,EACA6M,EAAA+gB,EAAA7U,GACA/Y,EAAA+gB,OAEAriB,EAAAqa,KACAA,EAAAA,EAAAA,EAAA1c,OAAA,KAIA2yB,EAAA8B,GACAR,SAAAxqB,EACAiT,QAAAA,EACA/Y,MAAAA,EACAqvB,aAAAxiB,EACAoiB,SAAAlB,IAKAiB,EAAA9rB,KASA,QAAA6C,GAAAD,EAAA9F,GAEA,GAAA,gBAAA8F,GACA,KAAA,IAAA3J,OAAA,kDAAA2J,EAGA,IAAAkpB,GAAAjB,EAAA9qB,IAAA6C,EAEA,KAAAkpB,EACA,KAAA,IAAA7yB,OAAA,sCAAA2J,EAGAkpB,GAAAjpB,IAAA/F,GAGA,QAAAwuB,GAAA1oB,GACA,GAAAkpB,GAAAjB,EAAA9qB,IAAA6C,EAEA,KAAAkpB,EACA,KAAA,IAAA7yB,OAAA,0BAAA2J,EAAA,oBAGAkpB,GAAAW,SAAAK,QAAA,IAGA,QAAAQ,KACA,GAAAc,GAAAvD,EAAAC,KAEAxoB,GAAA8rB,EAAA,SAAAtC,GACAA,EAAAwB,YAIA,QAAAe,GAAAvzB,GACA,MAAA2yB,GAAA3yB,EAAA+vB,GArNA,GAAAA,GAAAD,EAAA8C,EA0NA,OAFA5yB,GAAAwzB,IAAA,WAAAhB,IAGAiB,WAAA1D,EACA8C,QAAAA,EACAK,QAAAA,EACAnrB,IAAAA,EACAyoB,QAAAA,EACAuC,WAAAA,EACAW,SAAAH,GAvlBA,GAAA3oB,GAAA,CA2lBA,QACAlG,OAAAiuB,GAIA,MAAAhD,GAAAF,EAAAG,SAAA,SAAAzD,GACAnrB,EAAA2yB,WAAAxH,OAMA,OAFAjvB,GAAA6d,QAAA,aAAAyU,GAEAtyB,EAGA,GAAA,kBAAAC,SAAAA,OAAAC,IACAD,OAAA,uBAAA,WAAA,SAAAsB,GACA,MAAA2wB,GAAA3wB,SAGA,CAAA,GAAAskB,eAAAtkB,GAGA,KAAA,IAAAN,OAAA,4EAFAixB,GAAA3wB,KAIAA,SACAtB,OC5rBA,yBAAA,WACA,YACA,QACA,wBACA,wBACA,SACAy2B,EACAC,GAGA,IAAA,GADAC,IAAA,YAAA,MAAA,OAAA,SAAA,OAAA,SACA51B,EAAA,EAAAA,EAAA41B,EAAAz1B,OAAAH,IACA01B,EAAAG,cAAAF,EAAAG,cAAAF,EAAA51B,IAAA41B,EAAA51B,QCVAf,OAAA,6BAAA,WAAA,MAAA,43FCAAA,OAAA,sDAAA,WAAA,MAAA,21CCDAA,ODGA,qBCFA,UACA,sBAEA,SACAsB,EACAhB,GAEA,YAEA,IAAAw2B,GAAAx1B,EAAAvB,OAAA,yBAsGA,OApGA+2B,GAAAjyB,MAAA,aAAAvE,EAAAkG,QAEAswB,EAAAjyB,MAAA,UAAAvE,EAAAmG,MAEAqwB,EAAAlZ,QAAA,oBACA,aAAA,YAAA,aAAA,gBACA,SAAA/Z,EAAAkzB,EAAAC,EAAAC,GAEA,QAAAC,GAAAltB,GACA7H,KAAAg1B,SAAA,GAAA72B,GAAAkG,OAAAuD,WAAAC,GAmEA,MAhEA1I,GAAA+I,SAAA,OAAA,MAAA,OAAA,MAAA,MAAA,UAAA,QAAA,SAAAM,GACAusB,EAAA90B,UAAAuI,GAAA,SAAArD,EAAA6C,GACA,GAAAA,EAAAzC,KAAA,CAIA,IAAA7D,EAAAuzB,eACA,MAAAjtB,GAAAzC,KAAA,GAAA1G,OAAA,qBAGA,IAAA0sB,GAAAvjB,EAAAzC,IAEAyC,GAAAzC,KAAA,SAAAM,EAAA+O,GAEA,QAAAsgB,KAEA,MAAArvB,IAAA,MAAAA,EAAAglB,QAEAnpB,EAAAyzB,WAAA,yBAAA,MAEAzzB,EAAAuzB,eAAA,KAGAJ,GACA,kBACA,4BACAvC,KAAA,SAAA8C,GACAN,EAAAO,UACAxK,OAAAuK,EAAAE,gBACAluB,QAAAguB,EAAAG,wBACAC,WAAA,UAMA9zB,GAAAyzB,WAAA,sCAKA5J,GAAA1lB,EAAA+O,GAGA,GAAAjT,GAAAD,EAAAE,OAEA,YAAAD,GAAA,YAAAA,EACAD,EAAAG,OAAAqzB,GAGAA,KAIAl1B,KAAAg1B,SAAAxsB,GAAArD,EAAA6C,OAIA7I,EAAA+I,SAAA,KAAA,OAAA,MAAA,WAAA,SAAAM,GACAusB,EAAA90B,UAAAuI,GAAA,WACAxI,KAAAg1B,SAAAxsB,GAAAtI,MAAAF,KAAAG,cAIA40B,KAIAJ,EAAAlZ,QAAA,UACA,mBACA,UACA,MACA,SAAAga,EAAAC,EAAAC,GAEA,GAAA/rB,IACAR,OAAA,yBACAxB,WAAA6tB,EACApsB,OAAAssB,EAAAC,OAAA,WAEA,IAAAF,EAAAG,aACA,IAAA,GAAA/rB,KAAA4rB,GAAAG,aACAjsB,EAAAE,GAAA4rB,EAAAG,aAAA/rB,EAIA,OAAA,IAAA3L,GAAAkG,OAAAuF,MAGA+qB,IAGA92B,OCnHA,kDACA,WAEA,YAEA,QACA,aACA,wBACA,gBACA,SACAg3B,EACAiB,EACAhB,GAGAgB,EACAC,SACAzD,KAAA,WACAuC,EAAA,cAAAvC,KAAA,SAAA0D,GACAlB,EAAAmB,KACApL,OAAAmL,EACAR,WAAA,YCrBA33B,OD8BA,iDC7BA,WAEA,YAEA,QACA,SACA,aACA,wBACA,gBACA,SACAmD,EACA6zB,EACAiB,EACAhB,GAGA,QAAAoB,KACArB,EAAA,aAAAvC,KAAA,SAAA0D,GACAlB,EAAAqB,YACAC,SAAA,IACAvL,OAAAmL,EACAR,WAAA,MAKA,QAAAa,KACAxB,EAAA,qBAAAvC,KAAA,SAAA0D,GACAlB,EAAAO,UACAxK,OAAAmL,EACAt1B,MAAAM,MAKAA,EAAAs1B,MAAA,WACAR,EACAQ,MAAAt1B,EAAAu1B,SAAAv1B,EAAA+Q,UACAugB,KAAA4D,EAAAG,QAOAx4B,OC9CA,sBACA,UACA,gCACA,eAEA,oCACA,oCACA,SACAsB,EACAquB,EACAgJ,EAEAC,EACAC,GAEA,YAUA,IAAAC,GAAAx3B,EAAAvB,OAAA,qBACA4vB,EAAAhlB,KACAguB,EAAAhuB,MAcA,OARAmuB,GAAAC,WAAA,oBAAAH,GAKAE,EAAAC,WAAA,mBAAAF,GAGAC,IAIA94B,OAAA,yBC5CA,uBACA,gDACA,mBACA,SACAg5B,EACAC,GAEA,YAEA,QACA,iBACA,SACAC,GAGAA,EACAlE,KAAA,KACAmE,SAAAH,EACAD,WAAA,sBACA3B,eAAA,WACAgC,gBAAA,IAGApE,KAAA,UACAmE,SAAAF,EACAF,WAAA,qBAGA/D,KAAA,WACAmE,SAAAF,EACA7B,eAAA,WACA2B,WAAA,sBAGAM,WACAC,WAAA,UAMAt5B,OAAA,0BAAA,SAAA,WAAA,SAAAu5B,EAAAj4B,GCzCA,YAEA,OAAA,UAAA+C,EAAAm1B,GAEAn1B,EAAAuZ,QAAA,gBAAA,KAAA,QAAA,gBACA,SAAA2U,EAAAkH,EAAAxC,GACA,MAAA,UAAA9sB,GAEA,IAAAA,IAAA7I,EAAAo4B,SAAAvvB,EAAAwvB,UAAAr4B,EAAAo4B,SAAAvvB,EAAAyvB,QACA,KAAA,IAAA54B,OAAA,6DAGA,IAAA64B,GAAAtH,EAAAuH,OA2BA,OAzBAL,GAAAn4B,EAAAI,QACA2H,KACAc,EAAAwvB,OACAxvB,EAAAtI,IACAsI,EAAAyvB,QACAroB,KAAA,IACAnI,OAAA,MACA3B,OAAA,IACA0C,EAAAsvB,QAAAM,QAAA,SAAAhyB,GACA,kBAAAoC,GAAA2L,UACA3L,EAAA2L,SAAA,KAAA/N,EAAAoC,EAAAtI,KAEAg4B,EAAArF,QAAAzsB,EAAAiyB,UACA9wB,MAAA,SAAAnB,GACA,kBAAAoC,GAAA2L,UACA3L,EAAA2L,SAAA/N,EAAA,KAAAoC,EAAAtI,KAGAo1B,EAAAO,UACAxK,OAAA,sCACAzjB,QAAA,IAAAY,EAAAtI,IAAA,uEAEAg4B,EAAAI,OAAA9vB,EAAAtI,OAGAg4B,EAAAtF,YAIAlwB,EAAA2F,QACA,qBACA,wBACA,SACAkwB,EACAxD,GAEA,GAAAyD,GAAAzD,EAAA0D,sBACAC,EAAA3D,EAAA4D,mBAEAJ,GAAAK,UAAA,gBACAZ,OAAAH,EAAA,yBACAI,OAAA,QACA9jB,SAAA,SAAA9N,EAAAD,EAAAyyB,IACAxyB,GAAAD,GAAAA,EAAA0yB,aACAlB,EAAAmB,KAAAF,GAAAH,EAAAtyB,EAAA0yB,gBAKAP,EAAAS,8BAAAR,GACAD,EAAAU,iBAAAP,GAEAH,EAAAW,2BAAA,WACA,GAAAC,GAAA36B,OAAA46B,UACAC,IAAA15B,EAAAiC,QAAAu3B,EAAAG,WAAAH,EAAAG,UAAA,GACAH,EAAAI,UACAJ,EAAAK,iBACAL,EAAAM,gBACAN,EAAAO,eACA,IAAA9W,MAAA,KACA1F,EAAAsb,EAAAz0B,QAAApE,EAAAg6B,UAAAN,EAAA,IACA,OAAAnc,GAAA,GACAsb,EAAAtb,GAEAwb,UAOAr6B,OCtFA,4BAAA,WACA,YAEA,QACA,mBACA,SACAu7B,GAEAA,EAAApxB,SACAqxB,cAAA,EACAC,WAAA,UCVAz7B,OAAA,uBACA,WACA,WAGA,YAGA,OAAA,UAAAqE,EAAA2F,GAEA3F,EAAA2F,QACA,cACA,SACA0xB,GAGAA,EAAA1X,QAAA,WAAA,YACA0X,EAAA1X,QAAA,SAAAha,EAAA2xB,MACAD,EAAA1X,QAAA,eAAAha,EAAA,YAAA,eACA0xB,EAAA1X,QAAA,kBAAAha,EAAA,YAAA,kBACA0xB,EAAA1X,QAAA,iBAAAha,EAAA,YAAA,iBACA0xB,EAAA1X,QAAA,WAAAha,EAAA,cACA0xB,EAAA1X,QAAA,YAAAha,EAAA,aAAA,WACA0xB,EAAA1X,QAAA,YAAAha,EAAA,eAEA0xB,EAAA1X,QAAA,WAAA,UAAA,SAAA6T,GACA,GAAA+D,GAAA/D,EAAAhM,SAAA8P,KAEAxV,EAAAyV,EAAAzV,MAAA,8BACA,IAAAA,EACA,MAAAA,GAAA,EAEA,MAAA,IAAAnlB,OAAA,uCAOAhB,OCvCA,4CACA,WACA,WAGA,YAEA,IAAA67B,GAAA,WAEA,QAAAA,KAEA15B,KAAA25B,gBAAA,KAIA,MAAAD,KAIA,QACA,SACA,SACA14B,GAIAA,EAAA44B,YAAA,GAAAF,OC1BA77B,OAAA,6CACA,WACA,SACAsB,GAEA,YAEA,SAAA06B,GAAAC,GACA,OACAC,gBAAA,WACAD,EAAA5I,QAAA,cAKA,OACA,SACA,KACA,YACA,YACA,SACA,aACA,SACA,SACAlwB,EACAovB,EACAwE,EACAoF,EACAC,EACAC,EACAC,GAGA,QAAAC,GAAAC,GACA,GAAAJ,GAAArF,EAAAqF,YACA,OAAAA,GAAAI,IAAA,KAGA,QAAAC,GAAAh1B,GACA20B,EAAAK,eAAAh1B,GAGAtE,EAAAkzB,IAAA,WAAA,WACAlzB,EAAA44B,YAAAD,gBAAA,MAIA,IAAAG,GAAA94B,EAAA84B,aAAAI,EAAA90B,OAAApE,EAGAA,GAAA44B,cACA54B,EAAA44B,YAAAD,gBAAAE,EAAAC,GAIA,IAQAS,GARA7pB,EAAA0pB,EAAA,QACAI,EAAAJ,EAAA,cAGArtB,EAAAotB,EAAAnwB,SAAA,UACAmG,EAAAgqB,EAAAnwB,SAAA,OAUA8vB,GAAAlG,QAAA,WAAA,WACA,GAAA8D,GAAAtH,EAAAuH,OAeA,OAbA5qB,GAAA1H,MACAo1B,WAAA,EACAC,YAAA,QACA,SAAA70B,EAAAwa,GACAxa,EACA6xB,EAAAI,OAAAjyB,GAIA6xB,EAAArF,QAAAhS,KAIAqX,EAAAtF,WAGA0H,EAAAlG,QAAA,iBAAA,UAAA,SAAA+G,GAKA,IAAA,GAHAC,GAGA1tB,EAFAF,EAAAotB,EAAA,UAEAx7B,EAAA,EAAAsO,EAAAytB,EAAA/7B,GAAAA,IAAA,CAEA,GAAAoO,IAAAE,EAAA5B,GAAA,CACAsvB,EAAA1tB,CACA,SAGA0tB,GAAA1tB,EAAAsQ,WAAAqd,SAAAD,EAAApd,WAAAqd,YACAD,EAAA1tB,GAIA,GAAAqtB,GAAAA,EAAAjvB,KAAAsvB,EAAAtvB,GAAA,CACA,GAAAwvB,GAAAV,EAAA,OACAU,IACAR,GACAS,KAAA,MAWA,MANAH,IAAAA,EAAAtvB,KAAA0B,GACAstB,GACAptB,OAAA0tB,EAAAtvB,KAIAnM,EAAAwkB,KAAAiX,MAIAd,EAAAlG,QAAA,eACAoH,oBACAC,iBACAC,2BAGApB,EAAAlG,QAAA,iBAAA,gBAAA,cAAA,SAAA2G,EAAAY,GACA,IAAAZ,EACA,MAAA,KAGA,IAAAa,GAAAj8B,EAAAwkB,KAAAwX,GAEAl1B,EAAA,KAAAm0B,EAAA,SAAA,GAAA,GACAiB,EAAAjB,EAAA,UACA,KACAiB,EAAA9zB,KAAAC,MAAA6zB,GAEA,MAAAx1B,GACAw1B,OAYA,MAVAA,GAAA1uB,MAAAvL,QAAAi6B,IAAAA,EAAAt8B,OAAAs8B,OACAA,EAAA,GAAAC,UAAAD,EAAA,GAAAC,WAAA,OACAD,EAAA,GAAAE,OAAAF,EAAA,GAAAE,QAAA,UAEAH,EAAA9vB,GAAAivB,EAAAjvB,GACA8vB,EAAAn1B,YAAAA,EACAm1B,EAAAj1B,WAAA,GACAi1B,EAAAC,QAAAA,EACAD,EAAAI,QAAA,EAEAJ,KAOAtB,EAAAlG,QAAA,YAAA,gBAAA,SAAAwH,GACA,GAAA1D,GAAAtH,EAAAuH,OAoBA,OAlBAyD,IAAA,OAAAA,EAAA9vB,GASAyB,EAAAE,SAAA9N,EAAAwkB,KAAAyX,GAAA,SAAAv1B,EAAAwa,GACAxa,EACA6xB,EAAAI,OAAAjyB,GAGA6xB,EAAArF,QAAAhS,KAZAqX,EAAArF,SACA5sB,MAAA,EACA4K,eAcAqnB,EAAAtF,WAMA0H,EAAAlG,QAAA,UAAAljB,OAAAA,IAMAopB,EAAAlG,QAAA,QAAA,SAAA,SAAAtjB,GAEA,GAAAonB,GAAAtH,EAAAuH,QAEAjnB,EAAAJ,EAAAI,MAiBA,OAfA,gBAAAA,GACAgnB,EAAArF,QAAA,MAGAliB,EAAAxK,IAAA+K,EAAA,SAAA7K,EAAAwa,GACAxa,EACA6xB,EAAAI,OAAAjyB,GAGA6xB,EAAArF,QAAAhS,KAMAqX,EAAAtF,WAMA0H,EAAAvG,QAAA,gBAAA,SAAAkI,GACAlB,EAAAkB,GAOA,IAAAC,EACA5B,GAAAvG,QAAA,gBAAA,SAAAgH,GAEAmB,GACA1B,EAAA2B,OAAAD,GAGAnB,GAAAA,EAAA/c,WAAAoe,UACAF,EAAA1B,EAAA,WAEAh5B,EAAA44B,aAAA54B,EAAA44B,YAAAD,gBACA34B,EAAA44B,YAAAD,gBAAAI,kBAIAC,EAAA2B,OAAAD,IAGA,QASA16B,EAAAkzB,IAAA,gBAAA,WACA,GAAA2H,GAAAnrB,EACAorB,EAAAtB,CAEA9pB,GAAA0pB,EAAA,QACAI,EAAAJ,EAAA,eAEAyB,IAAAnrB,GAAAorB,IAAAtB,IACAV,EAAArxB,IAAA,UAAAiI,OAAAA,IAGA6pB,EAAA,KACAT,EAAA5I,QAAA,uBAKArzB,OCnRA,uDAAA,WACA,YACA,QAAA,SAAA,gBAAA,aACA,SAAAs8B,EAAArF,EAAAD,GACA,GAAA1kB,GAAAgqB,EAAAnwB,SAAA,OASA,OAAA,UAAA1E,GACAA,EAAA0L,WAAA1L,EAAAy2B,mBAAAz2B,EAAA0Q,iBAGA7F,EAAA9K,KAAAC,EAAA,SAAAO,EAAAD,GACA,GAAAA,EAAAyK,UAAAC,KAAAvR,OAAA,EAAA,CAEA,IAAA,GAAAuR,GADAqc,EAAA,GACA/tB,EAAA,EAAA0R,EAAA1K,EAAAyK,UAAAC,KAAA1R,GAAAA,IACA+tB,GAAA,uBAAArc,EAAAhF,GAAA,iDAAAgF,EAAA9H,KAAA,QAEAqsB,GAAAvvB,EAAAy2B,kBAAA,sBAAA,oBAAAzJ,KAAA,SAAA0D,GACAlB,EAAAqB,YACAC,SAAA,KACAvL,OAAAmL,EACA5uB,QAAAulB,EAAAnjB,MAAA,EAAA,gBASA3L,OCpCA,+CAAA,WAAA,WACA,YAEA,IAAAgK,GAAA7J,OAAAg+B,gBACAC,GACAC,YACAC,UAAA,OACAC,IAAA,KACAC,KAAA,MACAC,OAAA,MACAC,OAAA,OACAC,QAAA,MAEAC,SACAC,kBAAA,MACAC,eAAA,MAGA,QAAA,WACA38B,KAAA00B,cAAA,SAAAkI,GACA,GAAAC,GAAAh1B,EAAAq0B,YAAAD,EAAAC,UACA,OAAAW,GAAAD,IAAAX,EAAAC,WAAAU,IAGA58B,KAAAm4B,kBAAA,WACA,MAAAtwB,GAAA40B,SAAA50B,EAAA40B,QAAAE,eACA90B,EAAA40B,QAAAE,eAEAV,EAAAQ,QAAAE,gBAIA38B,KAAAi4B,oBAAA,WACA,MAAApwB,GAAA40B,SAAA50B,EAAA40B,QAAAC,iBACA70B,EAAA40B,QAAAC,iBAEAT,EAAAQ,QAAAC,kBAIA18B,KAAA88B,eAAA,WACA,MAAAj1B,GAAAk1B,gBAIA/8B,KAAAg9B,KAAA,WACA,MAAAh9B,WC7CAnC,OAAA,kEAAA,WAAA,MAAA,6xGCAAA,OAAA,2EAAA,WAAA,MAAA,qjECAAA,OAAA,sDACA,UACA,qCACA,2DACA,SACAsB,EACA63B,EACAiG,GAEA,YAGA,QACA,SACA,UACA,MACA,SACAC,EACAxH,EACAC,GAGA,OACAqB,SAAAA,EAEAt2B,OACA6O,UAAA,IACA4tB,iBAAA,KAGA/6B,KAAA,SAAA1B,GACAA,EAAA08B,uBACA18B,EAAA28B,mBACA38B,EAAA48B,UAAA,EACA58B,EAAA68B,oBAAA,EAEA78B,EAAA88B,OAAA,SAAAC,GACA/8B,EAAA48B,UAAA58B,EAAA48B,SACAG,GAAAA,EAAAC,gBACAD,EAAAC,iBAEAD,EAAAE,mBAGAj9B,EAAAk9B,UAAA,SAAArhB,EAAAkhB,GACAA,EAAAC,iBACAD,EAAAE,kBACAT,EAAAvO,MACAqI,SAAAiG,EAEAY,YAAA,wBAEAxL,SACAyL,QAAA,WAAA,MAAAvhB,KAGAqa,WAAA,0CAIAl2B,EAAAq9B,SAAA,SAAAxhB,EAAAkhB,GACAA,EAAAC,iBACAD,EAAAE,iBACA,IAAAv7B,GAAAma,EAAAyhB,OAAA9/B,KAAAs7B,KAAA,OACAp3B,GAAAuzB,EAAAC,OAAA,0BAAAxzB,GACAszB,EAAA/G,KAAAvsB,EAAA,aAGA1B,EAAAy8B,mBACAz8B,EAAA08B,oBAAA18B,EAAAy8B,iBAAA5tB,cAIApQ,EAAA+I,QAAAxH,EAAA6O,UAAA,SAAAgN,GACA7b,EAAA28B,gBAAA9gB,EAAA/T,MAAA+T,IAGA7b,EAAA68B,oBAAAl2B,OAAAC,KAAA5G,EAAAy8B,iBAAAc,sBAAAv9B,EAAA08B,oBAAA18B,EAAA28B,iBAAAt+B,cAOAlB,OCrFA,+DACA,WACA,WAGA,YAEA,QACA,SACA,QACA,MACA,UACA,SACAmD,EACAs2B,EACA3B,EACAmI,GAeA,OAZA98B,EAAAkzB,IAAA,yBAAA,WACAlzB,EAAAk9B,aAGAl9B,EAAA0B,MAAA,KACA1B,EAAAm9B,kBAAA,KACAn9B,EAAAo9B,qBAAA,KACAp9B,EAAAgC,KAAA,KACAhC,EAAAq9B,WAAA,KACAr9B,EAAAub,SAAAuhB,EACA98B,EAAAs9B,YAAA,aAEAt9B,EAAAub,SAAAvZ,MACA,IAAA,SACAhC,EAAAgC,KAAAhC,EAAAub,SAAAvD,UAAAulB,eACAv9B,EAAA0B,MAAA1B,EAAAub,SAAA7Z,MACA1B,EAAAq9B,WAAAr9B,EAAAub,SAAAvD,UAAA2D,wBAGA2a,GACArwB,OAAA,MACAC,IAAAyuB,EAAAC,OAAA,0BAAA50B,EAAAub,SAAAyhB,OAAA9/B,KAAAs7B,QACA5B,QAAA,SAAAhyB,GACA5E,EAAAm9B,kBAAA52B,KAAAgP,UAAA3Q,EAAAlD,SACAqE,MAAA,SAAAnB,GACA5E,EAAAo9B,qBAAAx4B,EAAAwB,SAGA,MAEA,SACApG,EAAA0B,MAAA1B,EAAAub,SAAA7Z,MAGA1B,EAAAw9B,UAAA,SAAAC,GACAz9B,EAAAs9B,YAAAG,OC/CA,WACA,YAEA,SAAAC,GAAAv/B,EAAAi4B,GASA,MAAAj4B,GAAAvB,OAAA,oBASA+gC,SAAA,uBAWAC,WAAA,KAYAC,SAAA,GAaAC,OAAA,KAaAC,iBAAA,IAUAJ,SAAA,SAAAvH,GAUAuH,SAAA,mBAUAK,eAAA,EAYAC,WAAA,KAYAC,YAAA,OAUA/8B,UAAA,aAAA,UAAA,SAAA,WAAA,kBAAA,sBAAA,SAAAuzB,EAAA0B,EAAA+H,EAAAC,EAAAC,GAEA,MAAA,UAAA3+B,EAAAd,EAAAC,GAaA,QAAAy/B,KACA,GAAAtqB,EACA,IAAAoqB,EAAAH,WAAA,CACA,GAAAM,IAAA,GAAAxqB,OAAAyqB,UACAC,EAAAF,EAAAG,EAAAN,EAAAH,UACAjqB,GAAAoiB,EAAAqI,OAGAzqB,GAAAoiB,GAEA,OAAApiB,GAGA,QAAA2qB,KACAC,IACAlK,EAAAzI,aAAA2S,GACAA,EAAA,MAIA,QAAAC,GAAAC,GAOA,GANAlgC,EAAA6H,KAAAq4B,EAAAC,KAAAT,IAAAN,IAEAE,IAAAt/B,EAAAC,KAAA,UACAD,EAAAC,KAAA,QAAAigC,EAAApP,QAAAoO,OAAAI,KAGAc,EAAA,CAEA,GAAAC,GAAA3oB,KAAA6R,IAAAmW,IAAAY,KAAAJ,EAAA,WACAK,EAAA,IACA,GAAAF,EACAE,EAAA,EACA,GAAAF,EACAE,EAAA,GACA,IAAAF,IACAE,EAAA,KAGAP,EAAAlK,EAAAhH,WAAA,WACAmR,EAAAC,IACA,IAAAK,IAIA,QAAAC,GAAA19B,GACA29B,GACAzgC,EAAAC,KAAA,WAAA6C,GAIA,QAAA49B,KAEA,GADAX,IACAY,EAAA,CACA,GAAAC,GAAArB,EAAAsB,eAAAF,EAAA3B,EAAA8B,EACAb,GAAAW,GACAJ,EAAAI,EAAAG,gBApEA,GACAJ,GASAK,EAVAhB,EAAA,KAEAc,EAAArB,EAAAP,OACAE,EAAAI,EAAAJ,cACAE,EAAAE,EAAAF,YACAQ,GAAA,GAAA3qB,OAAAyqB,UACAZ,EAAAS,EAAAT,WACAiC,EAAAhhC,EAAAihC,UAAAjf,QAAA,MAAA,IACAme,EAAA,IAAAngC,EAAAihC,UAAAv9B,QAAA,MACA88B,EAAA,SAAAzgC,EAAA,GAAAmhC,SAAAC,aA+DAJ,GAAAlgC,EAAAqzB,OAAA8M,EAAA,SAAAn+B,GACA,MAAA,mBAAAA,IAAA,OAAAA,GAAA,KAAAA,GACAi9B,SACAY,IACA3gC,EAAA6H,KAAA,IACA24B,EAAA,IACAG,EAAA,SAKAA,EAAA79B,EACA49B,SAEA7c,SAAA/gB,GAAAs9B,GACAY,QAIAzhC,EAAA8hC,UAAAphC,EAAAqhC,kBACAxgC,EAAAqzB,OAAAl0B,EAAAqhC,gBAAA,SAAAx+B,GACA,iBAAAA,IACAs8B,EAAAt8B,EACA49B,KAEAtB,EAAAI,EAAAJ,gBAKAn/B,EAAAkE,SAAA,WAAA,SAAA+6B,GACA,mBAAAA,KACA4B,EAAA5B,EACAwB,OAIAzgC,EAAAkE,SAAA,eAAA,SAAA+sB,GACA8N,EAAA9N,EACAwP,MAGA5/B,EAAAwzB,IAAA,WAAA,WACAyL,MAGAj/B,EAAAwzB,IAAA,yBAAA,WACAoM,UAUAa,QAAA,YAAA,SAAA,aAAA,OAAA,sBAAA,SAAA/J,EAAA11B,EAAA0/B,EAAA/B,GAUAr/B,KAAAqhC,eACAC,IAAAlK,EAAAkK,IACAC,KAAAnK,EAAAmK,MAcAvhC,KAAAwhC,aAAA,SAAAnJ,GACA,GAAAzjB,GAAAwiB,EAAAiB,OAAAA,EAKA,OAJAl5B,GAAA8hC,UAAA5I,IACA32B,EAAAyzB,WAAA,0BAGAvgB,GAiBA5U,KAAAygC,eAAA,SAAA/9B,EAAAk8B,EAAAE,GAIA,MAHA3/B,GAAAsiC,YAAA7C,KACAA,EAAAS,EAAAT,YAEA5+B,KAAAqhC,cAAAzC,GACA5+B,KAAAqhC,cAAAzC,GAAAl8B,EAAAo8B,IAEAF,GACAwC,EAAAM,KAAA,8DAAA9C,IAEAvf,MAAAhD,WAAA3Z,KAAAyhB,SAAAzhB,GAEA00B,EAAAlxB,SAAAxD,EAAA,KAGA00B,EAAA10B,EAAAo8B,KAeA9+B,KAAA2hC,cAAA,SAAAC,GACA,GAAA/C,GAAAQ,EAAAR,QAQA,OAPA+C,IAAA/C,IACA+C,EAAAC,GACAD,EAAAA,EAAAC,GAAAhD,GAEAuC,EAAAM,KAAA,mHAGAE,MASA10B,OAAA,cAAA,SAAA,WAAA,sBAAA,SAAAkqB,EAAA+H,EAAAE,GACA,QAAAyC,GAAAp/B,EAAAk8B,GACA,GAAA,mBAAAl8B,IAAA,OAAAA,EACA,MAAA,EAGAA,GAAAy8B,EAAAsB,eAAA/9B,EAAAk8B,EACA,IAAAzoB,GAAAihB,EAAA10B,EACA,OAAAyT,GAAA4rB,UAIA5C,EAAAwC,cAAAxrB,GAAA6rB,WAHA,GAUA,MAFAF,GAAAG,UAAA5C,EAAAN,gBAEA+C,KASA50B,OAAA,gBAAA,SAAA,WAAA,sBAAA,SAAAkqB,EAAA+H,EAAAE,GACA,QAAA6C,GAAAx/B,EAAAo8B,EAAAF,GACA,GAAA,mBAAAl8B,IAAA,OAAAA,EACA,MAAA,EAGAA,GAAAy8B,EAAAsB,eAAA/9B,EAAAk8B,EACA,IAAAzoB,GAAAihB,EAAA10B,EACA,OAAAyT,GAAA4rB,UAIA5C,EAAAwC,cAAAxrB,GAAA2oB,OAAAA,GAHA,GAQA,MAFAoD,GAAAD,UAAA5C,EAAAN,gBAEAmD,KASAh1B,OAAA,oBAAA,SAAA,sBAAA,SAAAkqB,EAAAiI,GACA,QAAA8C,GAAAz/B,EAAAo8B,EAAArH,GACA,MAAA,mBAAA/0B,IAAA,OAAAA,EACA,GAGA00B,EAAAhB,SAAA1zB,EAAAo8B,GAAAsD,SAAA3K,GAKA,MAFA0K,GAAAF,UAAA5C,EAAAN,gBAEAoD,KASAj1B,OAAA,aAAA,SAAA,WAAA,sBAAA,SAAAkqB,EAAA+H,EAAAE,GACA,QAAAgD,GAAA3/B,EAAAk8B,EAAAnH,GACA,GAAA,mBAAA/0B,IAAA,OAAAA,EACA,MAAA,EAGAA,GAAAy8B,EAAAsB,eAAA/9B,EAAAk8B,EACA,IAAAzoB,GAAAihB,EAAA10B,EACA,OAAAyT,GAAA4rB,UAIA5C,EAAAwC,cAAAxrB,GAAAmsB,QAAA7K,GAHA,GAQA,MAFA4K,GAAAJ,UAAA5C,EAAAN,gBAEAsD,KAIA,kBAAAxkC,SAAAA,OAAAC,IACAD,OAAA,kBAAA,UAAA,UAAA6gC,GACA,mBAAA9gC,SAAAA,QAAAA,OAAAD,QACA+gC,EAAAv/B,QAAAR,QAAA,WAEA+/B,EAAAv/B,QAAAnB,OAAAo5B,WC7cAv5B,OAAA,0BACA,UACA,sCACA,+CACA,kBACA,SACAsB,EACAojC,EACAC,GAEA,YAEA,IAAAC,GAAAtjC,EAAAvB,OAAA,0BACA,eACA,iBAMA,OAHA6kC,GAAAtgC,UAAA,uBAAAogC,GACAE,EAAA7L,WAAA,uCAAA4L,GAEAC,IC7BA5kC,ODgCA,wDAAA,WC/BA,YAEA,QACA,SACA,QACA,SACAmD,EACA0hC,GAGA1hC,EAAA2hC,cAAAxd,MAAA,iBACAnkB,EAAA4hC,gBAAAF,EAAAG,cAAAC,UAAA,sBCXAjlC,OAAA,wEAAA,WAAA,MAAA,4uDCDAA,ODGA,4DCFA,UACA,4CACA,SACAsB,EACA63B,GAEA,YAEA,SAAA+L,GAAAC,GACA,MAAAz7B,MAAAgP,UAAAysB,EAAAC,IAAA,SAAA5H,GACA,GAAApoB,IACAsoB,OAAAF,EAAA6H,GACA5H,UAAAD,EAAA8H,MAGA,IAAA9H,EAAA6H,GAAA3/B,QAAA,YAAA,GAAA,CACA,IAAA83B,EAAA+H,WACA,KAAA,IAAAvkC,OAAA,oCAEAoU,GAAAmwB,WAAA/H,EAAA+H,WAGA,MAAAnwB,MAIA,OACA,SACA,aACA,YACA,WACA,SACAgnB,EACApF,EACAD,EACAyO,GAEA,OAEAC,SAAA,IAEA5iC,OACAo5B,aAAA,KAGA9C,SAAAA,EAEAJ,YAAA,cAEAx0B,KAAA,SAAA1B,EAAAd,GAeA,QAAA2jC,KACAC,GACAH,EAAA1H,OAAA6H,GAGAA,EAAAH,EAAA,WACA,GAAAI,GAAA7jC,EAAA8jC,QAAA,YACA35B,EAAA05B,EAAAxqB,KAAA,aACA0qB,EAAAF,EAAAxqB,KAAA,iBACA2qB,EAAAC,EAAAC,SAAA,oBAIA,IAFAlkC,EAAAmkC,IAAA,SAAA,QAEAH,EAAA,CACA,GAAAI,GAAA99B,SAAA6D,EAAAg6B,IAAA,cAAA,GAGA,OAFAh6B,GAAAg6B,IAAA,SAAAC,OACAL,GAAAI,IAAA,MAAAC,GAIA,GAAAC,GAAArkC,EAAAqkC,SACAC,EAAAtkC,EAAAgT,QACAsxB,GAAAD,OAAAA,EACA,IAAAE,GAAAF,CAEAl6B,GAAAk6B,OAAAE,GACAR,EAAAI,IAAA,MAAAI,EAAA,IACAX,EAAA,MACA,KAgFA,QAAAY,GAAAzkC,GACA,GAAA0kC,GAAA1kC,EAAAiT,SAAA0xB,WAAAC,KACAC,EAAA7kC,EAAA8kC,aAAAJ,CACAG,GAAA5kC,EAAA6kC,cACA9kC,EAAAokC,IAAA,OAAAnkC,EAAA6kC,aAAAD,EAAA,MA9HA,GAAAX,GAAA1kC,EAAAS,QAAA,QACA8kC,EAAA9kC,EAAAqZ,KAAA,2BAEAvY;EAAAikC,WACAxB,MAAA,OACAD,GAAA,YAGAxiC,EAAAkkC,iBACAlkC,EAAAmkC,iBAAA,EAEAnkC,EAAAokC,WAEA,IAAAtB,EAgCA9iC,GAAAwzB,IAAA,gBAAAqP,GAEA7iC,EAAAqkC,aACAlK,SAAAhG,EAAAmQ,QAAA,YACAC,QAAApQ,EAAAmQ,QAAA,iBACAE,QAAArQ,EAAAmQ,QAAA,YACAG,aAAAtQ,EAAAmQ,QAAA,kBACAI,oBAAAvQ,EAAAmQ,QAAA,aACAh0B,SAAA6jB,EAAAmQ,QAAA,aAGAtkC,EAAA2kC,QAAA,SAAAjb,GACA,IAAA1pB,EAAAikC,SAAAva,GACA,MAAA,EAGA,IAAA8Y,GAAAxiC,EAAAikC,SAAAva,GAAA8Y,EAEA,OAAAxiC,GAAAqkC,YAAA7B,GACAxiC,EAAAqkC,YAAA7B,GAAA5f,cAGA5iB,EAAAikC,SAAAva,IAAA1pB,EAAAikC,SAAAva,GAAAgZ,WAIA1iC,EAAAikC,SAAAva,GAAAgZ,WAAA7mB,SAHA,GASA,IAAAud,GAAAp5B,EAAAo5B,aAAA1F,SAAA1zB,EAEAo5B,GAAAvG,QAAA,gBAAA,SAAA6H,GACA,GAAAA,EAAA,CACA,GAAAkK,GAAA/9B,KAAAC,OAAAotB,EAAAqF,cAAAoB,SAAA,KAEA36B,GAAAokC,YACApkC,EAAAkkC,iBAEAlkC,EAAA6kC,iBAAApmC,EAAAwkB,KAAAjjB,EAAAqkC,aAEArkC,EAAAikC,SAAAW,EAAArC,IAAA,SAAA5H,GACA36B,EAAAokC,SAAAhhC,KAAAu3B,EAAAE,QACA76B,EAAAkkC,cAAA9gC,MAAA,SAEApD,GAAA6kC,iBAAAlK,EAAAE,OAEA,IAAAiK,IACArC,MAAA9H,EAAAC,UACA4H,GAAA7H,EAAAE,OAOA,OAJAF,GAAA+H,aACAoC,EAAApC,WAAA/H,EAAA+H,YAGAoC,IAIA9kC,EAAAikC,SAAA5lC,QACA2B,EAAA+kC,WAAA,WAGAlC,OAKA7iC,EAAAqzB,OAAA,kBAAA,SAAA/e,EAAA0wB,GACA1wB,IAAA0wB,GAAAhlC,EAAAilC,mBAGAjlC,EAAAqzB,OAAA,WAAAwP,GAAA,GAUA7iC,EAAAqzB,OAAA,gBAAA,SAAA/e,GACA,GAAAoV,GAAApV,EAAAzR,SAAA,GACAqiC,EAAAhmC,EACAqZ,KAAA,oCACA8qB,IAAA,OAAA,OACA3Z,GAAA,IAAAwb,EAAAxb,IACAga,EAAAjlC,EAAAS,QAAAgmC,EAAAxb,OAEA,GAEA1pB,EAAAqzB,OAAA,kBAAA,SAAA/e,GACAA,EACAovB,EAAAM,GAGAA,EAAAX,IAAA,OAAA,UAIArjC,EAAAmlC,cAAA,SAAAnpB,EAAApR,EAAAtI,EAAAN,GACAhC,EAAAikC,SAAAjoB,GAAAwmB,GAAA53B,QACA5K,GAAAikC,SAAAjoB,GAAA0mB,WACApgC,IACAtC,EAAAikC,SAAAjoB,GAAA0mB,YACA7mB,SAAA7Z,EACAM,KAAAA,IAIAtC,EAAAilC,kBAGAjlC,EAAAolC,kBACAplC,EAAAqlC,aAAA,SAAArpB,EAAAiS,GACA,GAAAA,EAAA,CACA,GAAA0M,GAAA36B,EAAAikC,SAAAjoB,EACA2e,GACA36B,EAAAolC,eAAAppB,GAAA2e,EAAA6H,GAAA7H,EAAA+H,YAAA/H,EAAA+H,WAAApgC,KAAAq4B,EAAA+H,YAAA/H,EAAA+H,WAAA7mB,UAEA7b,EAAAolC,eAAAppB,OAOAhc,EAAAilC,eAAA,WACAjlC,EAAAkkC,iBACAlkC,EAAAokC,SAAApkC,EAAAikC,SAAA1B,IAAA,SAAA5H,GAEA,MADA36B,GAAAkkC,cAAA9gC,MAAA,GACAu3B,EAAA6H,KAGAjJ,EAAAK,gBACAe,QAAA0H,EAAAriC,EAAAikC,YAGA7K,EAAA5I,QAAA,iBAEAqS,KAMA7iC,EAAA+kC,WAAA,SAAAn6B,EAAAtI,EAAAN,GAEA,GAAAsjC,IACA7C,MAAA,OACAD,GAAA53B,EAEAtI,KACAgjC,EAAA5C,YACA7mB,SAAA7Z,EACAM,KAAAA,IAGAtC,EAAAikC,SAAA7gC,KAAAkiC,GAEAtlC,EAAAilC,kBAMAjlC,EAAAulC,cAAA,SAAA7b,GACA1pB,EAAAikC,SAAArnB,OAAA8M,EAAA,GACA1pB,EAAAilC,kBAMAjlC,EAAAwlC,YAAA,SAAA9b,GACA1pB,EAAAikC,SAAAva,GAAA+Y,MAAA,QAAAziC,EAAAikC,SAAAva,GAAA+Y,MAAA,OAAA,MAEAziC,EAAAilC,wBCpRA9nC,OAAA,yEAAA,WAAA,MAAA,mxBAEAA,OAAA,6DCFA,UACA,6CACA,SACAsB,EACA63B,GAEA,YACA,QAAA,aACA,SAAAnC,GACA,OACAyO,SAAA,IAEAzhB,SAAA,EAEAmV,SAAAA,EAEAt2B,OACAsH,QAAA,IACAm+B,aAAA,IACAC,OAAA,IACAC,cAAA,KAGAjkC,KAAA,SAAApB,GAEAA,EAAAolC,OAAAplC,EAAA6yB,MAAA7yB,EAAAolC,QAEAplC,EAAAub,UACA+pB,QAAA,GACAC,QAAA,WAIAvlC,EAAAwlC,WAAA,WACA,MAAAxlC,GAAAgH,SAAAX,OAAAC,KAAAtG,EAAAgH,SAAAjJ,OAAA,GAIAiC,EAAAylC,eACAzlC,EAAAqlC,cAAA,SAAA/6B,EAAAtI,EAAAN,GACA1B,EAAA0lC,kBAAAp7B,IACAtK,EAAA2lC,UAAAr7B,EACAtK,EAAAub,SAAAgqB,QAAAvjC,EACAhC,EAAAub,SAAA+pB,QAAA5jC,IAEA1B,EAAA2lC,UAAA,KACA3lC,EAAAub,SAAAgqB,QAAA,UACAvlC,EAAAub,SAAA+pB,QAAA,KAIAtlC,EAAA4lC,YAAA,SAAAnkC,EAAA+F,GAEAxH,EAAAmlC,aADAnlC,EAAA0lC,kBAAAl+B,IACAi1B,OAAAh7B,EAAA6I,GAAA9C,EAAAxF,KAAAhC,EAAAub,SAAAgqB,QAAA7jC,MAAA1B,EAAAub,SAAA+pB,UAEA7I,OAAAh7B,EAAA6I,GAAA9C,KAKAxH,EAAA0lC,mBACAG,gBAAAhS,EAAAmQ,QAAA,oBACA8B,kBAAAjS,EAAAmQ,QAAA,sBACA+B,aAAAlS,EAAAmQ,QAAA,iBACAgC,sBAAAnS,EAAAmQ,QAAA,2BACAiC,qBAAApS,EAAAmQ,QAAA,2BAGAhkC,EAAAkmC,WAAA,SAAAzJ,EAAAj1B,GACAi1B,EAAAC,iBACAD,EAAAE,kBACA38B,EAAA2lC,UAAAn+B,SCvEA3K,OAAA,uEAAA,WAAA,MAAA,yzBAEAA,OAAA,2DCFA,UACA,2CACA,SACAsB,EACA63B,GAEA,YACA,QACA,aACA,SACAnC,GAEA,OACAyO,SAAA,KAEAzhB,SAAA,EAEAmV,SAAAA,EAEAt2B,OACA0lC,OAAA,IACAe,aAAA,IACAd,cAAA,IACA9pB,SAAA,KAGAqa,YACA,SACA,SACA51B,GAEAA,EAAAomC,eACAC,QAAAxS,EAAAmQ,QAAA,WACAsC,OAAAzS,EAAAmQ,QAAA,UACAjwB,KAAA8f,EAAAmQ,QAAA,QACAuC,QAAA1S,EAAAmQ,QAAA,WACAwC,KAAA3S,EAAAmQ,QAAA,QACAyC,MAAA5S,EAAAmQ,QAAA,SACA3sB,OAAAwc,EAAAmQ,QAAA,WAGAhkC,EAAA0mC,aAAA,SAAAjlC,GACAzB,EAAAmmC,cAAA1J,OAAAh7B,YC1CA5E,OAAA,8DAAA,WAAA,MAAA,goLCDAA,ODGA,kDCFA,UACA,SACA,kCACA,SACAsB,EACAi4B,EACAJ,GAEA,YACA,IAAA53B,GAAAD,EAAAS,OAEA,QAAA,WAEA,OAEA0jC,SAAA,IACA5iC,OACAo5B,aAAA,KAGA9C,SAAAA,EAEAJ,YACA,SACA,YACA,SACA,WACA,WACA,SACA51B,EACA4zB,EACAqF,EACAoJ,EACAzgC,GAGA,QAAA03B,GAAAh1B,GACA20B,EAAAK,eAAAh1B,GAGA,GAAAqiC,IAAA,CAEA3mC,GAAA4mC,QAAA,EACA5mC,EAAA6mC,SAAA,KACA7mC,EAAA8mC,WAAA,EACA9mC,EAAAgU,KAAA,GAAAD,OAAAsP,SAEArjB,EAAAm8B,iBAAA,IAEA,IAAA4K,GAAA/mC,EAAA84B,aAAA1F,SAAApzB,EAEAA,GAAA2H,SAEA3H,EAAAgnC,YACA,IAAAC,GAAA,SAAAC,GACA,IAAA,GAAAtpC,GAAA,EAAAA,EAAAspC,EAAAnpC,OAAAH,IACAoC,EAAAgnC,UAAAE,EAAAtpC,GAAA0M,IAAA48B,EAAAtpC,GAOAoC,GAAAmnC,MAAAJ,EAAAxU,QAAA,WAAA,SAAA6U,GACApnC,EAAA8mC,WAAAM,EAAA3iC,MACAzE,EAAAoP,MAAAg4B,EAAA/3B,UAAAC,KACA83B,EAAA/3B,UAAAW,UACAi3B,EAAAG,EAAA/3B,UAAAW,UAEA22B,IACA3mC,EAAAqnC,MAAA,KAAArnC,EAAAoP,MAAA,UAAAu3B,EAAA,EAAA3mC,EAAA6mC,SAAA,IACAxE,EAAA,WACAzgC,EACAqW,KAAA,mBACAlT,QAAA,SACAkT,KAAA,aAAA,GACAqvB,gBAAA,IACA,GACAX,GAAA,KAOAI,EAAAxU,QAAA,gBAAA,SAAA6H,GACAA,IAEAp6B,EAAA2H,MAAAxJ,EAAAwkB,KAAAyX,GACAp6B,EAAA6mC,SAAA7mC,EAAA2H,MAAAxC,WAEAnF,EAAA4mC,QAAA5mC,EAAA2H,MAAA1C,YAAAjF,EAAA6mC,SAAA,KAIAE,EAAAxU,QAAA,SAAA,SAAA7iB,GACA1P,EAAAunC,cAAA73B,EAAAA,SAOAq3B,EAAAxU,SAAA,gBAAA,SAAAgH,GACAA,IACAv5B,EAAAm8B,iBAAA,OAAA5C,EAAAA,EAAA/c,WAAA,SAIAxc,EAAAqnC,MAAA,SAAA5K,EAAAntB,GACAmtB,GACAA,EAAAC,gBAGA,IAAAhtB,GAAAJ,EAAAhF,EACAy8B,GAAAt/B,IAAA,UAAAiI,OAAAA,IACA1P,EAAAunC,cAAA73B,CAEA,IAAA83B,GAAA5T,EAAAqF,YACAuO,GAAAl4B,KAAAI,EACA4pB,EAAAkO,GAGA,IAAAC,GAAA,WACA,IAAA,GAAA7pC,GAAA,EAAAA,EAAAoC,EAAAoP,MAAArR,OAAA,EAAAH,IACA,GAAAoC,EAAAoP,MAAAxR,GAAA0M,KAAAtK,EAAAunC,cACA,MAAAvnC,GAAAqnC,MAAA,KAAArnC,EAAAoP,MAAAxR,EAAA,GAGAoC,GAAA4mC,QAAAtwB,KAAAoxB,KAAA1nC,EAAA8mC,WAAA9mC,EAAA6mC,YACA7mC,EAAA4mC,UACAD,EAAA,QACA3mC,EAAA2nC,eAIAC,EAAA,WACA,IAAA,GAAAhqC,GAAA,EAAAA,EAAAoC,EAAAoP,MAAArR,OAAAH,IACA,GAAAoC,EAAAoP,MAAAxR,GAAA0M,KAAAtK,EAAAunC,cACA,MAAAvnC,GAAAqnC,MAAA,KAAArnC,EAAAoP,MAAAxR,EAAA,GAGAoC,GAAA4mC,QAAA,IACA5mC,EAAA4mC,UACAD,EAAA,OACA3mC,EAAA2nC,cAIA3nC,GAAA6nC,cAAA,SAAApL,GACA,KAAAA,EAAAqL,SACArL,EAAAC,iBACA+K,EAAAhL,IAEA,KAAAA,EAAAqL,UACArL,EAAAC,iBACAkL,KAGAvF,EAAA,WACA,GAAA0F,GAAA3pC,EAAAq+B,EAAAxlB,QAAAgB,KAAA,aAAA,EACA8vB,IACAA,EAAAT,gBAAA,MAKAtnC,EAAAgoC,WAAA,SAAA14B,GACA,GAAAkpB,GAAA,WAAAlpB,EAAAhF,GACAkvB,EAAA5F,EAAAqF,SAAAO,UAKA,OAJAA,KACAhB,EAAAA,EAAA,eAAAgB,GAGAhB,GAMAx4B,EAAA2nC,WAAA,WAEArO,GACAS,KAAA/5B,EAAA4mC,UAEAG,EAAA7W,QAAA,kBAGAlwB,EAAAioC,UAAA,WACA3O,GACAS,KAAA,IAEAgN,EAAA7W,QAAA,yBAQArzB,OCzMA,gDACA,UACA,UACA,WAIA,YAEA,QACA,UACA,SAAAqrC,GAIA,QAAAC,GAAAzmC,GACA,MAAAA,GAAAshB,MAAAolB,GAHA,GAAAA,GAAA,iEAMAC,EAAAH,EAAA,UAEA,OAAA,UAAAI,GACA,MAAAA,IAAAH,EAAAG,GACAD,EAAAC,EAAA,QAEAA,EAAAA,EAAA,UCxBAzrC,OAAA,mEAAA,WAAA,MAAA,2NCAAA,OAAA,0EAAA,WAAA,MAAA,2xRAEAA,OAAA,uDCFA,UACA,yCACA,iDACA,SACAsB,EACA63B,EACAuS,GAEA,YAEA,IAAAC,GAAA,kBAEAC,EAAAliC,KAAAC,MAAA+hC,GAEAG,EAAA,SAAAhnC,GACA,MAAA2c,OAAA3c,IAAA,KAAAA,EAAA0Z,OAIA,SAAA1Z,GACA,EAEA,UAAAA,GACA,EAEA,SAAAA,EACA,KAEA,IAAAA,EAAAa,QAAA,MAAAb,EAAAinC,YAAA,OAAAjnC,EAAA3D,OAAA,EACA2D,EAAA0c,OAAA,EAAA1c,EAAA3D,OAAA,GAEA2D,GAdAA,GAiBAknC,EAAA,SAAAlnC,EAAAmnC,GACA,MAAA,SAAAA,GAAA,SAAAA,EACA,IAAAnnC,EAAA,IAEAA,GAGAonC,EAAA,SAAA7P,EAAAj3B,EAAA6mC,EAAAnnC,GACA,GAAAme,GAAA7d,CAQA,OAPA,MAAA,OAAA,SAAA,SAAAO,QAAAsmC,KACAhpB,GAAAgpB,GAEAL,EAAAttB,KAAAxZ,IACA,MAAA,WAAA,QAAA,iBAAA,gBAAA,gBAAAa,QAAAP,KACA6d,GAAA,cAEAA,GAGAkpB,GACA,SACA,aACA,SACA/oC,EACA6zB,GAGA7zB,EAAAgpC,YACAhpC,EAAAo0B,gBAEAj2B,EAAA+I,QAAAuhC,EAAAQ,SAAA,SAAAvnC,EAAAhD,GACAsB,EAAAo0B,aAAA11B,GAAAm1B,EAAAmQ,QAAAtiC,KAGA1B,EAAAyqB,MAAAge,EAAAhe,MAAAwX,IAAA,SAAAtjC,GAQA,MAPAA,GAAA2L,GAAA5I,MAAAmyB,EAAAmQ,QAAArlC,EAAA2L,GAAA5I,OACA/C,EAAAuqC,YACAvqC,EAAAuqC,UAAAvqC,EAAAuqC,UAAAjH,IAAA,SAAAkH,GAEA,MADAA,GAAAznC,MAAAmyB,EAAAmQ,QAAAmF,EAAAznC,OACAynC,KAGAxqC,IAGAqB,EAAAkpC,UAAAT,EAAAS,UACA/qC,EAAA+I,QAAAlH,EAAAkpC,UAAA/zB,KAAA,SAAAxW,GACAA,EAAA+C,MAAAmyB,EAAAmQ,QAAArlC,EAAA+C,QAGA,IAAA0nC,GAAAppC,EAAA84B,aAAA1F,SAAApzB,EACAA,GAAA+yB,OAAA,WAAA,WACA,GAAAprB,KAEAA,GAAAqyB,oBACAryB,EAAAsyB,iBACAtyB,EAAAuyB,yBAEA/7B,EAAA+I,QAAAlH,EAAAgpC,SAAA,SAAA/P,GACA,gBAAAtxB,GAAAsxB,EAAAj3B,KAAAN,MAAAhD,KACAiJ,EAAAsxB,EAAAj3B,KAAAN,MAAAhD,KAAAoE,MACA0E,KAAA,gBAAAyxB,GAAAzxB,KAAA9F,MAAAu3B,EAAAzxB,KAAA9F,MAAAhD,IAAAu6B,EAAAzxB,KAAA9F,MACAmnC,SAAA5P,EAAA4P,SAAAnnC,MAAAhD,IACAgD,MAAAknC,EAAAF,EAAAzP,EAAAv3B,MAAAA,OAAAu3B,EAAA4P,SAAAnnC,MAAAhD,OAGAiJ,EAAAmhC,EAAA7P,EAAAA,EAAAj3B,KAAAN,MAAAhD,IAAAu6B,EAAA4P,SAAAnnC,MAAAhD,IAAAu6B,EAAAv3B,MAAAA,QAAAknC,EAAAF,EAAAzP,EAAAv3B,MAAAA,OAAAu3B,EAAA4P,SAAAnnC,MAAAhD,OAIA0qC,EAAA3hC,IAAA,cAAAE,KACA,GAEAyhC,EAAA7W,QAAA,gBAAA,SAAArmB,GACA/N,EAAA+I,QAAAlH,EAAAyqB,MAAA,SAAA4e,GACAA,EAAAC,iBACA,KAAA,GAAA1rC,GAAA,EAAAA,GAAAsO,EAAAsQ,WAAAjO,WAAArC,EAAAsQ,WAAAjO,UAAAxQ,QAAAH,IAAA,CACA,GAAAga,GAAA1L,EAAAsQ,WAAAjO,UAAA3Q,EACAyrC,GAAAC,eAAAxmC,MACApE,IAAAkZ,EAAApQ,KACA9F,MAAAkW,EAAA2xB,MAAA,KAAA3xB,EAAApQ,KAAA,SAKArJ,EAAA+I,QAAAlH,EAAAgpC,SAAA,SAAAK,GACAA,EAAAC,eAAAtpC,EAAAyqB,MAAAve,OAAA,SAAAlK,GACA,MAAAA,GAAAsI,GAAA5L,MAAA2qC,EAAArnC,KAAAN,MAAAhD,MACA,GAAA4qC,qBAMAE,EAAA,SAAAC,GAEAA,EAAAC,oBAAA,iBACAp/B,GAAA,cACA0rB,SAAAA,EACAJ,WAAAmT,EACAlP,SAAA,MAMA,OAFA2P,GAAAG,SAAA,iBAEAH,IAIA3sC,OAAA,0BChJA,UAGA,sCAGA,4CACA,6CACA,2CACA,kCAGA,gCAGA,wCAEA,SACAsB,EAGAyrC,EAGAC,EACAC,EACAC,EACAC,EAGAC,EAGAC,GAGA,YAEA,IAAAttC,GAAAuB,EAAAvB,OAAA,yBACA,gBAkBA,OAdAA,GAAAg5B,WAAA,cAAAgU,GAGAhtC,EAAAuE,UAAA,oBAAA0oC,GACAjtC,EAAAuE,UAAA,qBAAA2oC,GACAltC,EAAAuE,UAAA,mBAAA4oC,GACAntC,EAAAuE,UAAA,WAAA6oC,GAGAptC,EAAAsP,OAAA,oBAAA+9B,GAGArtC,EAAAiK,OAAAqjC,GAEAttC,ICzDAC,OAAA,yDAAA,WAAA,MAAA,4uDCDAA,ODGA,6CCFA,UACA,gCACA,UACA,SACAsB,EACA63B,GAGA,cAEA,WAEA,QAAAmU,KAEAnrC,KAAAorC,cAAA,KAIA,MAAAD,KAIA,QAAA,WAEA,OACA7H,SAAA,IACA5iC,OACAo5B,aAAA,KAGA9C,SAAAA,EAEAJ,YACA,SACA,KACA,YACA,aACA,gBACA,SACA,QACA,SACA,SACA51B,EACAovB,EACAwE,EACAC,EACAC,EACAqF,EACAuI,EACAzI,GAWA,QAAAoR,GAAA7oB,EAAA3c,GACAgvB,EAAArS,GAAA8P,KAAA,SAAA0D,GACAlB,EAAAO,UACAxK,OAAAmL,EACA5uB,QAAAvB,EAAAA,EAAAuB,QAAA,GACAouB,WAAA,EACA90B,MAAAM,MAsBA,QAAAsqC,GAAA3e,GACA,GAAAA,EAAA,CACA,GAAA,KAAAA,EAAAppB,QAAA,iBAAA,KAAAopB,EAAAppB,QAAA,oBAEA,MAAA,gBAEA,IAAA,KAAAopB,EAAAppB,QAAA,gBAEA,MAAA,qBAGA,MAAAopB,GAGA,QAAA4e,GAAAC,GAEA,GAAAA,EAAA,CACA,GAAAvR,GAAArF,EAAAqF,mBAEAA,GAAA3pB,WACA2pB,GAAAO,WAOA5F,EAAAqF,OAAA96B,EAAAwkB,KAAAsW,QAKAwR,GAAAhjC,IAAA,UAAAiI,OAAA,MAMA+6B,GAAAva,QAAA,YAiGA,QAAAwa,GAAAC,GACA,GAAAC,GAAA3R,IAAAO,UAEA,IAAAmR,GAAAA,EAAA5sC,OAAA,CAIA,GAAA6sC,EAAA,CACA,GAAAla,GAAAgR,EAAAjR,aAAAqR,UAAA,uBAAAx3B,GAAAsgC,GACA,IAAAla,GAAA,IAAAia,EAAApoC,QAAAmuB,GAEA,YADA1wB,EAAA6qC,sBAAAna,GAKAuI,EAAAK,gBACAE,WAAA,OAGAx5B,EAAA6qC,sBAAAF,EAAA,IA5LA,GAEAF,IAFAtR,EAAAnwB,SAAA,QAEAhJ,EAAAyqC,SAAAzqC,EAAA84B,aAAA1F,SAAApzB,GAeAA,GAAA8qC,aAAA,SAAAjhB,EAAAhlB,GACA,GAAAkmC,GAAAT,EAAAzlC,EAAAuB,QAEA,OAAA,mBAAA2kC,GAAA,uBAAAA,EACAlX,EAAAkX,GAAAzZ,KAAA,SAAA0D,GACAnwB,EAAAuB,QAAA4uB,EACAqV,EAAAxgB,EAAAhlB,GACA0lC,GAAA,SAKAF,GAAAxgB,EAAAhlB,IA8CA7E,EAAA+yB,OAAA,mBAAA,SAAAluB,GACA,GAAAA,EAAA,CACA,GAAA2c,GAAA8oB,EAAAzlC,EAAAuB,QACAikC,GAAA7oB,EAAA3c,GAGA0lC,GAAA,MAMAE,EAAA7X,QAAA,YAAA,OAAA,SAAAtjB,GACA,GAAAA,GAAAA,EAAAD,WACAC,EAAAD,UAAA27B,aACA,IAAA,GAAAptC,GAAA,EAAAA,EAAA0R,EAAAD,UAAA27B,aAAAjtC,OAAAH,IACA,GAAA,aAAA0R,EAAAD,UAAA27B,aAAAptC,GAAAoE,KACA,MAAAsN,GAAAD,UAAA27B,aAAAptC,GAAAyR,UAAAod,KACAnd,EAAAD,UAAA27B,aAAAptC,GAAAyR,UAAAod,KAAA,IAEAniB,GAAAgF,EAAAD,UAAA27B,aAAAptC,GAAA2O,OAOA,OAAA,SAGAk+B,EAAA7X,QAAA,UAAA,OAAA,SAAAtjB,GACA,GAAA27B,KACA,IAAA37B,GAAAA,EAAAD,WACAC,EAAAD,UAAA27B,aACA,IAAA,GAAAptC,GAAA,EAAAA,EAAA0R,EAAAD,UAAA27B,aAAAjtC,OAAAH,IACA,cAAA0R,EAAAD,UAAA27B,aAAAptC,GAAAoE,MAAA,OAAAsN,EAAAD,UAAA27B,aAAAptC,GAAAstC,SAEAD,EAAAnoC,KADAwM,EAAAD,UAAA27B,aAAAptC,GAAAyR,UAAA87B,MACA77B,EAAAD,UAAA27B,aAAAptC,GAAAyR,UAAA87B,MAAA,IAEA7gC,GAAAgF,EAAAD,UAAA27B,aAAAptC,GAAAstC,SAMA,OAAAD,MAGAR,EAAA7X,QAAA,cAAA,WAAA,SAAA5iB,GACA,QAAAA,GAAAA,EAAA1F,KAAAtK,EAAAorC,MAAAnX,eAAAzsB,QAGAijC,EAAA7X,QAAA,qBAAA,OAAA,SAAAtjB,GACA,MAAAA,IAAAA,EAAAD,WAAAC,EAAAD,UAAAG,kBAGAF,EAAAD,UAAAG,kBAAA,GAFA,QAKAi7B,EAAA7X,QAAA,kBAAA,OAAA,SAAAtjB,GACA,MAAAA,IAAAA,EAAAD,WAAAC,EAAAD,UAAAg8B,eAGA/7B,EAAAD,UAAAg8B,eAAA,GAFA,QAUArrC,EAAAsrC,UAAAb,EAAAlY,QAAA,OAAA,SAAAjjB,GACAtP,EAAAsP,KAAAA,IAGAm7B,EAAAlY,QAAA,aAAA,SAAAgZ,GACAvrC,EAAAurC,WAAAA,IAKAvrC,EAAAwrC,UAAArnB,MAAA,OAAA,WAAA,iBACAnkB,EAAAyrC,eAAA/J,EAAAG,cAAAC,UAAA,yBAEA9hC,EAAA6qC,sBAAA7qC,EAAAyrC,eAAA,GAEAzrC,EAAA0rC,oBAAA,SAAAjO,GACAz9B,EAAA6qC,sBAAApN,EAEAxE,EAAAK,gBACAE,WAAAiE,EAAAnzB,MA0BAogC,EAAA1qC,EAAAyrC,gBAEAzrC,EAAAkzB,IAAA,gBAAA,WACAwX,EAAA1qC,EAAAyrC,yBCxPA5uC,OAAA,8DAAA,WAAA,MAAA;GCAAA,OAAA,6DAAA,WAAA,MAAA,qzECDAA,ODGA,kDCFA,UACA,qCACA,iDACA,SACAsB,EACA63B,EACA2V,GAEA,YAEAxtC,GAAAS,OAEA,QACA,SACA,SACA,SACAs9B,EACA/C,GAEA,GAAAhqB,GAAAgqB,EAAAnwB,SAAA,OAEA,QACAtJ,OACA+qC,SAAA,IACAmB,eAAA,IACAd,aAAA,KAGA9U,SAAAA,EAEAJ,YACA,SACA,SACA51B,GAuCA,QAAA0xB,KAMAma,EAAA3b,QAAA,QAIA2b,EAAA3b,QAAA,YAGA,QAAA4b,GAAAC,GACA,MAAA,UAAAC,GACAC,EAAAF,GAAA,GACA/rC,EAAAsP,KAAAy8B,GAAAC,EAAAE,SAEAC,KAIA,QAAAC,GAAAL,GACA,MAAA,YACA/rC,EAAAsP,KAAAy8B,GAAA,KACAI,KAIA,QAAAA,KACA,GAAAE,GAAArsC,EAAAsP,WAEA+8B,GAAAh9B,gBACAg9B,GAAArP,OAEA7tB,EAAA/J,OAAAinC,EAAA,SAAAxnC,GAEA,MADA6sB,KACA7sB,EACAimC,EAAA,oBAAAjmC,GADA,SAMA,QAAAynC,GAAAjT,GACA,MAAA,YACA4S,EAAA5S,GAAA,IAIA,QAAAkT,GAAAlT,GACA,MAAA,YACA4S,EAAA5S,GAAA,IAIA,QAAA4S,GAAA5S,EAAA8N,GACAnnC,EAAAwsC,aAAAnT,GAAA8N,EAkHA,QAAAsF,GAAAC,GACA,GAAAC,GAAAC,EAAAF,EAEA,OAAA,UAAA7nC,GACA,MAAAA,GACAimC,EAAA6B,EAAA5mC,MAAAlB,OAGA6sB,MAtNA,GAAAma,GAAA7rC,EAAAyqC,SAAArX,SAAApzB,GAGA8qC,GADA9qC,EAAA4rC,kBAAA,aACA5rC,EAAA8qC,gBAAA,aAKAe,GAAAtZ,QAAA,OAAA,SAAAjjB,GACAtP,EAAAsP,KAAAnR,EAAAwkB,KAAArT,KAGAu8B,EAAAtZ,QAAA,WAAA,SAAAviB,GACAhQ,EAAAgQ,SAAA7R,EAAAwkB,KAAA3S,KAOA67B,EAAAtZ,QAAA,aAAA,SAAAgZ,GACAvrC,EAAAurC,WAAAA,IAGAM,EAAAtZ,QAAA,SAAA,SAAA0Y,GACAA,EAAAA,KAEA,KAAA,GAAAE,GADA0B,KACAjvC,EAAA,EAAAutC,EAAAF,EAAArtC,GAAAA,IACAivC,EAAA/pC,KAAAqoC,EAAA3jC,MAAA2jC,EAAA7gC,GAEAtK,GAAA6sC,WAAAA,IAiEA7sC,EAAA8sC,iBAAAhB,EAAA,YACA9rC,EAAA+sC,kBAAAX,EAAA,YACApsC,EAAAgtC,yBAAAV,EAAA,YACAtsC,EAAAitC,0BAAAV,EAAA,YAEAvsC,EAAAktC,YAAApB,EAAA,OACA9rC,EAAAmtC,aAAAf,EAAA,OACApsC,EAAAotC,oBAAAd,EAAA,OACAtsC,EAAAqtC,qBAAAd,EAAA,OAGAvsC,EAAAwsC,cACAc,UAAA,EACAC,KAAA,EACAv9B,UAAA,GAGAhQ,EAAAgU,KAAA,GAAAD,OAAAsP,QAEA,IAAAupB,IAEAY,UACAznC,MAAA,kBAGA0nC,iBACA1nC,MAAA,wBAGA2nC,SACA3nC,MAAA,eAGA4nC,WACA5nC,MAAA,iBAKA/F,GAAA4tC,qBAAAtB,EAAA,YACAtsC,EAAA6tC,sBAAAtB,EAAA,YAEAvsC,EAAA8tC,OAAA,SAAA9B,GACAC,EAAA,YAAA,EAEA,IAAA8B,GAAA/B,EAAAE,SAAA9wB,MAEA2yB,GAWAC,EAAAD,GATA/tC,EAAAurC,WACAp7B,IAGA89B,IAUA,IAKA99B,IALAnQ,EAAAkQ,MAAA,WACA,GAAAF,GAAAhQ,EAAAorC,MAAAnX,eAAAzsB,IACA2H,GAAAe,MAAAlQ,EAAAsP,KAAAhF,GAAA0F,EAAAy8B,EAAA,aAGAzsC,EAAAmQ,QAAA,WACAhB,EAAAgB,QAAAnQ,EAAAsP,KAAAhF,GAAAmiC,EAAA,gBAGAuB,EAAAhuC,EAAAguC,YAAA,SAAAD,GACA5+B,EAAAa,SAAAhQ,EAAAsP,KAAAhF,GAAAyjC,EAAAtB,EAAA,cAGAwB,EAAAjuC,EAAAiuC,cAAA,WACA9+B,EAAAa,SAAAhQ,EAAAsP,KAAAhF,GAAA,KAAAmiC,EAAA,oBAGAzsC,GAAAkuC,WAAA,WAsBA,QAAAC,KACAC,IACAvC,EAAApkC,IAAA,UAAAiI,OAAA1P,EAAAsP,KAAAhF,KACAuhC,EAAA3b,QAAA,aAxBA,GAAAke,EAEAlS,GAAAvO,MAEAjuB,MAAAM,EAEA68B,YAAA,oBAEA7G,SAAA2V,EACA/V,WAAA,wBACAvE,SACAwa,aAAA,WAAA,MAAAA,IACAuC,cAAA,WACA,MAAA,YACAA,GAAA,IAGAtD,aAAA,WAAA,MAAA9qC,GAAA8qC,iBAEAl3B,OAAA0d,KAAA6c,EAAAA,WCxOAtxC,ODoQA,2DCnQA,WAEA,YAEA,QACA,SACA,QACA,UACA,SACAmD,EACA0hC,EACA2M,GAGA,GAAA5D,GAAAzqC,EAAAyqC,SAAAzqC,EAAA84B,aAAA1F,SAAApzB,EAKAyqC,GAAAlY,QAAA,OAAA,SAAAjjB,GACAtP,EAAAsP,KAAAA,IAMA++B,EAAA/1B,kBAAAvE,KAAAC,MAAA,QAIAhU,EAAAwrC,UAAArnB,MAAA,OAAA,aACAnkB,EAAAsuC,YAAA5M,EAAAG,cAAAC,UAAA,6BAMAjlC,OCtCA,yDACA,WACA,SACAsB,GAEA,YAEA,IAAAowC,GAAA,WAEA,QACA,SACA,aACA,KACA,gBACA,SACA,SACAvuC,EACA6zB,EACAzE,EACA0E,EACAqF,GAIA,GAAAhqB,GAAAgqB,EAAAnwB,SAAA,QAEAsG,EAAA,KAEAk/B,GAAAtD,QAAA,KAAAlpC,KAAAusC,GAEAE,EAAAzuC,EAAAyuC,SAAAtwC,EAAAwkB,KAAA6rB,GAEAE,EAAA1uC,EAAA0uC,eAEAN,EAAApuC,EAAAouC,cAEAtD,EAAA9qC,EAAA8qC,cAEA9qC,GAAA2uC,UAEA,IAAAhC,KACA9Y,IACA,UACA,sBACA,mBACA,wBAEAvC,KAAA,SAAA1d,GACA+4B,EAAAiC,QAAAh7B,EAAAi7B,QACAlC,EAAAmC,iBAAAl7B,EAAAm7B,oBACApC,EAAAqC,eAAAp7B,EAAAq7B,iBACAtC,EAAAuC,kBAAAt7B,EAAAu7B,sBAKAnvC,EAAAovC,iBAAAV,EAAAnc,QAAA,SAAA,SAAA0Y,GACAjrC,EAAA2uC,QAAAxwC,EAAAwkB,KAAAsoB,OACAjrC,EAAAqvC,qBAGAX,EAAAnc,QAAA,OAAA,SAAA+c,GACAhgC,EAAAggC,IAKAtvC,EAAA+yB,OAAA,0BAAA,SAAAhtB,GACAA,GACA+tB,EAAAO,UACAxK,OAAA8iB,EAAAiC,QACAxoC,QAAAumC,EAAAmC,iBACAta,WAAA,EACA90B,MAAAM,MAKAA,EAAAuvC,SAAA,WACA,GAAA7/B,GAAAJ,EAAAhF,EAEA8jC,WAEAK,GAAA1oC,MACAoJ,EAAAU,iBAAAH,EAAA++B,EAAA,SAAA5pC,GACA,MAAAA,GACAimC,EAAA,oBAAAjmC,IAGA7E,EAAAwvC,cAAAC,eAEAzvC,EAAA2uC,QAAA7rC,MAAAwH,GAAAmkC,EAAAvD,eAEAuD,EAAAzuC,EAAAyuC,SAAAtwC,EAAAwkB,KAAA6rB,QAKAxuC,EAAA0vC,YAAA,SAAAvE,EAAA/hB,GACA,GAAA1Z,GAAAJ,EAAAhF,EAEA8jC,KAEAj/B,EAAAW,oBAAAJ,GAAA1N,KAAAusC,EAAArD,QAAAC,EAAA7gC,IAAA,SAAAzF,GACA,MAAAA,GACAivB,EAAAO,UACAxK,OAAA8iB,EAAAiC,QACAxoC,QAAAumC,EAAAuC,kBACA1a,WAAA,EACA90B,MAAAM,QAIAA,GAAA2uC,QAAAryB,OAAA8M,EAAA,MAIAppB,EAAAqvC,iBAAA,WAGA,SAFAZ,GAAA1oC,MAEA/F,EAAAwvC,eAAAxvC,EAAAwvC,cAAAf,SAAA,CAEAzuC,EAAAwvC,cAAAf,SAAAvsC,aAAA,aAAA,EAEA,IAAAytC,GAAAlB,EAAAvD,OAEA,IAAAyE,EACA,IAAA,GAAAC,GAAAhyC,EAAA,EAAAgyC,EAAA5vC,EAAA2uC,QAAA/wC,GAAAA,IACA+xC,IAAAC,EAAAtlC,KACAmkC,EAAA1oC,OAAAK,QAAA,mBAEApG,EAAAwvC,cAAAf,SAAAvsC,aAAA,aAAA,MAQAlC,EAAA+gC,QAAA,WACA,OAAA0N,EAAAvD,SAAAuD,EAAA1oC,OACA,GAGA,OC/IAlJ,OAAA,gFAAA,WAAA,MAAA,gkBCDAA,ODGA,oECFA,UACA,oDACA,SACAsB,EACA63B,GAEA,YAEA,IAAA+S,IACA,SACA,YACA,KACA,SACA,qBACA,SACA/oC,EACA4zB,EACAxE,EACA+J,EACA0W,GA8DA,QAAAtF,KAMA,GAAA/C,GAAA5T,EAAAqF,eACAuO,GAAAl4B,WACAk4B,GAAAhO,WACA5F,EAAAqF,OAAAuO,GAKAsI,EAAA5f,QAAA,YAvEA,GAAA/gB,GAAAgqB,EAAAnwB,SAAA,QAEA8hC,EAAA9qC,EAAA8qC,aAEAiF,EAAA/vC,EAAAgH,SACAgpC,oBAAA,EACAC,yBAAA,EACAC,uBAAA,EACAC,aAAA,EACAC,0BAAA,GAGAN,EAAA9vC,EAAAyqC,SAAArX,SAAApzB,EAEA8vC,GAAAld,QAAA,YAAA,OAAA,SAAAtjB,GACA,GAAAonB,GAAAtH,EAAAuH,OAEA,OAAArnB,IAAAA,EAAAhF,IAIA6E,EAAAiB,KAAAd,EAAAhF,GAAA,SAAAzF,EAAAwa,GAEAxa,EACA6xB,EAAAI,OAAAjyB,GAGA6xB,EAAArF,QAAAhS,KAIAqX,EAAAtF,SAbAsF,EAAArF,QAAA,SAkBAye,EAAAvd,SAAA,OAAA,aAAA,SAAAjjB,EAAAi8B,GACAvrC,EAAAgH,QAAA7I,EAAAwkB,KAAAotB,GAGA/vC,EAAAsE,OADAgL,GAAAA,EAAAhF,IACAoF,OAAAJ,EAAAhF,IAGA,KAGAtK,EAAAgH,QAAAkpC,uBAAA3E,EACAvrC,EAAAgH,QAAAmpC,aAAA5E,EACAvrC,EAAAgH,QAAAopC,0BAAA7E,KAGAvrC,EAAAqwC,cAAAP,EAAAvd,QAAA,WAAA,SAAA+d,GACAtwC,EAAAswC,SAAAnyC,EAAAwkB,KAAA2tB,KAuBAtwC,EAAAuwC,mBAAA,SAAA1rC,GACA,MAAAA,GACAimC,EAAA,iBAAAjmC,IAGA7E,EAAAsP,KAAAyrB,kBACA8U,GACA7/B,SAAAhQ,EAAAsP,KAAAU,SACA+qB,kBAAA/6B,EAAAsP,KAAAyrB,oBAEA/6B,EAAAsP,KAAA0F,gBACA66B,GACA7/B,SAAAhQ,EAAAsP,KAAAU,SACAgF,eAAAhV,EAAAsP,KAAA0F,qBAIAu1B,SAIAf,EAAA,SAAAC,GAEAA,EAAAC,oBAAA,wBACAp/B,GAAA,mBACAi/B,MAAA,OACAvT,SAAAA,EACAJ,WAAAmT,EACAlP,SAAA,MAMA,OAFA2P,GAAAG,SAAA,iBAEAH,ICrIA3sC,OAAA,mFAAA,WAAA,MAAA,msFAEAA,OAAA,uECFA,SACA,SACA,uDACA,SACA2zC,EACApa,EACAJ,GAEA,YAqCA,SAAAya,GAAAC,GACA,MAAA,MAAA,UAAA,gBAAAnuC,QAAAmuC,GApCA,GAAAC,GAAA,SAAAC,EAAAr4B,GACA,GAAA6iB,GAAAoV,EAAAK,KAAAD,EAAA,SAAAE,GACA,MAAA1a,GAAA0a,EAAA37B,MAAA2oB,OAAA,gBAAA1H,EAAA7d,GAAAulB,OAAA,eAEA,OAAA1C,GAAAr9B,OAAA,EACAq9B,EAAA,IAEAA,GACAjmB,KAAAoD,EACAw4B,WAEAH,EAAA9tC,KAAAs4B,GACAA,IAIA4V,EAAA,SAAAD,EAAA5iB,GACA,GAAA8iB,GAAAT,EAAAK,KAAAE,EAAA,SAAAD,GACA,MAAAA,GAAAI,cAAA/iB,EAAA+iB,aAEA,OAAAD,GAAAlzC,OAAA,EACAkzC,EAAA,IAEAA,GACAE,KAAAhjB,EAAA5V,UACAvW,KAAAmsB,EAAAijB,cACAF,YAAA/iB,EAAA+iB,YACA3kC,OAAA4hB,EAAA5hB,OACA8kC,cAEAN,EAAAjuC,KAAAmuC,GACAA,IAQAlI,GACA,SACA,SACA,KACA,SACA/oC,EACAm5B,EACA/J,GAGA,GAAA1iB,GAAAysB,EAAAnwB,SAAA,WACAmG,EAAAgqB,EAAAnwB,SAAA,QAEAsoC,EAAAtxC,EAAAyqC,SAAArX,SAAApzB,EAEAsxC,GAAA1e,QAAA,WAAA,OAAA,SAAAtjB,GACA,GAAAonB,GAAAtH,EAAAuH,OAEA,OAAArnB,IAIA5C,EAAAC,eAAA+C,OAAAJ,EAAAhF,IAAA,SAAAzF,EAAAwa,GACAxa,EACA6xB,EAAAI,OAAAjyB,GAGA6xB,EAAArF,QAAAhS,KAIAqX,EAAAtF,SAZAsF,EAAArF,QAAA,SAeAigB,EAAA1e,QAAA,YAAA,OAAA,SAAAtjB,GACA,GAAAonB,GAAAtH,EAAAuH,OAEA,OAAArnB,IAIAH,EAAAQ,SAAAL,EAAAhF,GAAA,SAAAzF,EAAAwa,GACAxa,EACA6xB,EAAAI,OAAAjyB,GAGA6xB,EAAArF,QAAAhS,KAIAqX,EAAAtF,SAZAsF,EAAArF,QAAA,SAeAigB,EAAA1e,QAAA,kCAAA,UAAA,WAAA,SAAA2e,EAAA5hC,GACA4hC,EAAAA,MACA5hC,EAAAA,KAMA,KAAA,GAFAyrB,GAEAoW,EAJAZ,KACAhzC,EAAA,EAGA4zC,EAAAD,EAAA3zC,GAAAA,IAAA,CAEAw9B,EAAAuV,EAAAC,EAAAY,EAAAj5B,UAGA,IAAA04B,GAAAD,EAAA5V,EAAA2V,OAAAS,EAGAf,GAAAe,EAAAnY,YACAmY,EAAAC,gBAAA,EACAD,EAAA1hB,SAAA0hB,EAAA1hB,SAAA5qB,SAAAssC,EAAA1hB,SAAA,IAAA,KACA0hB,EAAAE,SAAAF,EAAAE,SAAAxsC,SAAAssC,EAAAE,SAAA,IAAA,MAGAT,EAAAI,UAAAvuC,KAAA0uC,GAKA5zC,EAAA,EACAw9B,EAAA,IAEA,KAAA,GAAAuW,GAAAA,EAAAhiC,EAAA/R,GAAAA,IACAw9B,EAAAuV,EAAAC,EAAAe,EAAAR,MACAQ,EAAA3vC,KAAA,UACAo5B,EAAA2V,OAAAjuC,KAAA6uC,EAGA,OAAAf,MAGA5wC,EAAAmnC,MAAAmK,EAAA/e,QAAA,iCAAA,SAAAqe,GACA5wC,EAAA4wC,KAAAA,MAKApH,EAAA,SAAAC,GAEAA,EAAAC,oBAAA,wBACAp/B,GAAA,sBACAi/B,MAAA,UACAvT,SAAAA,EACAJ,WAAAmT,EACAlP,SAAA,MAMA,OAFA2P,GAAAG,SAAA,iBAEAH,IChKA3sC,OAAA,mFAAA,WAAA,MAAA,2rBCDAA,ODGA,uECFA,uDACA,SACAm5B,GAEA,YAEA,IAAA+S,IACA,SACA,KACA,SACA,SACA/oC,EACAovB,EACA+J,GAKA,GAAA1rB,GAAA0rB,EAAAnwB,SAAA,sBACA4oC,EAAA5xC,EAAAyqC,SAAArX,SAAApzB,EAIA4xC,GAAAhf,QAAA,aAAA,oBAAA,SAAApjB,GACA,GAAAknB,GAAAtH,EAAAuH,OAEA,OAAAnnB,IAIA/B,EAAAgB,IAAAe,EAAA,SAAA3K,EAAAwa,GACAxa,EACA6xB,EAAAI,OAAAjyB,GAGA6xB,EAAArF,QAAAhS,KAIAqX,EAAAtF,SAZAsF,EAAArF,QAAA,SAeAugB,EAAAhf,QAAA,kBAAA,YAAA,oBAAA,OAAA,SAAAif,EAAAriC,EAAAF,GACA,GAAAwiC,KAMA,OAJAA,GAAAtiC,kBAAAA,EACAsiC,EAAAxiC,KAAAA,EACAwiC,EAAAD,WAAAA,OAAAE,UAEAD,KAKAF,EAAArf,QAAA,oBAAA,SAAA/iB,GACAxP,EAAAwP,kBAAAA,IAGAxP,EAAAgyC,oBAAAJ,EAAArf,QAAA,iBAAA,SAAAuf,GACA9xC,EAAA8xC,eAAAA,IAGA9xC,EAAAiyC,WAEAjyC,EAAAkyC,cAAA,WACAlyC,EAAAiyC,QAAAE,UAAAnyC,EAAA8xC,eAAAxiC,KAAA8iC,sBAKA5I,EAAA,SAAAC,GAEAA,EAAAC,oBAAA,wBACAp/B,GAAA,sBACAi/B,MAAA,UACAvT,SAAAA,EACAJ,WAAAmT,EACAlP,SAAA,MAMA,OAFA2P,GAAAG,SAAA,iBAEAH,ICnFA3sC,OAAA,uFAAA,WAAA,MAAA,6RCDAA,ODGA,2ECFA,2DACA,SACAm5B,GAEA,YAEA,IAAA+S,IACA,SACA,cAIAS,EAAA,SAAAC,GAEAA,EAAAC,oBAAA,wBACAp/B,GAAA,0BACAi/B,MAAA,cACAvT,SAAAA,EACAJ,WAAAmT,EACAlP,SAAA,MAMA,OAFA2P,GAAAG,SAAA,iBAEAH,ICzBA3sC,OAAA,mFAAA,WAAA,MAAA,iJCAAA,OAAA,4EAAA,WAAA,MAAA,09BCDAA,ODGA,uECFA,sDACA,gDACA,SACAw1C,EACAC,GAEA,YAEA,IAAAvJ,IACA,SACA,SACA,SACA/oC,EACAk8B,GAGA,GAAAqW,GAAAvyC,EAAAyqC,SAAArX,SAAApzB,EAEAuyC,GAAAhgB,QAAA,OAAA,SAAAjjB,GACAtP,EAAAsP,KAAAA,IAGAtP,EAAA+P,cAAA,WACAmsB,EAAAvO,MAEAjuB,MAAAM,EAEA68B,YAAA,oBACAp6B,KAAA,KACAuzB,SAAAsc,EACA1c,WAAA,4BACAvE,SACA/hB,KAAA,WAAA,MAAAtP,GAAAsP,SAEAsE,OAAA0d,KAAA,WACAihB,EAAAriB,QAAA,aAOAsZ,EAAA,SAAAC,GAEAA,EAAAC,oBAAA,wBACAp/B,GAAA,sBACA0rB,SAAAqc,EACAzc,WAAAmT,EACAlP,SAAA,MAMA,OAFA2P,GAAAG,SAAA,iBAEAH,IAIA3sC,OC3DA,kEAEA,WACA,YAEA,QACA,SACA,aACA,gBACA,SACA,OACA,SACAmD,EACA6zB,EACAC,EACAqF,EACA7pB,GAWA,QAAA+6B,GAAA7oB,EAAA3c,GACAgvB,EAAArS,GAAA8P,KAAA,SAAA0D,GACAlB,EAAAO,UACAxK,OAAAmL,EACA5uB,QAAAvB,EAAAA,EAAAuB,QAAA,GACAouB,WAAA,EACA90B,MAAAM,MAdA,GAAAmP,GAAAgqB,EAAAnwB,SAAA,OAEAhJ,GAAA2xC,SAAAvrC,QAAA,IAEApG,EAAAkzB,IAAA,yBAAA,WACAlzB,EAAAk9B,aAcAl9B,EAAA0O,OAAA,WACAS,EAAAY,cAAAT,EAAAhF,GAAAtK,EAAA2xC,QAAAvrC,QAAA,SAAAvB,GACA,MAAAA,GACAwlC,EAAA,qBAAAxlC,OAGA7E,GAAAwyC,gBC5CA31C,ODmDA,mDClDA,WAEA,YAEA,QACA,SACA,eACA,gBACA,SACAmD,EACA6rC,EACAuC,GAIApuC,EAAA0uC,eAAA7C,EAAAzY,SAAApzB,GAEAA,EAAAouC,cAAAA,GAAA,aAEApuC,EAAAkzB,IAAA,yBAAA,WACAlzB,EAAAk9B,iBCrBArgC,OD4BA,sBC3BA,UACA,SAEA,iCACA,sCAEA,6CACA,6CAGA,wDACA,2DACA,2DACA,+DAGA,2DAGA,oDAGA,qCAEA,eACA,qBAEA,SACAsB,EACAi4B,EAEAqc,EACAC,EAEAC,EACAC,EAGAC,EACAC,EACAC,EACAC,EAGAC,EAGAC,EAGAC,EAGAC,GAEA,YAEA,IAAAC,GAAAl1C,EAAAvB,OAAA,qBACAw2C,EAAA5rC,KACA,eACA,oBACA,iBAgCA,OArBA6rC,GAAAlyC,UAAA,kBAAAsxC,GAEAY,EAAAlyC,UAAA,sBAAAuxC,GAEAW,EAAAzd,WAAA,oBAAA+c,GACAU,EAAAzd,WAAA,oBAAAgd,GAGAS,EAAAxsC,OAAAgsC,GACAQ,EAAAxsC,OAAAisC,GACAO,EAAAxsC,OAAAksC,GACAM,EAAAxsC,OAAAmsC,GAGAK,EAAAxsC,OAAAosC,GAGAI,EAAAzd,WAAA,4BAAAsd,GAEAG,EAAAzd,WAAA,wBAAAud,GAEAE,IC7FAx2C,OAAA,8FAAA,WAAA,MAAA,wICAAA,OAAA,sFAAA,WAAA,MAAA,2iICDAA,ODGA,kFCFA,8DACA,uDACA,SACAy2C,EACAtd,GAEA,YAEA,IAAA+S,IACA,SACA,SACA,KACA,SACA,aACA,SACA/oC,EACAk8B,EACA9M,EACA+J,EACAD,GAGA,GAAAzrB,GAAA0rB,EAAAnwB,SAAA,sBAEAuqC,EAAAvzC,EAAAuzC,YAAAra,EAAA90B,OAAApE,GAEAwzC,GACAC,QAAA,EACAjZ,QAAA,EACAv1B,YAAA,EACAE,WAAA,GAGAouC,GAAA3gB,QAAA,yBAAA4gB,GAEAD,EAAA3gB,QAAA,sBAAA,yBAAA,SAAA8gB,GACA,GAAAhd,GAAAtH,EAAAuH,OAWA,OATAlpB,GAAApJ,KAAAqvC,EAAA,SAAA7uC,EAAAwa,GACAxa,EACA6xB,EAAAI,OAAAjyB,GAGA6xB,EAAArF,QAAAhS,KAIAqX,EAAAtF,WAIAmiB,EAAA3gB,QAAA,8BAAAtoB,GAAA,OAEAipC,EAAA3gB,QAAA,aAAA,6BAAA,SAAA+gB,GACA,GAAAjd,GAAAtH,EAAAuH,OAgBA,OAdAgd,GAAArpC,GAIAmD,EAAAe,UAAAmlC,EAAA,SAAA9uC,EAAAwa,GACAxa,EACA6xB,EAAAI,OAAAjyB,GAGA6xB,EAAArF,QAAAhS,KARAqX,EAAArF,QAAA,MAaAqF,EAAAtF,WAGApxB,EAAA2tB,KAAA,WACA4lB,EAAA9rC,IAAA,yBAAAtJ,QAAAwkB,KAAA6wB,IACAtX,EAAAvO,MACAlrB,KAAA,KACAmzB,WAAA,2BACAI,SAAAA,EACA3E,SACAkiB,YAAA,WAAA,MAAAA,OAEA3/B,OAAA0d,KAAA,WACAtxB,EAAA44B,aAAA54B,EAAA44B,YAAAD,iBACA34B,EAAA44B,YAAAD,gBAAAI,uBAOAyQ,EAAA,SAAAC,GAEAA,EAAAC,oBAAA,0BACAp/B,GAAA,uBACA0rB,SAAAsd,EACA1d,WAAAmT,EACAlP,SAAA,MAMA,OAFA2P,GAAAG,SAAA,iBAEAH,IAIA3sC,OC5GA,0EACA,WACA,SACAsB,GAGA,YAEA,QACA,aACA,SACA,aACA,WACA,gBACA,cACA,qBACA,SACAuC,EACAV,EACA6zB,EACA+f,EACA9f,EACAyf,EACA1D,GAEA,QAAAxF,GAAA7oB,EAAA3c,GACAgvB,EAAArS,GAAA8P,KAAA,SAAA0D,GACAlB,EAAAO,UACAxK,OAAAmL,EACA5uB,QAAAvB,EAAAA,EAAAuB,QAAA,GACA1G,MAAAM,MAKA,QAAA6zC,GAAAryB,GACAqS,EAAArS,GAAA8P,KAAA,SAAA0D,GACAlB,EAAAqB,YACAC,SAAA,IACAvL,OAAAmL,MAOAh1B,EAAAkzB,IAAA,yBAAA,WACAlzB,EAAAk9B,YAGA,IAAA4W,GAAAP,EAAAngB,SAAApzB,EAGA8zC,GAAArsC,IAAA,8BAAA6C,GAAA,MAEA,IAAAylC,GAAA/vC,EAAAgH,SACAgpC,oBAAA,EACAC,yBAAA,EACAE,aAAA,EACAC,0BAAA,EAGApwC,GAAA+zC,2BAAA,CAEA,IAAApsC,GAAA,KAEAoyB,EAAA/5B,EAAA+5B,MACAtM,MAAA,EACAumB,QAAA,EACAC,YAAA,KAGAj0C,GAAAk0C,eAAA,aAIAJ,EAAAvhB,QAAA,yBAAA,SAAAlI,GACA1iB,EAAAxJ,EAAAwkB,KAAA0H,GAEA0P,EAAAt3B,KAAA4nB,EAAAllB,WACA40B,EAAAia,QAAA3pB,EAAAplB,YAAA80B,EAAAt3B,KAAA,IAGAzC,EAAAm0C,eAAAL,EAAAvhB,QAAA,YAAA,SAAA/jB,GACAxO,EAAAwO,UAAArQ,EAAAwkB,KAAAnU,KAGAxO,EAAAo0C,uBAAAN,EAAAvhB,QAAA,qBAAA,SAAA8hB,GAEAta,EAAAtM,MAAA4mB,EAAA5vC,MAEAzE,EAAAq0C,mBAAAA,EAAA3vC,MAAA4vC,KAAA,SAAA52C,EAAAsjB,GACA,GAAAuzB,IAAA72C,EAAA8J,MAAA9J,EAAAgB,KAAA4jB,cACAkyB,GAAAxzB,EAAAxZ,MAAAwZ,EAAAtiB,KAAA4jB,aACA,OAAAkyB,GAAAD,EACA,GACAA,EAAAC,EACA,EACA,MAOAx0C,EAAA2nC,WAAA,WACAhgC,EAAA1C,YAAA80B,EAAAt3B,MAAAs3B,EAAAia,QAAA,GACAF,EAAArsC,IAAA,yBAAAE,IAGA3H,EAAAy0C,8BAAAb,EAAA,WACA,GAAAc,GAAA3a,EAAAka,WAEAS,GAIA/sC,EAAA+sC,SAAA,IAAAA,EAAA,UAHA/sC,GAAA+sC,SAOA/sC,EAAA1C,YAAA,EAEA6uC,EAAArsC,IAAA,yBAAAE,IAGA,KAEA3H,EAAA20C,wBAAA,SAAAnlC,GACAxP,EAAA+zC,2BAAA,CAEA,IAAAtkC,GAAAD,EAAAlF,GACA4I,EAAA1D,EAAA9Q,GAEAsB,GAAAgH,QAAA7I,EAAAwkB,KAAAotB,GAEA/vC,EAAAsE,QACAmL,oBAAAA,EACAyD,qBAAAA,GAGA4gC,EAAArsC,IAAA,8BACA6C,GAAAmF,KAOAzP,EAAA40C,UAAA,EAEA50C,EAAA60C,KAAA,WACA70C,EAAA40C,UAAA,EACA50C,EAAA+zC,2BAAA,EACA/zC,EAAAgH,QAAA+oC,EACA+D,EAAArsC,IAAA,8BAAA6C,GAAA,OAGA,IAAAwqC,KACA90C,GAAAkzB,IAAA,WAAA,WAEA,IADA,GAAA6hB,GACAA,EAAAD,EAAAvrB,OACA,kBAAAwrB,IACAA,MAMA/0C,EAAAuwC,mBAAA,SAAA1rC,EAAA+O,GACA,MAAA/O,GACAwlC,EAAA,sBAAAxlC,IAGAiwC,EAAAhyC,KAAA,WACA+wC,EAAA,oBACAhE,GACA7/B,SAAAtP,EAAAuzB,eAAAzsB,KACAuzB,kBAAAnnB,EAAAtJ,WAGAtK,GAAAwyC,WAIAxyC,EAAAg1C,0BAAA,SAAAnpB,GAEA7rB,EAAAk0C,eAAAroB,GAAA,cAIA7rB,EAAAi1C,qBAAA,WACAj1C,EAAAk0C,kBAIAl0C,EAAAk1C,qBAAA,SAAAC,GACAn1C,EAAA40C,SAAAO,OCrMAt4C,OD4MA,yBC3MA,UAGA,mEAGA,4DAEA,SACAsB,EAGAi3C,EAGAC,GAKA,YAEA,IAAAC,GAAAn3C,EAAAvB,OAAA,wBACA,sBACA,oBACA,gBAUA,OALA04C,GAAAzuC,OAAAuuC,GAGAE,EAAA1f,WAAA,2BAAAyf,GAEAC,ICnCAz4C,OAAA,qEAAA,WAAA,MAAA,kmGCDAA,ODGA,yDCFA,uCACA,SACAm5B,GAEA,YACA;MAAA,YACA,OAEAA,SAAAA,EAEAJ,YACA,SACA,QACA,SAAA51B,EAAA0hC,GAEA1hC,EAAAu1C,YAAApxB,MAAA,gBACAnkB,EAAAw1C,cAAA9T,EAAAG,cAAAC,UAAA,iCCjBAjlC,ODwBA,kDCvBA,WACA,SACAsB,GAEA,YACA,IAAAC,GAAAD,EAAAS,QACAikC,EAAAzkC,EAAA,OAEA,QACA,SACA,WACA,SACA4B,EACAqiC,GAYA,QAAAoT,GAAAhZ,GACA,MAAAr+B,GAAAq+B,EAAAiZ,eAAA72C,KAAA,eAGA,QAAA82C,GAAA1+B,GACA,MAAA4rB,GAAAC,SAAA7rB,EAAA,iBAGA,QAAA0W,GAAA1W,GACA,MAAA4rB,GAAAvgC,YAAA2U,EAAA,iBAGA,QAAA5L,GAAA4L,GACA,MAAA4rB,GAAAxgC,SAAA4U,EAAA,iBAvBAjX,EAAA41C,qBAAA,SAAAnZ,GACAA,GAAAA,EAAAC,gBACAD,EAAAC,iBAGAt+B,EAAA,eAAAy3C,YAAA,gBAqBA71C,EAAA81C,aAAA,SAAArZ,GACAA,GAAAA,EAAAC,gBACAD,EAAAC,gBAGA,IAAAzlB,GAAAw+B,EAAAhZ,EAGA,UAAAxlB,EACA0+B,EAAA,UAAAA,EAAA,SACAhoB,EAAA,QAKA,SAAA1W,GACA0+B,EAAA,UAAAA,EAAA,SACAhoB,EAAA,QAIAkV,EAAAgT,YAAA5+B,EAAA,iBACAorB,EAAA,WACAriC,EAAAorC,MAAAjX,WAAA,kBACA,MAGAn0B,EAAA+1C,eAAA,SAAAtZ,GACAA,GAAAA,EAAAC,gBACAD,EAAAC,iBAGArxB,EAAA,WACAA,EAAA,QACAsiB,EAAA,SAGA3tB,EAAAg2C,aAAA,SAAAvZ,GACAA,GAAAA,EAAAC,gBACAD,EAAAC,iBAGA/O,EAAA,WACAA,EAAA,QACAA,EAAA,aAKA9wB,OC3FA,4BACA,UACA,uCACA,gCACA,iCACA,SACAsB,EACA83C,EACAC,GAEA,YAEA,IAAAC,GAAAh4C,EAAAvB,OAAA,2BACAe,QAAA,iCAAA6J,KACA,eACA,qBAMA,OAHA2uC,GAAAvgB,WAAA,gBAAAsgB,GACAC,EAAAh1C,UAAA,wBAAA80C,GAEAE,ICpBAt5C,OAAA,yDAAA,WAAA,MAAA,ilDAEAA,OAAA,6CCFA,UACA,iCACA,SACAsB,EACA63B,GAEA,YAMA,SAAAogB,GAAAlkC,GACA,GAAAxU,KACA,KAAA,GAAA24C,KAAAnkC,GACAA,EAAAmkC,IACA34C,EAAAoF,KAAAoP,EAAAmkC,GAGA,OAAA34C,GAXA,GAAA44C,GAAA,YACAC,EAAA,OACAC,EAAA,UAYA5yC,EAAA,YAEA,QAAA,WAEA,OAEA0+B,SAAA,IAEA5iC,OACA+2C,aAAA,IAWAzvC,QAAA,IAKA1C,OAAA,IAGAoyC,yBAAA,IAMAC,iBAAA,IAMAC,iBAAA,KAGA5gB,SAAAA,EAEAJ,YACA,SACA,MACA,SACA51B,EACA20B,GAsBA,QAAAkiB,GAAAzmC,GACA,GAAA1R,GAAA0R,EAAA1R,IACAo4C,EAAA1mC,EAAA2mC,WAIA,OAAAr4C,IAKA,IAAAA,EAAA6D,QAAA+zC,IACA53C,EAAAA,EAAAs4C,UAAAV,EAAAv4C,QACAqS,EAAApO,KAAA,YAEAoO,EAAApO,KAAA,WAGA,IAAAtD,EAAA6D,QAAAg0C,IACAO,IACAp4C,EAAA03C,GAAAU,EAAAp4C,EAAAs4C,UAAAT,EAAAx4C,UACAqQ,KAAA,KAEAyS,QAAA,YAAA,MAIA,IAAAniB,EAAA6D,QAAAi0C,KAEA93C,EAAAi2B,EAAAC,OAAAl2B,SAGA0R,EAAA1R,IAAAA,SAzBA0R,EAAApO,KAAA,WAxBAhC,EAAA02C,yBAAA12C,EAAA02C,4BAAA9yC,EACA5D,EAAA22C,iBAAA32C,EAAA22C,oBAAA/yC,EACA5D,EAAA42C,iBAAA52C,EAAA42C,oBAAAhzC,EACA5D,EAAAi3C,kBAAArzC,EACA5D,EAAAk3C,YAAAtzC,EAEA5D,EAAAgwB,SAAA,EAIAhwB,EAAA+yB,OAAA,eAAA,SAAArxB,GACA1B,EAAAgwB,SAAA,EACAtuB,GACAm1C,EAAAn1C,IAyCA,IAAA6uC,GAAA,SAAA1rC,EAAA+O,GACA5T,EAAA02C,yBAAA7xC,EAAA+O,IAGA1I,EAAAlL,EAAAkL,SAAA,WACAlL,EAAAi3C,kBAAA1G,GAGAvwC,GAAA22C,iBAAAzrC,GAEAlL,EAAAm3C,mBAAA,WACA,MAAAn3C,GAAAgH,UACAhH,EAAAgH,QAAAgpC,oBACAhwC,EAAAgwB,SAGAhwB,EAAAkwC,sBAAA,WACA,MAAAlwC,GAAA40C,UAAA50C,EAAAgH,SAAAhH,EAAAgH,QAAAkpC,sBAKAlwC,GAAAuK,KAAA,SAAA9I,GACAzB,EAAAk3C,YAAAz1C,GAKAzC,MAAAo4C,sBAAA,WACAp3C,EAAAgwB,SAAA,GAGAhxB,KAAAq4C,+BAAA,SAAAtxC,GACA/F,EAAAy2C,aAAAxmB,OAAAlqB,EAEA/G,KAAAo4C,wBAIAp4C,KAAAs4C,qBAAA,IAGAt4C,KAAAu4C,oBAAA,SAAA1yC,GACA7E,EAAA22C,iBAAA9xC,IAGA7F,KAAAs4C,oBAAA,SAAAnC,GACAn1C,EAAA40C,SAAAO,EACAn1C,EAAA42C,iBAAAzB,IAGAn2C,KAAAw4C,gBAAA,SAAAhnB,GACAxwB,EAAAoC,OAAAouB,GAIAxxB,KAAAy4C,WAAA,WACA,MAAAz3C,GAAAgH,aAGAhI,KAAA04C,gBAAA,WACA,MAAA13C,GAAAy2C,cAGAz3C,KAAA24C,UAAA,WACA,MAAA33C,GAAAsE,YAGAtF,KAAAg2C,0BAAA,SAAAnpB,GACA7rB,EAAAi3C,kBAAAprB,GAAAjoB,GAGA5E,KAAA44C,oBAAA,SAAA/rB,GACA7rB,EAAAk3C,YAAArrB,GAAAjoB,UC5MA/G,OAAA,iEAAA,WAAA,MAAA,uPCDAA,ODGA,qDCFA,UACA,yCACA,SACAsB,EACA63B,GAEA,YAIA,QACA,UACA,SACA,SACAqY,EACAlV,GAGA,OAEAmJ,SAAA,IAEA3kC,QAAA,mBAEA+B,OAAA,EAEAs2B,SAAAA,EAEA50B,KAAA,SAAApB,EAAA4B,EAAAN,EAAAu2C,GAoCA,QAAAC,GAAArB,EAAAnyC,GACAA,EAAAnG,EAAAwkB,KAAAre,SAEAA,GAAA4O,qBAEA/U,EAAAI,OAAA+F,GACA0O,OAAAmmB,EACA55B,YAAAA,EACAgF,KAAAA,IAGAxE,EAAA,GAAAsuC,GAAA/pC,GAoBA,QAAAyzC,KACA,GAAAxpC,GAAAxO,EAAAsT,gBAAA9E,SACA,KAAA,GAAAqJ,KAAArJ,GACAxO,EAAAsT,gBAAAmI,gBAAA5D,GAIA,QAAAogC,KACAj4C,EAAAkH,UA1EAjH,EAAAi4C,uBAAAJ,EAAAF,YAAAloC,mBAEA,IAAAlQ,GAAAqC,EAAAqW,KAAA,QACAlY,EAAA,KACAqQ,GACA8nC,QAAA,EACAtD,UAAA,GAGAuD,GAAA,CAEAn4C,GAAA+yB,OAAA,WACA,MAAAolB,IACA,SAAAz2C,GACAA,IACAo2C,EAAAp2C,EAAAm2C,EAAAF,aACAQ,GAAA,KAIAn4C,EAAA+yB,OAAA,WACA,MAAA8kB,GAAAH,mBACA,SAAAh2C,GACAA,IACAy2C,GAAA,EACAn4C,EAAAuO,gBAIAvO,EAAA+yB,OAAA,WACA,MAAA3iB,IAAAA,EAAA8nC,QACA,SAAAx2C,GACAm2C,EAAAP,qBAAA51C,IAiBA,IAAA6C,GAAA,SAAAM,EAAAuzC,GACA,GAAAvzC,EACA,MAAAgzC,GAAAR,+BAAAxyC,EAEA9E,GAAAq4C,CAEA,IAAAC,GAAAD,EAAA74C,YAAAV,KAAA,QACAy5C,EAAAF,EAAA74C,YAAAG,OAEA44C,KAIAloC,EAAAkoC,EAAAD,GACAR,EAAAT,0BAcAlsC,EAAA,SAAAyH,GAEA,QAAA4lC,GAAAxyC,EAAA6N,GAGA,MAFAmkC,KACAC,IACArlC,EAAA5M,EAAA6N,GAGA,IACA7T,EAAAsU,0BACA,MAAAtO,GACA,MAAAwyC,GAAAxyC,GAGA,GAAAwI,GAAAxO,EAAAsT,gBAAA9E,SACA,KAAA,GAAAqJ,KAAArJ,GACAA,EAAAqJ,GAAAlW,MAAA,IAEA3B,GAAA2O,OAAA6pC,GAGAV,GAAA7C,0BAAA9pC,SC/HArO,OAAA,2EAAA,WAAA,MAAA,2qKAEAA,OAAA,+DCFA,UACA,mDACA,SACAsB,EACA63B,GAEA,YAEA,QAAA,SAAA,gBAAA,aAAA,SAAAmD,EAAArF,EAAAD,GAEA,OAEAyO,SAAA,IAEA3kC,QAAA,mBAEAq4B,SAAAA,EAEA50B,KAAA,SAAApB,EAAA4B,EAAAN,EAAAu2C,GAEA,GAAA1oC,GAAAgqB,EAAAnwB,SAAA,OAEAhJ,GAAA+yB,OAAA,eAAA,WACA/yB,EAAAw4C,iBAAA,GAGA,IAAAC,IACAjxC,KAAA,GACA9F,MAAA,GACAM,KAAA,IAGAokC,EAAApmC,EAAAomC,eACAC,QAAA,WACAE,QAAA,OACAC,KAAA,OACAC,MAAA,OACAH,OAAA,OACAjvB,OAAA,OACAtD,KAAA,OAGA/T,GAAA04C,YAAA,WACA,GAAAC,GAAAx6C,EAAAwkB,KAAA81B,EACAz4C,GAAAuO,UAAAzL,KAAA61C,IAGA34C,EAAA44C,eAAA,SAAAC,GACA,GAAAzjC,KAEAjX,GAAA+I,QAAAlH,EAAAuO,UAAA,SAAAgN,EAAAyM,GACAA,GAAA6wB,GACAzjC,EAAAtS,KAAAyY,KAIAvb,EAAAuO,UAAA6G,GAGApV,EAAA84C,iBAAA,WACA,MAAA94C,GAAAuO,UAAA0zB,IAAA,SAAA1mB,GACA,MAAAA,GAAA/T,QAIAxH,EAAA+4C,cAAA,WACA/4C,EAAAw4C,iBAAA,EACArpC,EAAArB,eACAxD,GAAAutC,EAAAF,YAAAjoC,OACAzB,mBAAA,GACA,SAAApJ,EAAA+O,GACA,GAAA/O,EAEA,MADA7E,GAAAw4C,iBAAA,EACA3kB,EAAA,0BAAAvC,KAAA,SAAA0D,GACAlB,EAAAO,UACAxK,OAAAmL,EACA5uB,QAAAvB,EAAAuB,QACA1G,MAAAM,KAKA,IAAAg5C,IAAA,CACA76C,GAAA+I,QAAA0M,EAAA,SAAAlS,EAAA8F,GACA4+B,EAAA1kC,EAAAM,QACAhC,EAAAuO,UAAAzL,MACA0E,KAAAA,EACA9F,MAAAA,EAAAA,MACAM,KAAAN,EAAAM,KACAi3C,WAAA,IAEAD,GAAA,KAGAA,GACAnlB,EAAA,qBAAAvC,KAAA,SAAA0D,GACAlB,EAAAqB,YACAC,SAAA,IACAvL,OAAAmL,EACAt1B,MAAAM,eCnGAnD,OAAA,kEAAA,WAAA,MAAA,yCAEAA,OAAA,sDCFA,UACA,0CACA,SACAsB,EACA63B,GAEA,YAGA,QACA,UACA,SACA,WACA,SACAqY,EACAlV,EACAkJ,GAGA,OAEAC,SAAA,IAEA3kC,QAAA,mBAEA+B,OAAA,EAEAs2B,SAAAA,EAEA50B,KAAA,SAAApB,EAAA4B,EAAAN,EAAAu2C,GA4BA,QAAAC,GAAAoB,EAAAzC,EAAAnyC,GACA,GAAA8O,GAAAqjC,EAAA/3C,GAEA4F,GAAAnG,EAAAwkB,KAAAre,SAEAA,GAAA4O,qBAEA/U,EAAAI,OAAA+F,GACA6O,iBAAA+lC,EACAlmC,OAAAmmB,EACA/lB,QAAAA,EACA7O,KAAAA,IAGAxE,EAAA,GAAAsuC,GAAA/pC,GAxCA,GAAA40C,GAAAt3C,EAAAqW,KAAA,mBACAlY,EAAA,KACAqQ,EAAApQ,EAAAoQ,MACA8nC,QAAA,EACAtD,UAAA,EAGA50C,GAAA+yB,OAAA,eAAA,SAAArxB,GACAA,GACAo2C,EAAAoB,EAAAx3C,EAAAm2C,EAAAF,eAIA33C,EAAA+yB,OAAA,WACA,MAAA3iB,IAAAA,EAAA8nC,QACA,SAAAx2C,GACAm2C,EAAAP,qBAAA51C,KAIA1B,EAAA+yB,OAAA,WACA,MAAA3iB,IAAAA,EAAAhO,QACA,SAAAV,GACAm2C,EAAAL,gBAAA91C,IAqBA,IAAA6C,GAAA,SAAAM,EAAAuzC,GACA,GAAAvzC,EACA,MAAAgzC,GAAAR,+BAAAxyC,EAEA9E,GAAAq4C,CAEA,IAAAC,GAAAD,EAAA74C,YAAAV,KAAA,QACAy5C,EAAAF,EAAA74C,YAAAG,OAEA44C,KAIAloC,EAAAkoC,EAAAD,GACAjoC,EAAAq/B,eACAoI,EAAAT,0BAGAlsC,EAAA,SAAAyH,GACA5S,EAAA2O,OAAAiE,IAGApI,EAAA,SAAA9I,GACA2O,EAAAq/B,eACA1vC,EAAA+U,QAGAutB,EAAA,WACAlkC,EAAAS,QAAA6C,EAAAwV,QAAAkiC,eAAA/6C,EAAAg7C,MAAA,iBAIAvB,GAAA7C,0BAAA9pC,GACA2sC,EAAAD,oBAAArtC,GAEAvK,EAAAkzB,IAAA,gCAAA,WACA3oB,YC/GA1N,OAAA,kEAAA,WAAA,MAAA,iTCDAA,ODGA,sDCFA,UACA,0CACA,SACAsB,EACA63B,GAEA,YAGA,QACA,YACA,SAAApC,GAEA,OAEA0O,SAAA,IAEA3kC,QAAA,mBAEA+B,OAAA,EAEAs2B,SAAAA,EAEA50B,KAAA,SAAApB,EAAAq5C,EAAA/3C,EAAAu2C,GAEAA,EAAAP,qBAAA,GAEAt3C,EAAAs5C,gBAAA,KACAt5C,EAAAu5C,mBAAA,KAEAv5C,EAAA+yB,OAAA,WACA,MAAA8kB,GAAAH,mBAAAG,EAAAF,aACA,SAAAj2C,GAEA,GAAAA,EAAA,CAEA,GAAA+0C,GAAAoB,EAAAH,kBACApzC,EAAAuzC,EAAAF,YAEAj5C,EAAA+3C,EAAA/3C,IAEAgR,EAAApL,EAAAoL,OACAwD,EAAA5O,EAAA4O,qBAEAsmC,EAAA,IAEA,IAAA9pC,EACA8pC,EAAA,UAAA9pC,EACA1P,EAAAu5C,mBAAA,8BAEA,CAAA,IAAArmC,EAKA,MAAA2kC,GAAAR,gCACAjxC,QAAA,6BALAozC,GAAA,wBAAAtmC,EACAlT,EAAAu5C,mBAAA,6BAQA,GAAAE,GAAA7lB,EAAA8lB,SACAxzC,EAAA0tB,EAAA1tB,KAIAuzC,GAAAA,EAAA54B,QAAA3a,EAAA,KAEAlG,EAAAs5C,gBAAAK,UAAAj7C,EAAA,IAAA86C,EAAA,gBAAAC,GAEA5B,EAAAT,2BAKAp3C,EAAA+yB,OAAA,WACA,MAAA8kB,GAAAJ,cACA,SAAAzwC,GAEAA,IACAA,EAAAgpC,oBAAA,WAaAnzC,OC7FA,uDAAA,WACA,YAEA,QAAA,WAEA,OAEAc,QAAA,UAEAyD,KAAA,SAAApB,EAAA4B,EAAAC,EAAAN,GAEA,GAAAO,GAAA,SAAAC,GAEA,GAAAmM,GAAA3H,KAAAC,MAAA3E,EAAA+3C,eAIA,IAFAr4C,EAAAW,aAAA,kBAAA,GAEAH,EAAA,CAEAR,EAAAY,YACAZ,EAAAY,WAAA,EACAZ,EAAAa,QAAA,EACAR,EAAAS,SAAA,YACAT,EAAAU,YAAA,eAIA,KAAA,GADAu3C,IAAA,EACAj8C,EAAA,EAAAA,EAAAsQ,EAAAnQ,OAAAH,IACA,GAAAsQ,EAAAtQ,KAAAmE,EAAA,CACA,GAAA83C,EAAA,CACAt4C,EAAAW,aAAA,kBAAA,EACA,OAEA23C,GAAA,GAIA,MAAA93C,GAGAR,GAAAoB,SAAAC,QAAAd,GACAP,EAAAsB,YAAAC,KAAAhB,GAEAD,EAAAkB,SAAA,iBAAA,WACA,MAAAjB,GAAAP,EAAAyB,oBAMAnG,OClDA,sBACA,UACA,iCACA,yCACA,mDACA,0CACA,0CAEA,0CACA,SACAsB,EACA27C,EACAC,EACAC,EACAC,EACAC,EACAC,GAEA,YAEA,IAAAC,GAAAj8C,EAAAvB,OAAA,qBACA,gBAUA,OAPAw9C,GAAAj5C,UAAA,kBAAA24C,GACAM,EAAAj5C,UAAA,yBAAA44C,GACAK,EAAAj5C,UAAA,kCAAA64C,GACAI,EAAAj5C,UAAA,0BAAA84C,GACAG,EAAAj5C,UAAA,0BAAA+4C,GACAE,EAAAj5C,UAAA,iBAAAg5C,GAEAC,IC9BAv9C,OAAA,8DAAA,WAAA,MAAA,4iDCDAA,ODGA,kDCFA,mCACA,WACA,SACAm5B,EACA73B,GAEA,YAEA,IAGAyF,IAHAzF,EAAAS,QACAT,EAAA+I,QAEA,aAEA,QAAA,WAEA,OAEAo7B,SAAA,IACA5iC,OACA26C,YAAA,IACAC,UAAA,KAGAtkB,SAAAA,EAEAJ,YACA,SACA,SACA,SACA51B,EACAi5B,GAGA,GAAAohB,GAAAr6C,EAAAq6C,YAAAr6C,EAAAq6C,YAAAjnB,SAAApzB,EAEAA,GAAAs6C,UAAAt6C,EAAAs6C,aAAA12C,EAOAy2C,EAAA9nB,QAAA,WAAA,SAAA6U,GACApnC,EAAAu6C,YAAAnT,EAAA3iC,QAMAzE,EAAAmnC,MAAAkT,EAAA9nB,QAAA,UAAA,SAAAoH,GAEA35B,EAAA8mC,WAAAnN,EAAA57B,MAEA,KAAA,GAAAmO,GAAAtO,EAAA,EAAAsO,EAAAytB,EAAA/7B,GAAAA,IAEAsO,EAAAsuC,OACAC,eAAAvuC,EAAAsQ,WAAAk+B,MACAC,mBAAAzuC,EAAAsQ,WAAAk+B,MAKA16C,GAAA25B,QAAAA,IAIA0gB,EAAA9nB,QAAA,gBAAA,SAAAgH,GACAv5B,EAAAu5B,cAAAA,IAQAv5B,EAAAqnC,MAAA,SAAAn7B,GACAlM,EAAAu6C,YAAA93B,OAEAwW,EAAAK,gBACAptB,OAAAA,EAAA5B,KAGA+vC,EAAAnqB,QAAA,kBAMAlwB,EAAA46C,UAAA,SAAA1uC,GACA,MAAAA,GAAA5B,KAAAtK,EAAAu5B,cAAAjvB,WCzFAzN,OAAA,wEAAA,WAAA,MAAA,4pFCDAA,ODGA,4DCFA,UACA,8CACA,SACAsB,EACA63B,GAEA,YAEA,IAAA51B,GAAAjC,EAAAiC,QAEAwD,EAAA,aAEAi3C,EAAA,UACAC,EAAA,aACAC,EAAA,WACAC,EAAA,UAEA,QAAA,WAEA,OAEA1Y,SAAA,IACA5iC,OACAwM,OAAA,IACA+uC,gBAAA,IACAC,wBAAA,IACAC,gCAAA,KAGAnlB,SAAAA,EAEAJ,YACA,SACA,SACA51B,GAKA,GAAAo7C,GAAAp7C,EAAAo7C,oBAAAp7C,EAAAi7C,gBAAA7nB,SAAApzB,EAEAA,GAAAk7C,wBAAAl7C,EAAAk7C,2BAAAt3C,EACA5D,EAAAm7C,gCAAAn7C,EAAAm7C,mCAAAv3C,CAEA,IAAAy3C,GAAAR,CACA76C,GAAAs7C,WACAC,QAAAF,IAAAR,EACAW,WAAAH,IAAAP,EACAW,SAAAJ,IAAAN,EACAx/B,SAAA8/B,IAAAL,GAKAI,EAAA7oB,QAAA,WAAA,SAAAmpB,GACA17C,EAAA07C,SAAAA,GAKA,IAAAC,GAAA,WACA,MAAA37C,GAAA47C,WAAA1D,OAGAl4C,GAAAk7C,wBAAAS,EAIA,IAAAE,KACA78C,MAAA88C,qBAAA,SAAAzD,EAAAxsB,GACAA,EAAAA,GAAAjoB,EACAi4C,EAAAxD,GAAAxsB,GAGA7rB,EAAA+7C,SAAA,SAAA1D,GACA,GAAA3nB,GAAAmrB,EAAAxD,EACA,OAAA3nB,IAAAA,IAKA,IAAAsrB,KACAh9C,MAAAm8C,gCAAA,SAAAzqB,GACAsrB,EAAAl5C,KAAA4tB,GAAA,SAAAxkB,EAAAyG,GAAA,MAAAA,OAGA,IAAAspC,GAAA,SAAA/vC,EAAAyG,GAEA,GAAAlO,GAAAu3C,EAAAj+C,MAEA,IAAA,IAAA0G,EACA,MAAAkO,IAgCA,KAAA,GAAA+d,GA7BAwrB,KACA3D,EAAA,SAAA1zC,GAcA,GAbAJ,GAAA,EAEAI,IACAzE,EAAAyE,GACAA,EAAA9G,SACAm+C,EAAAA,EAAA35B,OAAA1d,IAIAq3C,EAAAp5C,KAAA+B,IAIA,IAAAJ,EAAA,CACA,GAAA,IAAAy3C,EAAAn+C,OACA,MAAA4U,GAAAupC,EAAA,GAEA,IAAAA,EAAAn+C,OACA,MAAA4U,GAAAupC,EAGAvpC,OAMA/U,EAAA,EAAA8yB,EAAAsrB,EAAAp+C,GAAAA,IACA8yB,EAAAxkB,EAAAqsC,GAKAv4C,GAAAm7C,gCAAAc,GAIAj9C,KAAAm9C,gBAAA,SAAAjqC,EAAA2mC,GACA,GAAAuD,KACA,KAAA,GAAA19C,KAAAwT,GACAxT,GAAAm6C,GACAuD,EAAAt5C,KAAAoP,EAAAxT,GAGA,OAAA09C,WC5IAv/C,OAAA,gFAAA,WAAA,MAAA,45IAEAA,OAAA,oECFA,UACA,sDACA,SACAsB,EACA63B,GAEA,YAEA,QAAA,WAEA,OAEAsM,SAAA,IACA3kC,QAAA,8BACA+B,OACAwM,OAAA,IACAwvC,SAAA,KAGA1lB,SAAAA,EAEA50B,KAAA,SAAApB,EAAA4B,EAAAN,EAAA+6C,GAIA,GAAAC,GAAAt8C,EAAAu8C,kBAEAC,IACAA,GAAA15C,KAAAw5C,EAAAG,aACAD,EAAA15C,KAAAw5C,EAAAI,YACAF,EAAA15C,KAAAw5C,EAAAK,gBACAH,EAAA15C,KAAAw5C,EAAAM,mBACAJ,EAAA15C,KAAAw5C,EAAAO,cAIA,IAAAC,GAAA,WACA,IAAA,GAAA7K,GAAAr0C,EAAA,EAAAq0C,EAAAuK,EAAA5+C,GAAAA,IACA,GAAAq0C,EAAA7vC,QAAA6vC,EAAA2C,SACA,OAAA,CAGA,QAAA,EAGAyH,GAAAP,qBAAA,oBAAAgB,SC7CAjgD,OAAA,iFAAA,WAAA,MAAA;GCDAA,ODGA,kEAAA,WCFA,YAYA,SAAAkkC,GAAAgc,EAAAh3C,EAAAi3C,GAEA,MAAA,UAAAt7C,GAEA,MAAAs7C,IACAxU,EAAAttB,KAAAxZ,IACAu7C,OAAA,GAIAF,EAAA7hC,KAAAxZ,IACAu7C,OAAA,IAKAA,OAAA,EACAl3C,MAAAA,GAAA,WA3BA,GAAAm3C,GAAA,0EACAC,EAAA,6BACAC,EAAA,gJACAC,EAAA,8DAGAjV,EAAA,6EACAI,EAAA,kBACA8U,EAAA,YAyBA7B,IAEAtQ,MAAA,mBACAnkC,UAEAQ,KAAA,oBACA+hC,MAAA,OAGA/hC,KAAA,6BACA+hC,MAAA,iBAGA/hC,KAAA,iCACA+hC,MAAA,wBAKA4B,MAAA,qBACAnkC,UAEAQ,KAAA,sBACA+hC,MAAA,OAGA/hC,KAAA,uBACA+hC,MAAA,QAGA/hC,KAAA,yBACA+hC,MAAA,SACAgU,KAAAF,IAGA71C,KAAA,wBACA+hC,MAAA,SAGA/hC,KAAA,4BACA+hC,MAAA,gBAKA4B,MAAA,gBACAnkC,UAEAQ,KAAA,iBACA+hC,MAAA,OAGA/hC,KAAA,0BACA+hC,MAAA,iBAGA/hC,KAAA,8BACA+hC,MAAA,wBAKA4B,MAAA,kBACAnkC,UAEAQ,KAAA,mBACA+hC,MAAA,OAGA/hC,KAAA,oBACA+hC,MAAA,QAGA/hC,KAAA,qBACA+hC,MAAA,SAGA/hC,KAAA,yBACA+hC,MAAA,gBAKA4B,MAAA,QACAnkC,UAEAQ,KAAA,SACA+hC,MAAA,SACAiU,MAAA,IAGAh2C,KAAA,uBACA+hC,MAAA,0BACAgU,KAAAF,IAGA71C,KAAA,cACA+hC,MAAA,mBAKA4B,MAAA,eACAnkC,UAEAQ,KAAA,WACA+hC,MAAA,WACAkU,mBAAA,EACAF,KAAAJ,IAGA31C,KAAA,eACA+hC,MAAA,gBACAkU,mBAAA,EACAF,KAAAJ,IAGA31C,KAAA,QACA+hC,MAAA,QACAkU,mBAAA,EACAF,KAAAJ,IAGA31C,KAAA,iBACA+hC,MAAA,kBACAkU,mBAAA,EACAC,6BAAA,IAGAl2C,KAAA,kBACA+hC,MAAA,mBACAkU,mBAAA,EACAF,KAAAH,EACAM,6BAAA,IAGAl2C,KAAA,gBACA+hC,MAAA,iBACAkU,mBAAA,EACAF,KAAAJ,EACAO,6BAAA,IAGAl2C,KAAA,eACA+hC,MAAA,gBACAkU,mBAAA,EACAF,KAAAJ,IAGA31C,KAAA,aACA+hC,MAAA,aACAiU,MAAA,IAGAh2C,KAAA,kBACA+hC,MAAA,uBAKA4B,MAAA,OACAnkC,UAEAQ,KAAA,oBACA+hC,MAAA,mBAGA/hC,KAAA,sBACA+hC,MAAA,oBACAgU,KAAAF,IAGA71C,KAAA,wBACA+hC,MAAA,wBAGA/hC,KAAA,OACA+hC,MAAA,SAGA/hC,KAAA,WACA+hC,MAAA,cAGA/hC,KAAA,cACA+hC,MAAA,gBAGA/hC,KAAA,kBACA+hC,MAAA,qBAGA/hC,KAAA,WACA+hC,MAAA,WACAznC,SAAAi/B,EAAAuc,EAAA,YAGA91C,KAAA,cACA+hC,MAAA,eACAznC,SAAAi/B,EAAAuc,EAAA,YAGA91C,KAAA,cACA+hC,MAAA,eACAznC,SAAAi/B,EAAAuc,EAAA,cAKAnS,MAAA,QACArpC,SAAAi/B,EAAAqH,EAAA,QAAA,GACAphC,UAEAQ,KAAA,gBACA+hC,MAAA,iBACAkU,mBAAA,EACAF,KAAAL,IAGA11C,KAAA,eACA+hC,MAAA,gBACAkU,mBAAA,EACAF,KAAAL,IAGA11C,KAAA,YACA+hC,MAAA,aACAkU,mBAAA,EACAF,KAAAL,IAGA11C,KAAA,WACA+hC,MAAA,YACAkU,mBAAA,EACAF,KAAAL,IAGA11C,KAAA,gBACA+hC,MAAA,kBACAkU,mBAAA,EACAF,KAAAL,IAGA11C,KAAA,iBACA+hC,MAAA,mBACAkU,mBAAA,EACAF,KAAAL,IAGA11C,KAAA,8BACA+hC,MAAA,mCACAkU,mBAAA,EACAF,KAAAL,KAKA,OAAAzB,GAAAxZ,IAAA,SAAAzpB,GAEA,MADAA,GAAAhR,KAAAgR,EAAA2yB,MAAA7oB,cAAAzB,QAAA,eAAA,KACArI,MAIA3b,OC3SA,qEACA,UACA,sDACA,wCACA,SACAsB,EACA63B,EACAylB,GAEA,YAEA,IAAAj8C,GAAArB,EAAA+I,QACAyb,EAAAxkB,EAAAwkB,KAEA+6B,KACAC,KACAC,KACAC,KACAC,KAEAC,EAAA,WACA,OAAAd,OAAA,GAoBA,OAjBAz9C,GAAAi8C,EAAA,SAAAtQ,GACA3rC,EAAA2rC,EAAAnkC,QAAA,SAAAg3C,GACAN,EAAAM,EAAAx2C,MAAAw2C,EAAAN,4BACAA,EAAAM,EAAAx2C,QACAk2C,EAAAM,EAAAx2C,KAAA,eAAA,GAGAw2C,EAAAR,OACAG,EAAAK,EAAAx2C,OAAA,GAGAo2C,EAAAI,EAAAx2C,MAAAw2C,EAAAP,kBACAI,EAAAG,EAAAx2C,MAAAw2C,EAAAT,MAAApS,EAAAoS,KACAO,EAAAE,EAAAx2C,MAAAw2C,EAAAl8C,UAAAqpC,EAAArpC,UAAAi8C,OAIA,WAEA,OAEAzb,SAAA,IACA3kC,QAAA,8BACA+B,OACAwM,OAAA,IACAwvC,SAAA,KAGA1lB,SAAAA,EAEA50B,KAAA,SAAApB,EAAA4B,EAAAN,EAAA+6C,GAEA,GAAA4B,IACAv/C,IAAA,GACAgD,MAAA,GAGA1B,GAAAy7C,SAAAA,EACAz7C,EAAA49C,0BAAAA,EACA59C,EAAA69C,aAAAA,EACA79C,EAAA29C,iBAAAA,EAEA39C,EAAA2H,MAAA3H,EAAAkM,OAAAvE,MAAA3H,EAAAkM,OAAAvE,UAGA3H,EAAA2H,MAAA3H,EAAAkM,OAAAvE,MAAA3H,EAAA2H,MAAAuE,OAAA,SAAAsM,GAIA,MAHA,yBAAAA,EAAA9Z,MACAsB,EAAAk+C,qBAAAl+C,EAAAkM,OAAAgyC,qBAAA1lC,EAAA9W,OAEA,yBAAA8W,EAAA9Z,MAGAsB,EAAAm+C,wBAAA,WACA,IAAA,GAAAC,GAAA,EAAAA,EAAAp+C,EAAA2H,MAAA5J,OAAAqgD,IACA,GAAAV,EAAA19C,EAAA2H,MAAAy2C,GAAA1/C,KACA,OAAA,CAGA,QAAA,GAGAsB,EAAA+yB,OAAA,QAAA,WACA/yB,EAAAk+C,qBAAAl+C,EAAAkM,OAAAgyC,qBACAl+C,EAAAm+C,2BACAn+C,EAAAkM,OAAAgyC,uBAEA,EAIA,IAAApB,GAAA,WACA,IAAA,GAAAuB,GAAAzgD,EAAA,EAAAygD,EAAAC,EAAA1gD,GAAAA,IAAA,CACA,GAAA2gD,GAAAF,EAAAE,cACAC,EAAAH,EAAAG,eAEA,IAAAD,EAAAn8C,QAAAm8C,EAAA3J,SACA,OAAA,CAGA,IAAA4J,EAAAp8C,QAAAo8C,EAAA5J,SACA,OAAA,EAIA,OAAA,EAGAyH,GAAAP,qBAAA,qBAAAgB,EAIA,IAAAwB,KACAt+C,GAAAy+C,QAAA,SAAAnC,GACAgC,EAAAx7C,KAAAw5C,IAKAt8C,EAAA0+C,aAAA,WACA,GAAAC,GAAAh8B,EAAAs7B,EACAj+C,GAAA2H,MAAA7E,KAAA67C,IAGA3+C,EAAA4+C,gBAAA,SAAA/F,GACA74C,EAAAkM,OAAAvE,MAAA3H,EAAA2H,MAAA00C,EAAAF,gBAAAn8C,EAAA2H,MAAAkxC,GACAyF,EAAAjC,EAAAF,gBAAAmC,EAAAzF,IAGA74C,EAAA6+C,aAAA,SAAArF,EAAAvH,GAIA,GAHAA,EAAA/vC,aAAA,UAAA,GACA+vC,EAAA/vC,aAAA,QAAA,GAEAy7C,EAAAnE,EAAA96C,KACA86C,EAAA93C,OAAA,MAGA,IAAA83C,EAAA93C,MAAA,CACAuwC,EAAA9vC,WACA8vC,EAAAtwC,cAAA63C,EAAA93C,MAEA,IAAAhD,GAAAogD,EAAAtF,EAAA96C,KACAqgD,EAAAjB,EAAAp/C,GAAA86C,EAAA93C,MAEAq9C,GAAA9B,OACAhL,EAAA/vC,aAAA68C,EAAAh5C,OAAA,KAOA/F,EAAAg/C,kBAAA,WAGA,IAAA,GAAAC,GAFArrC,KAEAhW,EAAA,EAAAqhD,EAAAj/C,EAAA2H,MAAA/J,GAAAA,IAAA,CACA,GAAAshD,GAAAJ,EAAAG,EAAAvgD,IACAkV,GAAA9Q,KAAAo8C,GAEAtB,EAAAsB,IACAtrC,EAAA9Q,KAAAo8C,EAAA,cAIA,MAAAtrC,GAGA,IAAAkrC,GAAA9+C,EAAA8+C,iBAAA,SAAAt3C,GACA,IAAAA,EAAA,MAAAA,EACA,IAAA23C,GAAA33C,EAAAqZ,QAAA,aAAA,GACA,OAAAs+B,IAGAC,EAAAp/C,EAAAo/C,gBAAA,SAAA1gD,GAGA,MAFAA,GAAAogD,EAAApgD,GAEAm/C,EAAAn/C,GAGAsB,GAAAq/C,wBAAA,SAAA3gD,GACA,QAAA0gD,EAAA1gD,UCtLA7B,OAAA,iFAAA,WAAA,MAAA,u2HCDAA,ODGA,qECFA,uDACA,SACAm5B,GAEA,YAEA,IAAArT,GAAAxkB,QAAAwkB,IAEA,QAAA,WAEA,OAEA2f,SAAA,IACA3kC,QAAA,8BACA+B,OACAwM,OAAA,IACAwvC,SAAA,KAGA1lB,SAAAA,EAEA50B,KAAA,SAAApB,EAAA4B,EAAAN,EAAA+6C,GAEA,GAAA5D,IACAjxC,KAAA,GACA+hC,MAAA,GAGAvpC,GAAAkM,OAAAsQ,WAAAygB,sBAAAj9B,EAAAkM,OAAAsQ,WAAAygB,wBAAA,EACAj9B,EAAAuO,UAAAvO,EAAAkM,OAAAsQ,WAAAjO,UAAAvO,EAAAkM,OAAAsQ,WAAAjO,aAIA,IAAAuuC,GAAA,WACA,IAAA,GAAAuB,GAAAzgD,EAAA,EAAAygD,EAAAC,EAAA1gD,GAAAA,IAAA,CACA,GAAA2Z,GAAA8mC,EAAA9mC,aACA+nC,EAAAjB,EAAAiB,aAEA,IAAA/nC,EAAAnV,QAAAmV,EAAAq9B,SACA,OAAA,CAGA,IAAA0K,EAAAl9C,QAAAk9C,EAAA1K,SACA,OAAA,EAIA,OAAA,EAGAyH,GAAAP,qBAAA,qBAAAgB,EAIA,IAAAwB,KACAt+C,GAAAy+C,QAAA,SAAAnC,GACAgC,EAAAx7C,KAAAw5C,IAKAt8C,EAAA04C,YAAA,WACA,GAAA6G,GAAA58B,EAAA81B,EACAz4C,GAAAuO,UAAAzL,KAAAy8C,IAGAv/C,EAAA44C,eAAA,SAAAC,GACA74C,EAAAkM,OAAAsQ,WAAAjO,UAAAvO,EAAAuO,UAAA8tC,EAAAF,gBAAAn8C,EAAAuO,UAAAsqC,GACAyF,EAAAjC,EAAAF,gBAAAmC,EAAAzF,UCpEAh8C,OAAA,mFAAA,WAAA,MAAA,6oLCDAA,ODGA,uECFA,UACA,yDACA,SACAsB,EACA63B,GAEA,YAEA,IAAArT,GAAAxkB,EAAAwkB,KAEA68B,EAAA,CAEA,QACA,SACA,KACA,SACArmB,EACA/J,GAGA,OAEAkT,SAAA,IACA3kC,QAAA,8BACA+B,OACAwM,OAAA,IACAwvC,SAAA,IACAN,oBAAA,IACAqE,OAAA,KAGAzpB,SAAAA,EAEA50B,KAAA,SAAApB,EAAA4B,EAAAN,EAAA+6C,GA2TA,QAAAqD,GAAAC,EAAAzzC,GAMA,QAAA0zC,GAAA59C,EAAAqI,GAEA,GAAAw1C,GAAAx1C,EAAAw1C,mBAEAx1C,GAAAw1C,mBACAx1C,GAAAy1C,UAEAz1C,EAAA01C,WAAA11C,EAAA01C,YAAA7zC,EAAA5B,EAEA,IAAAqI,GAAA,SAAA9N,EAAAm7C,GACAv7C,GAAA,EAEAI,GAiBAq3C,EAAAp5C,MACA+mB,OAAA,qCACA9jB,MAAAlB,IAIAwF,EAAAw1C,aAAAA,GArBA,WAAA79C,GACAqI,EAAAC,GAAA01C,EAAA11C,GACAD,EAAA41C,YAAAt9B,EAAAq9B,EAAAC,iBACA51C,EAAAw1C,aAAAl9B,EAAAq9B,EAAAC,mBAGA,WAAAj+C,IACAqI,EAAAC,GAAA,MAGAD,EAAA41C,YAAAt9B,EAAAtY,EAAA41C,iBACA51C,EAAAw1C,aAAAl9B,EAAAtY,EAAA41C,kBAaA,IAAAx7C,GACAiyB,EAAArF,UAKA,YAAArvB,EACAmI,EAAA/F,OAAAiG,EAAAsI,GAEA,WAAA3Q,EACAmI,EAAA/E,OAAAiF,EAAAsI,GAEA,WAAA3Q,GACAmI,EAAAA,UAAAE,EAAAC,GAAAqI,GAxDA,GAAA+jB,GAAAtH,EAAAuH,OAEAgpB,GAAAA,KACA,IAAAl7C,GAAAk7C,EAAA5hD,MAyDA,KAAA0G,GACAiyB,EAAArF,SAGA,KAAA,GAAAqb,GAAA9uC,EAAA,EAAA8uC,EAAAiT,EAAA/hD,GAAAA,IAAA,CACA,GAAAoE,GAAA0qC,EAAA1qC,KAKAqI,EAAAqiC,EAAAriC,aAEAu1C,GAAA59C,EAAAqI,GAGA,MAAAqsB,GAAAtF,QAOA,QAAA8uB,GAAA/zC,GACA,IAAA,GAAA9B,GAAAzM,EAAA,EAAAyM,EAAA8B,EAAAvO,GAAAA,IAEAyM,EAAAw1C,aAAAl9B,EAAAtY,EAAA41C,iBAIA,QAAAE,KACA,MAAA7D,GAAA8D,cAGA,QAAAC,GAAAh2C,GACA,MAAAA,IAAA,IAAAA,EAAArI,KAGA,QAAAs+C,GAAAj2C,GACA,MAAAA,IAAA,IAAAA,EAAArI,KAGA,QAAAu+C,GAAAl2C,GACAA,EAAAA,KACA,IAAAC,GAAAD,EAAAkC,QAAAlC,EAAA6gC,OACA,OAAA,MAAA5gC,EAGA,QAAAk2C,GAAAn2C,EAAA4P,GACA,QAAA5P,EAAA4P,GAGA,QAAAwmC,GAAAp2C,GACA,GAAAA,GAAAA,EAAA41C,YAEA,IAAA,GAAAS,GADAT,EAAA51C,EAAA41C,YACAriD,EAAA,EAAA8iD,EAAAT,EAAAriD,GAAAA,IACA,GAAA,SAAA8iD,GAAA,QAAAA,EACA,OAAA,CAIA,QAAA,EAGA,QAAAC,GAAAx0C,GACA,IAAA,GAAA9B,GAAAzM,EAAA,EAAAyM,EAAA8B,EAAAvO,GAAAA,IACA,GAAAyiD,EAAAh2C,GACA,MAAAA,GAKA,QAAAu2C,GAAAz0C,GAGA,IAAA,GAAA9B,GAFAuJ,KAEAhW,EAAA,EAAAyM,EAAA8B,EAAAvO,GAAAA,IAEA0iD,EAAAj2C,KAEAk2C,EAAAl2C,IAAAo2C,EAAAp2C,IACAuJ,EAAA9Q,KAAAuH,EAMA,OAAAuJ,GAGA,QAAAitC,GAAA10C,EAAAsvC,GAIA,IAAA,GAAApxC,GAHAy2C,EAAAC,EAAA50C,EAAAsvC,GACAxpC,KAEArU,EAAA,EAAAyM,EAAAy2C,EAAAljD,GAAAA,IAAA,CACA,GAAAojD,GAAA32C,EAAAoxC,EACAxpC,GAAA+uC,GAAA32C,EAGA,MAAA4H,GAGA,QAAA8uC,GAAA50C,EAAAsvC,GAGA,IAAA,GAAApxC,GAFAuJ,KAEAhW,EAAA,EAAAyM,EAAA8B,EAAAvO,GAAAA,IAEA0iD,EAAAj2C,IAEAm2C,EAAAn2C,EAAAoxC,KAAA8E,EAAAl2C,IACAuJ,EAAA9Q,KAAAuH,EAOA,OAAAuJ,GAGA,QAAAqtC,GAAA52C,GACA,GAAAA,EAAA,CACA,GAAA41C,GAAA51C,EAAA41C,WAOA51C,GAAA41C,YALAA,GAAAA,EAAAliD,OAIAkiD,GAAA,IAAAA,EAAAliD,OACAsM,EAAA41C,YAAA19B,QAAA,UAIA,QARA,SAaA,QAAA2+B,GAAA72C,GACA,GAAAA,EAAA,CACA,GAAA41C,GAAA51C,EAAA41C,WAEA,IAAAA,GAAA,IAAAA,EAAAliD,OAAA,CACA,GAAAy9C,GAAAyE,EAAA,EAEA,SAAAzE,EACAnxC,EAAA41C,aAAA,SAAA,UAEA,SAAAzE,IACAnxC,EAAA41C,oBAGA,CAEA51C,EAAA41C,cAEA,KAAA,GAAAS,GAAA9iD,EAAA,EAAA8iD,EAAAT,EAAAriD,GAAAA,IACA,SAAA8iD,GACAr2C,EAAA41C,YAAAn9C,KAAA49C,KAlhBA1gD,EAAAmhD,yBAAA,EAMAnhD,EAAA+yB,OAAA,SAAA,SAAAquB,EAAAC,GACArhD,EAAAshD,oBAAAF,IAAAC,GACArhD,EAAAuhD,oBAGAvhD,EAAAmhD,yBAAA,IAGAnhD,EAAAkzB,IAAA,aAAA,WACAlzB,EAAAshD,oBACAthD,EAAAuhD,oBAGAvhD,EAAAmhD,yBAAA,GAKA,IAAAh3C,GAAAgvB,EAAAnwB,SAAA,iBAEAw4C,EAAAxhD,EAAAo7C,oBAAAhoB,SAAApzB,GAEAs8C,EAAAt8C,EAAAyhD,qBAEAt1C,EAAA,KACAu1C,EAAA,KACAC,EAAA,KACAC,EAAA,KAEAC,GACAC,aAAAtC,EACAS,aAAA,SAGA8B,GACA//C,KAAA,OACAsI,GAAA,MAGA81C,EAAApgD,EAAAogD,cAAAz9B,EAAAo/B,GAIAjF,EAAA,WACA,GAAA7K,GAAAkO,GAEA,OAAAlO,IAAAA,EAAAhiB,QAAAgiB,EAAAhiB,OAAA+xB,UAGA3F,GAAAP,qBAAA,uBAAAgB,GAIA0E,EAAA5uB,QAAA,kBAAA,SAAA,SAAA1mB,GACA,GAAAwqB,GAAAtH,EAAAuH,OAwBA,OAtBAzqB,IAAAA,EAAA5B,GAOAH,EAAA9F,MACAy9C,aAAAtC,EACAO,WAAA7zC,EAAA5B,IACA,SAAAzF,EAAAm7C,GAEAn7C,EACA6xB,EAAAI,OAAAjyB,GAGA6xB,EAAArF,QAAA2uB,KAdAtpB,EAAArF,YAoBAqF,EAAAtF,WAMApxB,EAAAiiD,mBAAAT,EAAAjvB,QAAA,iBAAA,SAAAuuB,GACA30C,EAAAnM,EAAAmM,eAAAwW,EAAAm+B,OACAZ,EAAA/zC,GAEAu1C,EAAAf,EAAAx0C,GACAnM,EAAAkiD,0BAAAzB,EAAAiB,GAEAC,EAAAd,EAAA10C,EAAA,WACAy1C,EAAAf,EAAA10C,EAAA,YAKAnM,EAAAmiD,+BAAA,WACAniD,EAAAkiD,2BAEAR,EAIAT,EAAAS,IAHAA,EAAAvjD,EAAAI,QAAAgO,OAAA,IAAAvK,KAAA,GAAA6/C,GACA11C,EAAArJ,KAAA4+C,IAKAtB,EAAA91C,GAAA,KACA83C,KAIAV,GACAR,EAAAQ,IAOA1hD,EAAAqiD,WAAA,WACAjC,EAAAp+C,KAAA,SAAAo+C,EAAAp+C,KAAA,QAAA,OACAogD,KAGApiD,EAAAsiD,sBAAA,SAAAn2C,GACA,MAAAA,GACAy0C,EAAAz0C,GADA,OAKA,IAAAi2C,GAAApiD,EAAAoiD,sBAAA,WACA,GAAAnQ,GAAAkO,GAEA,IAAAlO,EAAA,CAEAA,EAAA/vC,aAAA,iBAAA,GACA+vC,EAAA/vC,aAAA,aAAA,EAEA,IAAAoI,GAAA81C,EAAA91C,EAEA,IAAAA,EAAA,CACA,GAAAi4C,GAAA,SAAAnC,EAAAp+C,KAAA4/C,EAAAD,EACAn1B,EAAA+1B,EAAAj4C,EAEA,IAAAkiB,GAAAi0B,EAAAj0B,GACA,MAAAylB,GAAA/vC,aAAA,aAAA,KAMAlC,GAAAshD,iBAAA,WAIA,IAAAthD,EAAAmhD,wBAAA,OAAA,CAEA,IAAAlP,GAAAkO,GAEA,OAAAngD,GAAAkiD,4BAAA9B,EAAA91C,IAAA2nC,GAAAA,EAAAhiB,QAAAgiB,EAAAhiB,OAAA+xB,UAIA,IAAAT,GAAAvhD,EAAAuhD,kBAAA,WAEA,IAAAvhD,EAAAmhD,wBAEA,YADAnhD,EAAAmhD,yBAAA,EAIA,IAAAlP,GAAAkO,IAEA71C,EAAA81C,EAAA91C,GAEAi4C,EAAA,SAAAnC,EAAAp+C,KAAA4/C,EAAAD,EACAn1B,EAAA+1B,EAAAj4C,EAEA,IAAAkiB,EAAA,CACAy0B,EAAAz0B,EAEA,IAAAs0B,GAAA30C,CACAA,GAAAnM,EAAAmM,iBAEA,KAAA,GAAAq2C,GAAA5kD,EAAA,EAAA4kD,EAAA1B,EAAAljD,GAAAA,IACA4kD,IAAAh2B,GACArgB,EAAArJ,KAAA0/C,EAIAr2C,GAAArJ,KAAA0pB,OAEA,CACAA,GAAAxqB,KAAA,EACA,IAAAiY,GAAA,SAAAmmC,EAAAp+C,KAAA,SAAA,SACAwqB,GAAAvS,GAAA3P,EAEAnM,EAAAI,OAAAiuB,EAAAq1B,GACA11C,EAAArJ,KAAA0pB,GACA+1B,EAAAj4C,GAAAkiB,EAGA4zB,EAAA91C,GAAA,KAEA2nC,EAAA/vC,aAAA,iBAAA,GACA+vC,EAAAxC,eAGAzvC,GAAAyiD,WAAA,SAAAhmB,GACA,GAAAqL,GAAArL,EAAAqL,OAEA,IAAA,KAAAA,EAAA,CAEArL,EAAAC,gBAEAD,EAAAC,gBAGA,IAAAuV,GAAAkO,GAEA,OAAAC,GAAA91C,IAAA2nC,KAAAA,EAAAhiB,SAAAgiB,EAAAhiB,OAAA+xB,YAAAT,MAMAvhD,EAAA0iD,qBAAA,SAAAl2B,GACA00B,EAAA10B,GACA41B,IAKA,IAAAlG,MAEAyG,EAAA,SAAAz2C,EAAAyG,GACA,GAAAgtC,KAGA,IAFAzD,KAEAl8C,EAAAkiD,0BAEA,IAAA,GAAA11B,GAAApW,EAAA,EAAAoW,EAAArgB,EAAAiK,GAAAA,IAEAkqC,EAAA9zB,IAAAi0B,EAAAj0B,IAGA00B,EAAA10B,EAKA,KAAA,GAAAniB,GAAAzM,EAAA,EAAAyM,EAAA8B,EAAAvO,GAAAA,IAAA,CACA,GAAAqiD,GAAA51C,EAAA41C,YACAJ,EAAAx1C,EAAAw1C,cAEAS,EAAAj2C,IAAAg2C,EAAAh2C,MAEAA,EAAAC,IAGA21C,EAAAliD,QAAA8hD,EAAA9hD,OAEA4hD,EAAA78C,MACAd,KAAA,SACAqI,cAAAA,IAMA41C,EAAAliD,SAAA8hD,EAAA9hD,QAEA4hD,EAAA78C,MACAd,KAAA,SACAqI,cAAAA,IASA41C,EAAAliD,QAEA4hD,EAAA78C,MACAd,KAAA,SACAqI,cAAAA,KAOAq1C,EAAAC,EAAAzzC,GAAAolB,KAAA,WAKA,MAJA4qB,IAAAA,EAAAn+C,SACAm+C,EAAA,MAGA,kBAAAvpC,GACAA,EAAAupC,GADA,SAuFAG,GAAAlB,gCAAAwH,SC3aA9lD,OAAA,+DAAA,WAAA,MAAA,6sECDAA,ODGA,wDCFA,mDACA,SACAm5B,GAEA,YAEA,QACA,SACA,SACA,KACA,SACA,SACAh2B,EACAk8B,EACA9M,EACA+J,GAGA,GAAAkhB,GAAAr6C,EAAAq6C,YAAAr6C,EAAA84B,aAAA1F,SAAApzB,GAEA+L,EAAAotB,EAAAnwB,SAAA,SAEAhJ,GAAA4iD,qBAAA,EAIAvI,EAAAznB,QAAA,uBAAA,WACA,GAAA8D,GAAAtH,EAAAuH,OAYA,OAVA5qB,GAAAI,eAAA,SAAAtH,EAAAwa,GACAxa,EACA6xB,EAAAI,OAAAjyB,GAGA6xB,EAAArF,QAAAhS,KAKAqX,EAAAtF,UAIAipB,EAAAznB,QAAA,uBAAA,uBAAA,SAAAiwB,GACAA,EAAAA,KAGA,KAAA,GAAAzhD,GAFA0hD,EAAAD,EAAAC,UAEAllD,EAAA,EAAAwD,EAAA0hD,EAAAllD,GAAAA,IACA,GAAA,WAAAwD,EAAA2hD,IACA,OAAA,CAIA,QAAA,KAMA1I,EAAA9nB,QAAA,sBAAA,SAAAqwB,GACA5iD,EAAA4iD,oBAAAA,IAKA5iD,EAAAs6C,UAAA,SAAA7d,EAAAvwB,GACAuwB,EAAAE,kBAEAT,EAAAvO,MACAkP,YAAA,eACAp6B,KAAA,KACAmzB,WAAA,qBACAI,SAAAA,EACA3E,SACAnlB,OAAA,WAAA,MAAAA,IACAmuC,YAAA,WAAA,MAAAA,OAGAzmC,OAAA0d,KAAA,WACA+oB,EAAAnqB,QAAA,YACA,WACAmqB,EAAAnqB,QAAA,kBASArzB,OC3FA,mDACA,WACA,SACAsB,GAEA,YAWA,SAAA6kD,GAAAtkD,EAAAgD,GACA,GAAAuhD,EAAA/nC,KAAAxc,GAAA,CAEA,MAAAgD,EAAA,KACAA,EAAA,IAAAA,EAGA,IAAA3D,GAAA2D,EAAA3D,OAAA,CACA,OAAA2D,EAAA3D,KACA2D,GAAA,KAIA,MAAAA,GAGA,QAAAwhD,GAAAxkD,EAAAgD,GAUA,MATAuhD,GAAA/nC,KAAAxc,KACA,MAAAgD,EAAA,KACAA,EAAAA,EAAA8G,MAAA,EAAA9G,EAAA3D,SAGA,MAAA2D,EAAA8G,MAAA,MACA9G,EAAAA,EAAA8G,MAAA,EAAA,MAGA9G,EAIA,QAAAyhD,GAAAzkD,GACA,MAAA0kD,GAAAloC,KAAAxc,GAIA,QAAA2kD,GAAA3hD,GACA,MAAA4hD,GAAApoC,KAAAxZ,GAGA,QAAA6hD,GAAAtxC,GAUA,MATAzS,GAAA6G,OAAAC,KAAA2L,GAAA,SAAAvT,GAEA,MAAAA,EAAA,IAAA0B,EAAA6R,EAAAvT,MAAAuT,EAAAvT,GAAAX,aACAkU,GAAAvT,IAEAmqB,EAAA5W,EAAAvT,KAAA0B,EAAA6R,EAAAvT,OACAuT,EAAAvT,GAAA6kD,EAAAtxC,EAAAvT,OAGAuT,EA1DA,GAAA0Q,GAAAxkB,EAAAwkB,KACAnjB,EAAArB,EAAA+I,QACA9G,EAAAjC,EAAAiC,QACAyoB,EAAA1qB,EAAA0qB,SAEA22B,EAAA,OACAgE,EAAA,UAEAP,EAAA,QA8BAG,EAAA,aAKAE,EAAA,iBAkBA,QACA,SACA,aACA,KACA,gBACA,SACA,SACA,cACA,SACAtjD,EACA6zB,EACAzE,EACA0E,EACAqF,EACAjtB,EACAmuC,GAgIA,QAAAhQ,GAAA7oB,EAAA3c,EAAA2vB,GACAX,EAAArS,GAAA8P,KAAA,SAAA0D,GACAlB,EAAAO,UACAxK,OAAAmL,EACA5uB,QAAAvB,EAAAA,EAAAuB,QAAA,GACAouB,UAAAA,EACA90B,MAAAM,MAnIA,GAAA+L,GAAAotB,EAAAnwB,SAAA,UAEAiyC,EAAAj7C,EAAAi7C,gBAAAZ,EAAAjnB,SAAApzB,EAEAA,GAAAkzB,IAAA,uBAAA,WACAlzB,EAAAk9B,aAGAl9B,EAAAyjD,UAAA,EAKAzjD,EAAAkM,OAAAyW,EAAAzW,OAGAlM,EAAAkM,OAAA1E,KAAAxH,EAAAkM,OAAA1E,KAGAxH,EAAAkM,OAAAsQ,WAAAxc,EAAAkM,OAAAsQ,eAEAxc,EAAAkM,OAAAsQ,WAAAknC,YAAA1jD,EAAAkM,OAAAsQ,WAAAknC,YACA1jD,EAAAkM,OAAAsQ,WAAAqd,SAAA30B,SAAAlF,EAAAkM,OAAAsQ,WAAAqd,UAAA,EAAA,IACA75B,EAAAkM,OAAAsQ,WAAAk+B,MAAA16C,EAAAkM,OAAAsQ,WAAAk+B,OAAA8I,EACAxjD,EAAAkM,OAAAsQ,WAAAoe,QAAA56B,EAAAkM,OAAAsQ,WAAAoe,UAAA,EACA56B,EAAAkM,OAAAsQ,WAAAygB,sBAAAj9B,EAAAkM,OAAAsQ,WAAAygB,wBAAA,CAEA,IAAAjxB,GAAAhM,EAAAkM,OAAA5B,EAGAtK,GAAAkM,OAAAsQ,WAAAjO,UAAAvO,EAAAkM,OAAAsQ,WAAAjO,aAGA,IAAA8b,GAAArqB,EAAAkM,OAAAvE,MAAA3H,EAAAkM,OAAAvE,UAGAA,KACAg8C,IAEA,KAAA,GAAAjlD,KAAA2rB,GAAA,CACA,GAAA3oB,GAAA2oB,EAAA3rB,EAEAykD,GAAAzkD,GAOAilD,EAAA7gD,MACApE,IAAAA,EACAgD,MAAAA,IARAiG,EAAA7E,MACApE,IAAAA,EACAgD,MAAAwhD,EAAAxkD,EAAAgD,KAWA1B,EAAAkM,OAAAvE,MAAAA,EAIAszC,EAAAroB,QAAA,SAAA5yB,EAAAkM,QAEA+uC,EAAAroB,QAAA,oBAAA,SAAA,SAAA1mB,GACA,GAAAwqB,GAAAtH,EAAAuH,OAsBA,OApBAzqB,IAAAA,EAAA5B,GAQAyB,EAAAI,eAAAD,EAAA5B,GAAA,SAAAzF,EAAAm7C,GAEAn7C,EACA6xB,EAAAI,OAAAjyB,GAGA6xB,EAAArF,QAAA2uB,KAZAtpB,EAAArF,SACAyxB,WAiBApsB,EAAAtF,WAIA6pB,EAAAroB,QAAA,YAAA,mBAAA,SAAAgxB,GACA,GAAAlI,KAIA,OAHAl8C,GAAAokD,EAAAd,MAAA,SAAA1hD,GACAs6C,EAAAt6C,EAAA2hD,MAAA,IAEArH,KAKAT,EAAA1oB,QAAA,WAAA,SAAAmpB,GACA17C,EAAA07C,SAAAA,GAKA,IAAAmI,GAAA,WACA,OAAA,EAGA7jD,GAAA+gC,QAAA8iB,EAEA7jD,EAAA8jD,2BAAA,SAAAj4B,GACA7rB,EAAA+gC,QAAAlV,GAAAg4B,EAGA,IAAA5H,GAAA,SAAA/vC,EAAAyG,GACA,MAAAA,KAGA3S,GAAAm7C,gCAAA,SAAAtvB,GACAowB,EAAApwB,GAAAowB,GAgBAj8C,EAAA0O,OAAA,WACA1O,EAAAm0B,WAAA,aAMA,KAAA,GAAA2c,GAHAiT,GAAA/jD,EAAAkM,OAAAvE,WAAA4a,OAAAohC,GACAK,KAEApmD,EAAA,EAAAkzC,EAAAiT,EAAAnmD,GAAAA,IAAA,CAEA,GAAAc,GAAAoyC,EAAApyC,IACAgD,EAAAovC,EAAApvC,KAEA,KAAAyhD,EAAAzkD,GAkBA,GAfAgD,EAAAshD,EAAAtkD,EAAAgD,GAEA2hD,EAAA3hD,GAEA,KAAAhD,EAAA6D,QAAA,gBACA7D,GAAA,cAIA,KAAAA,EAAA6D,QAAA,gBACA7D,EAAAA,EAAA8J,MAAA,EAAA9J,EAAA6D,QAAA,gBAKA,oBAAA7D,GAAA,OAAAA,EAAA8J,MAAA,KACA,GAAA,gBAAA9G,GAAA,CACAA,EAAAA,EAAA0f,MAAA,IACA,KAAA,GAAAxJ,GAAA,EAAAA,EAAAlW,EAAA3D,OAAA6Z,IACAlW,EAAAkW,KACAlW,EAAAkW,GAAAlW,EAAAkW,GAAAwD,aAKA1Z,GAAA,GAAAA,CAIAsiD,GAAAtlD,GAAAgD,EAGA1B,EAAAkM,OAAAgyC,uBACA8F,EAAA9F,sBAAA,EAGA,IAAA+F,IACA35C,GAAA0B,EACAxE,KAAAxH,EAAAkM,OAAA1E,KACAs6C,aAAAtC,EACA73C,MAAAq8C,EACAxnC,YACAknC,YAAA1jD,EAAAkM,OAAAsQ,WAAAknC,YACA7pB,SAAA30B,SAAAlF,EAAAkM,OAAAsQ,WAAAqd,UAAA,EAAA,IACA6gB,MAAA16C,EAAAkM,OAAAsQ,WAAAk+B,OAAA8I,EACA5oB,QAAA56B,EAAAkM,OAAAsQ,WAAAoe,QACArsB,UAAAvO,EAAAkM,OAAAsQ,WAAAjO,UACA0uB,sBAAAj9B,EAAAkM,OAAAsQ,WAAAygB,uBAIAsmB,GAAAU,GAEAl4C,EAAAxB,KAAA05C,EAAA,SAAAp/C,EAAAq/C,GACA,MAAAr/C,GACAwlC,EAAA,oBAAAxlC,GAAA,IAGAo/C,EAAA35C,GAAA0B,EAAAA,GAAAk4C,EAAA55C,OAEA2xC,GAAAgI,EAAA,SAAAp/C,GAEA,GAAAA,EACA,GAAAzE,EAAAyE,IAAAA,EAAA9G,OACA,IAAA,GAAAgI,GAAAnI,EAAA,EAAAmI,EAAAlB,EAAAjH,GAAAA,IACAysC,EAAAtkC,EAAA8jB,OAAA9jB,EAAAA,MAAA,IAAAnI,OAIAysC,GAAAxlC,EAAAglB,OAAAhlB,EAAAkB,OAAA,OAKA/F,GAAAwyC,eASAxyC,EAAAmkD,cAAA,WACAnkD,EAAAyjD,UAAA,GAGAzjD,EAAAokD,gBAAA,WACApkD,EAAAyjD,UAAA,GAGAzjD,EAAAA,UAAA,WACA+L,EAAAA,UAAA/L,EAAAkM,OAAA5B,GAAA,SAAAzF,GACA,MAAAA,GACAwlC,EAAA,wBAAAxlC,GAAA,OAGA7E,GAAAwyC,gBCrUA31C,OAAA,wBACA,UAGA,oCACA,8CACA,sDACA,uDACA,uDACA,yDAGA,0CAGA,sCAEA,SACAsB,EAGAkmD,EACAC,EACAC,EACAC,EACAC,EACAC,EAGAC,EAGAC,GAEA,YAEA,IAAAC,GAAA1mD,EAAAvB,OAAA,uBACA,gBAkBA,OAdAioD,GAAA1jD,UAAA,qBAAAkjD,GACAQ,EAAA1jD,UAAA,6BAAAmjD,GACAO,EAAA1jD,UAAA,oCAAAojD,GACAM,EAAA1jD,UAAA,qCAAAqjD,GACAK,EAAA1jD,UAAA,qCAAAsjD,GACAI,EAAA1jD,UAAA,uCAAAujD,GAGAG,EAAAjvB,WAAA,iBAAA+uB,GAIAE,EAAAjvB,WAAA,qBAAAgvB,GAEAC,IChEAhoD,ODmEA,uBClEA,qBACA,qBACA,sBAEA,sBACA,wBACA,yBACA,yBACA,sBAEA,2CACA,4CACA,oDACA,8CAEA,qBACA,yBACA,yBACA,qBACA,wBACA,2BACA,qBACA,uBACA,oBAEA,2BACA,WACA,YA0BA,SAAAioD,KACA,GAAA3mD,GAAAR,QAAA,WACAS,EAAAD,EAAAS,OAEAR,GAAA2mD,UAAAC,MAAA,WACA7mD,EAAA8mD,UAAAF,UACA,eACA,qBACA,wBAGAr3B,WAAA,WACA,GAAAw3B,GAAA9mD,EAAA,cACA8mD,GAAAnnD,QACAmnD,EAAA,GAAA7d,SAEA,OAKA,QAAA7Z,KAIA,QAAA23B,KAIA,IAAA,GAHAC,GAAAjnD,EAAAS,QAAA,QACAiI,KACAqH,GAAA,OAAA,WAAA,YAAA,cACAtQ,EAAA,EAAAA,EAAAsQ,EAAAnQ,OAAAH,IACAiJ,EAAAqH,EAAAtQ,IAAAwnD,EAAAvmD,KAAAqP,EAAAtQ,GAEA,OAAAiJ,GAVA,GAAA1I,GAAAR,QAAA,WAaA0nD,GAZAlnD,EAAAS,SAaA,cACA,yBACA,UACA,aACAjB,QAAA,sBAAA6J,KACA7J,QAAA,0BAAA6J,KACA7J,QAAA,0BAAA6J,KACA7J,QAAA,sBAAA6J,KACA7J,QAAA,yBAAA6J,KACA7J,QAAA,4BAAA6J,KACA7J,QAAA,sBAAA6J,KACA7J,QAAA,wBAAA6J,KACA7J,QAAA,qBAAA6J,MACA+a,OAAA+iC,EAAArjB,IAAA,SAAAtjC,GACA,MAAAA,GAAA4mD,iBAGAC,EAAAL,GAqBA,IAnBAvsB,EAAAz6B,EAAAvB,OAAA,eAAAyoD,GAEAzsB,EAAAne,QAAA,qBAAA9c,QAAA,sDACAi7B,EAAAlI,SAAA,gBAAA/yB,QAAA,gDAEAA,QAAA,0BAAAi7B,EAAA4sB,EAAA,aACA7nD,QAAA,uBAAAi7B,EAAA4sB,GAGA5sB,EAAA/xB,OAAAlJ,QAAA,0BACAi7B,EAAA/xB,OAAAlJ,QAAA,wBACAi7B,EAAA/xB,OAAAlJ,QAAA,2BAEAi7B,EAAAhD,WAAA,qBAAAj4B,QAAA,6CACAi7B,EAAAhD,WAAA,sBAAAj4B,QAAA,8CAKA,mBAAAX,QAAAg+B,iBAAAh+B,OAAAg+B,gBAAAyqB,cAAA,CACA,GAAAC,GAAA1oD,OAAAg+B,gBAAAyqB,kBAIA78C,MAEA,UACA,QACA,UACA,OACA,MACA,SACA,WAEA,cACA,UAEA,WACA,gBACA,QACA,UACA,cAEA1B,QAAA,SAAA+S,GACAyrC,EAAAzrC,KACArR,EAAAqR,GAAAyrC,EAAAzrC,MAKAtc,QAAAkJ,OAAA+B,GAGAjL,QAAA+nD,EAAAC,SAAA,WAKAxnD,EAAAvB,OAAA,sBAAA8oD,EAAAL,QAEAP,EAAA5lD,MAAAF,KAAAG,iBAKAhB,GAAAvB,OAAA,0BASAe,WAAA,WACAmnD,MAlJA,GAAAc,GAAA5oD,OAAA6oD,oBACAP,EAAAtoD,OAAA8oD,uBAEAnoD,SAAAkJ,QACAk/C,SAAAH,GAGA,IAAAhtB,GAEA+sB,GACA,sBACApjC,OAAA+iC,EAAArjB,IAAA,SAAA+jB,GACA,MAAAA,GAAAC,qBAoJAtoD,SAAAgoD,EAAAn4B","sourcesContent":["!function(e){if(\"object\"==typeof exports&&\"undefined\"!=typeof module)module.exports=e();else if(\"function\"==typeof define&&define.amd)define('camunda-bpm-sdk-js',[],e);else{var f;\"undefined\"!=typeof window?f=window:\"undefined\"!=typeof global?f=global:\"undefined\"!=typeof self&&(f=self),f.CamSDK=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error(\"Cannot find module '\"+o+\"'\")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\n'use strict';\n\n// exposify: CamSDK.Form\nvar CamundaForm = _dereq_('./../../forms/camunda-form');\n\nvar angular = (window.angular);\nvar $ = CamundaForm.$;\nvar constants = _dereq_('./../../forms/constants');\n\n\nvar CamundaFormAngular = CamundaForm.extend(\n{\n\n  renderForm: function(formHtmlSource) {\n    var self = this;\n\n    // first add the form to the DOM:\n    CamundaForm.prototype.renderForm.apply(this, arguments);\n\n    // next perform auto-scope binding for all fields which do not have custom bindings\n    function autoBind(key, el) {\n      var element = $(el);\n      if(!element.attr('ng-model')) {\n        var camVarName = element.attr(constants.DIRECTIVE_CAM_VARIABLE_NAME);\n        if(!!camVarName) {\n          element.attr('ng-model', camVarName);\n        }\n      }\n    }\n\n    for(var i = 0; i < this.formFieldHandlers.length; i++) {\n      var handler = this.formFieldHandlers[i];\n      var selector = handler.selector;\n      $(selector, self.formElement).each(autoBind);\n    }\n\n    // finally compile the form with angular and linked to the current scope\n    var injector = self.formElement.injector();\n    if (!injector) { return; }\n\n    var scope = self.formElement.scope();\n    injector.invoke(['$compile', function($compile) {\n      $compile(self.formElement)(scope);\n    }]);\n  },\n\n  executeFormScript: function(script) {\n\n    // overrides executeFormScript to make sure the following variables / functions are available to script implementations:\n\n    // * $scope\n    // * inject\n\n    var injector = this.formElement.injector();\n    var scope = this.formElement.scope();\n\n    (function(camForm, $scope) {\n\n      // hook to create the service with injection\n      var inject = function(extensions) {\n        // if result is an array or function we expect\n        // an injectable service\n        if (angular.isFunction(extensions) || angular.isArray(extensions)) {\n          injector.instantiate(extensions, { $scope: scope });\n        } else {\n          throw new Error('Must call inject(array|fn)');\n        }\n      };\n\n      /* jshint evil: true */\n      eval(script);\n      /* jshint evil: false */\n\n    })(this, scope);\n\n  },\n\n  fireEvent: function() {\n\n    // overrides fireEvent to make sure event listener is invoked in an apply phase\n\n    var self = this;\n    var args = arguments;\n    var scope = this.formElement.scope();\n\n    var doFireEvent = function() {\n      CamundaForm.prototype.fireEvent.apply(self, args);\n    };\n\n    var injector = self.formElement.injector();\n    if (!injector) { return; }\n\n    injector.invoke(['$rootScope', function($rootScope) {\n      var phase = $rootScope.$$phase;\n        // only apply if not already in digest / apply\n        if(phase !== '$apply' && phase !== '$digest') {\n          scope.$apply(function() {\n            doFireEvent();\n          });\n        } else {\n          doFireEvent();\n        }\n\n    }]);\n  }\n});\n\nmodule.exports = CamundaFormAngular;\n\n},{\"./../../forms/camunda-form\":25,\"./../../forms/constants\":26}],2:[function(_dereq_,module,exports){\n'use strict';\n\nvar angular = (window.angular),\n    CamundaFormAngular = _dereq_('./camunda-form-angular'),\n    isType = _dereq_('./../../forms/type-util').isType;\n\n// define embedded forms angular module\nvar ngModule = angular.module('cam.embedded.forms', []);\n\n/**\n * Exposes 'cam-variable-name' as angular directive making sure\n * that updates to a HTML Control made through the camunda form\n * infrastructure are propagated over ngModel bindings.\n */\nngModule.directive('camVariableName', ['$rootScope', function($rootScope) {\n  return {\n    require: 'ngModel',\n    link: function(scope, elm, attrs, ctrl) {\n\n      elm.on('camFormVariableApplied', function(evt, value) {\n        var phase = $rootScope.$$phase;\n        // only apply if not already in digest / apply\n        if(phase !== '$apply' && phase !== '$digest') {\n          scope.$apply(function() {\n            ctrl.$setViewValue(value);\n          });\n        } else {\n          ctrl.$setViewValue(value);\n        }\n      });\n\n    }\n  };\n}]);\n\nngModule.directive('camVariableType', [function() {\n\n  return {\n\n    require: 'ngModel',\n    link: function($scope, $element, $attrs, ctrl) {\n\n      var validate = function(viewValue) {\n\n        var type = $attrs.camVariableType;\n\n        ctrl.$setValidity('camVariableType', true );\n\n        if (viewValue || viewValue === false || type === 'Bytes') {\n\n          if (ctrl.$pristine) {\n            ctrl.$pristine = false;\n            ctrl.$dirty = true;\n            $element.addClass('ng-dirty');\n            $element.removeClass('ng-pristine');\n          }\n\n          if(['Boolean', 'String', 'Bytes'].indexOf(type) === -1 && !isType(viewValue, type)) {\n            ctrl.$setValidity('camVariableType', false );\n          }\n\n          if($attrs.type==='file' && type === 'Bytes' && $element[0].files && $element[0].files[0] && $element[0].files[0].size > ($attrs.camMaxFilesize || 5000000)) {\n            ctrl.$setValidity('camVariableType', false );\n          }\n\n        }\n\n        return viewValue;\n      };\n\n      ctrl.$parsers.unshift(validate);\n      ctrl.$formatters.push(validate);\n\n      $attrs.$observe('camVariableType', function(comparisonModel){\n        return validate(ctrl.$viewValue);\n      });\n\n      $element.bind('change', function() {\n        validate(ctrl.$viewValue);\n        $scope.$apply();\n      });\n\n    }};\n}]);\n\nmodule.exports = CamundaFormAngular;\n\n\n},{\"./../../forms/type-util\":31,\"./camunda-form-angular\":1}],3:[function(_dereq_,module,exports){\n/** @namespace CamSDK */\n\nmodule.exports = {\n  Client: _dereq_('./../api-client'),\n  Form: _dereq_('./forms'),\n  utils: _dereq_('./../utils')\n};\n\n\n},{\"./../api-client\":6,\"./../utils\":33,\"./forms\":2}],4:[function(_dereq_,module,exports){\n'use strict';\n\n// var HttpClient = require('./http-client');\nvar Events = _dereq_('./../events');\nvar BaseClass = _dereq_('./../base-class');\n\n\nfunction noop() {}\n\n/**\n * Abstract class for resources\n *\n * @class\n * @augments {CamSDK.BaseClass}\n * @memberof CamSDK.client\n *\n * @borrows CamSDK.Events.on                        as on\n * @borrows CamSDK.Events.once                      as once\n * @borrows CamSDK.Events.off                       as off\n * @borrows CamSDK.Events.trigger                   as trigger\n *\n * @borrows CamSDK.Events.on                        as prototype.on\n * @borrows CamSDK.Events.once                      as prototype.once\n * @borrows CamSDK.Events.off                       as prototype.off\n * @borrows CamSDK.Events.trigger                   as prototype.trigger\n *\n *\n * @example\n *\n * // create a resource Model\n * var Model = AbstractClientResource.extend({\n *   apiUri: 'path-to-the-endpoint'\n *   doSomethingOnInstance: function() {\n *     //\n *   }\n * }, {\n *   somethingStatic: {}\n * });\n *\n * // use the generated Model statically\n * // with events\n * Model.on('eventname', function(results) {\n *   // You probably have something like\n *   var total = results.count;\n *   var instances = results.items;\n * });\n * Model.list({ nameLike: '%call%' });\n *\n * // or alternatively by using a callback\n * Model.list({ nameLike: '%call%' }, function(err, results) {\n *   if (err) {\n *     throw err;\n *   }\n *\n *   var total = results.count;\n *   var instances = results.items;\n * });\n *\n * var instance = new Model();\n * instance.claim(function(err, result) {\n *\n * });\n */\nvar AbstractClientResource = BaseClass.extend(\n/** @lends AbstractClientResource.prototype */\n{\n  /**\n   * Initializes a AbstractClientResource instance\n   *\n   * This method is aimed to be overriden by other implementations\n   * of the AbstractClientResource.\n   *\n   * @method initialize\n   */\n  initialize: function() {\n    // do something to initialize the instance\n    // like copying the Model http property to the \"this\" (instanciated)\n    this.http = this.constructor.http;\n  }\n},\n\n\n/** @lends AbstractClientResource */\n{\n  /**\n   * Path used by the resource to perform HTTP queries\n   *\n   * @abstract\n   * @memberOf CamSDK.client.AbstractClientResource\n   */\n  path: '',\n\n  /**\n   * Object hosting the methods for HTTP queries.\n   *\n   * @abstract\n   * @memberof CamSDK.client.AbstractClientResource\n   */\n  http: {},\n\n\n\n  /**\n   * Create an instance on the backend\n   *\n   * @abstract\n   * @memberOf CamSDK.client.AbstractClientResource\n   *\n   * @param  {!Object|Object[]}  attributes\n   * @param  {requestCallback} [done]\n   */\n  create: function(attributes, done) {},\n\n\n  /**\n   * Fetch a list of instances\n   *\n   * @memberof CamSDK.client.AbstractClientResource\n   *\n   * @fires CamSDK.AbstractClientResource#error\n   * @fires CamSDK.AbstractClientResource#loaded\n   *\n   * @param  {?Object.<String, String>} params\n   * @param  {requestCallback} [done]\n   */\n  list: function(params, done) {\n    // allows to pass only a callback\n    if (typeof params === 'function') {\n      done = params;\n      params = {};\n    }\n    params = params || {};\n    done = done || noop;\n\n    // var likeExp = /Like$/;\n    var self = this;\n    var results = {\n      count: 0,\n      items: []\n    };\n\n    // until a new webservice is made available,\n    // we need to perform 2 requests\n    return this.http.get(this.path +'/count', {\n      data: params,\n      done: function(err, countRes) {\n        if (err) {\n          /**\n           * @event CamSDK.AbstractClientResource#error\n           * @type {Error}\n           */\n          self.trigger('error', err);\n          return done(err);\n        }\n\n        results.count = countRes.count;\n\n        self.http.get(self.path, {\n          data: params,\n          done: function(err, itemsRes) {\n            if (err) {\n              /**\n               * @event CamSDK.AbstractClientResource#error\n               * @type {Error}\n               */\n              self.trigger('error', err);\n              return done(err);\n            }\n\n            results.items = itemsRes;\n            // QUESTION: should we return that too?\n            results.firstResult = parseInt(params.firstResult || 0, 10);\n            results.maxResults = results.firstResult + parseInt(params.maxResults || 10, 10);\n\n\n            /**\n             * @event CamSDK.AbstractClientResource#loaded\n             * @type {Object}\n             * @property {Number} count is the total of items matching on backend\n             * @property {Array} items  is an array of items\n             */\n            self.trigger('loaded', results);\n            done(err, results);\n          }\n        });\n      }\n    });\n  },\n\n\n\n  /**\n   * Update one or more instances\n   *\n   * @abstract\n   * @memberof CamSDK.AbstractClientResource\n   *\n   * @param  {!String|String[]}     ids\n   * @param  {Object.<String, *>}   attributes\n   * @param  {requestCallback} [done]\n   */\n  update: function(ids, attributes, done) {},\n\n\n\n  /**\n   * Delete one or more instances\n   *\n   * @abstract\n   * @memberof CamSDK.AbstractClientResource\n   *\n   * @param  {!String|String[]}  ids\n   * @param  {requestCallback} [done]\n   */\n  delete: function(ids, done) {}\n});\n\n\nEvents.attach(AbstractClientResource);\n\nmodule.exports = AbstractClientResource;\n\n},{\"./../base-class\":23,\"./../events\":24}],5:[function(_dereq_,module,exports){\n(function (Buffer){\n'use strict';\n\nvar request = _dereq_('superagent');\nvar Events = _dereq_('./../events');\nvar utils = _dereq_('./../utils');\nvar noop = function() {};\n\n/**\n * HttpClient\n *\n * A HTTP request abstraction layer to be used in node.js / browsers environments.\n *\n * @class\n * @memberof CamSDK.client\n */\nvar HttpClient = function(config) {\n  config = config || {};\n\n  if (!config.baseUrl) {\n    throw new Error('HttpClient needs a `baseUrl` configuration property.');\n  }\n\n  Events.attach(this);\n\n  this.config = config;\n};\n\nfunction end(self, done) {\n  return function(err, response) {\n    // TODO: investigate the possible problems related to response without content\n    if (err || (!response.ok && !response.noContent)) {\n      err = err || response.error || new Error('The '+ response.req.method +' request on '+ response.req.url +' failed');\n      if (response.body) {\n        if (response.body.message) {\n          err.message = response.body.message;\n        }\n      }\n      self.trigger('error', err);\n      return done(err);\n    }\n\n    // superagent puts the parsed data into a property named \"body\"\n    // and the \"raw\" content in property named \"text\"\n    // and.. it does not parse the response if it does not have\n    // the \"application/json\" type.\n    if (response.type === 'application/hal+json') {\n      if (!response.body || Object.keys(response.body).length === 0) {\n        response.body = JSON.parse(response.text);\n      }\n\n      // and process embedded resources\n      response.body = utils.solveHALEmbedded(response.body);\n    }\n\n    done(null, response.body ? response.body : (response.text ? response.text : ''));\n  };\n}\n\n/**\n * Performs a POST HTTP request\n */\nHttpClient.prototype.post = function(path, options) {\n  options = options || {};\n  var done = options.done || noop;\n  var self = this;\n  var url = this.config.baseUrl + (path ? '/'+ path : '');\n  var req = request.post(url);\n\n  // Buffer object is only available in node.js environement\n  if (typeof Buffer !== 'undefined') {\n    Object.keys(options.fields || {}).forEach(function (field) {\n      req.field(field, options.fields[field]);\n    });\n\n    (options.attachments || []).forEach(function (file) {\n      req.attach('data', new Buffer(file.content), {\n        filename: file.name\n      });\n    });\n  }\n  else if (!!options.fields || !!options.attachments) {\n    return done(new Error('Multipart request is only supported in node.js environement.'));\n  }\n\n  req\n    .set('Accept', 'application/hal+json, application/json; q=0.5')\n    .send(options.data || {})\n    .query(options.query || {});\n\n  req.end(end(self, done));\n};\n\n\n/**\n * Performs a GET HTTP request\n */\nHttpClient.prototype.get = function(path, options) {\n  var url = this.config.baseUrl + (path ? '/'+ path : '');\n  return this.load(url, options);\n};\n\n/**\n * Loads a resource using http GET\n */\nHttpClient.prototype.load = function(url, options) {\n  options = options || {};\n  var done = options.done || noop;\n  var self = this;\n\n  var accept = options.accept || 'application/hal+json, application/json; q=0.5';\n\n  var req = request\n    .get(url)\n    .set('Accept', accept)\n    .query(options.data || {});\n\n  req.end(end(self, done));\n};\n\n\n/**\n * Performs a PUT HTTP request\n */\nHttpClient.prototype.put = function(path, options) {\n  options = options || {};\n  var done = options.done || noop;\n  var self = this;\n  var url = this.config.baseUrl + (path ? '/'+ path : '');\n\n  var req = request\n    .put(url)\n    .set('Accept', 'application/hal+json, application/json; q=0.5')\n    .send(options.data || {});\n\n  req.end(end(self, done));\n};\n\n\n\n/**\n * Performs a DELETE HTTP request\n */\nHttpClient.prototype.del = function(path, options) {\n  options = options || {};\n  var done = options.done || noop;\n  var self = this;\n  var url = this.config.baseUrl + (path ? '/'+ path : '');\n\n  var req = request\n    .del(url)\n    .set('Accept', 'application/hal+json, application/json; q=0.5')\n    .send(options.data || {});\n\n  req.end(end(self, done));\n};\n\n\n\n/**\n * Performs a OPTIONS HTTP request\n */\nHttpClient.prototype.options = function(path, options) {\n  options = options || {};\n  var done = options.done || noop;\n  var self = this;\n  var url = this.config.baseUrl + (path ? '/'+ path : '');\n\n  var req = request('OPTIONS', url)\n    .set('Accept', 'application/hal+json, application/json; q=0.5');\n\n  req.end(end(self, done));\n};\n\n\nmodule.exports = HttpClient;\n\n}).call(this,_dereq_(\"buffer\").Buffer)\n},{\"./../events\":24,\"./../utils\":33,\"buffer\":34,\"superagent\":38}],6:[function(_dereq_,module,exports){\n'use strict';\nvar Events = _dereq_('./../events');\n\n/**\n * For all API client related\n * @namespace CamSDK.client\n */\n\n/**\n * For the resources implementations\n * @namespace CamSDK.client.resource\n */\n\n/**\n * Entry point of the module\n *\n * @class CamundaClient\n * @memberof CamSDK.client\n *\n * @param  {Object} config                  used to provide necessary configuration\n * @param  {String} [config.engine=default]\n * @param  {String} config.apiUri\n */\nfunction CamundaClient(config) {\n  if (!config) {\n    throw new Error('Needs configuration');\n  }\n\n  if (!config.apiUri) {\n    throw new Error('An apiUri is required');\n  }\n\n  Events.attach(this);\n\n  config.engine = config.engine || 'default';\n\n  // mock by default.. for now\n  config.mock =  typeof config.mock !== 'undefined' ? config.mock : true;\n\n  config.resources = config.resources || {};\n\n  this.HttpClient = config.HttpClient || CamundaClient.HttpClient;\n\n  this.baseUrl = config.apiUri;\n  if(this.baseUrl.slice(-1) !== '/') {\n    this.baseUrl += '/';\n  }\n  this.baseUrl += 'engine/'+ config.engine;\n\n  this.config = config;\n\n  this.initialize();\n}\n\n/**\n * [HttpClient description]\n * @memberof CamSDK.client.CamundaClient\n * @name HttpClient\n * @type {CamSDK.client.HttpClient}\n */\nCamundaClient.HttpClient = _dereq_('./http-client');\n\n// provide an isolated scope\n(function(proto){\n  /**\n   * configuration storage\n   * @memberof CamSDK.client.CamundaClient.prototype\n   * @name  config\n   * @type {Object}\n   */\n  proto.config = {};\n\n  var _resources = {};\n\n  /**\n   * @memberof CamSDK.client.CamundaClient.prototype\n   * @name initialize\n   */\n  proto.initialize = function() {\n    /* jshint sub: true */\n    _resources['authorization']       = _dereq_('./resources/authorization');\n    _resources['deployment']          = _dereq_('./resources/deployment');\n    _resources['filter']              = _dereq_('./resources/filter');\n    _resources['history']             = _dereq_('./resources/history');\n    _resources['process-definition']  = _dereq_('./resources/process-definition');\n    _resources['process-instance']    = _dereq_('./resources/process-instance');\n    _resources['task']                = _dereq_('./resources/task');\n    _resources['variable']            = _dereq_('./resources/variable');\n    _resources['case-execution']      = _dereq_('./resources/case-execution');\n    _resources['case-instance']       = _dereq_('./resources/case-instance');\n    _resources['case-definition']     = _dereq_('./resources/case-definition');\n    _resources['user']                = _dereq_('./resources/user');\n    _resources['group']               = _dereq_('./resources/group');\n    _resources['incident']            = _dereq_('./resources/incident');\n    _resources['job']                 = _dereq_('./resources/job');\n    _resources['metrics']             = _dereq_('./resources/metrics');\n    /* jshint sub: false */\n    var self = this;\n\n    function forwardError(err) {\n      self.trigger('error', err);\n    }\n\n    // create global HttpClient instance\n    this.http = new this.HttpClient({baseUrl: this.baseUrl});\n\n    // configure the client for each resources separately,\n    var name, conf, resConf, c;\n    for (name in _resources) {\n\n      conf = {\n        name:     name,\n        // use the SDK config for some default values\n        mock:     this.config.mock,\n        baseUrl:  this.baseUrl,\n        headers:  {\n          // we might want to set headers or\n        }\n      };\n      resConf = this.config.resources[name] || {};\n\n      for (c in resConf) {\n        conf[c] = resConf[c];\n      }\n\n      // instanciate a HTTP client for the resource\n      _resources[name].http = new this.HttpClient(conf);\n\n      // forward request errors\n      _resources[name].http.on('error', forwardError);\n    }\n  };\n\n  /**\n   * Allows to get a resource from SDK by its name\n   * @memberof CamSDK.client.CamundaClient.prototype\n   * @name resource\n   *\n   * @param  {String} name\n   * @return {CamSDK.client.AbstractClientResource}\n   */\n  proto.resource = function(name) {\n    return _resources[name];\n  };\n}(CamundaClient.prototype));\n\n\nmodule.exports = CamundaClient;\n\n\n/**\n * A [universally unique identifier]{@link en.wikipedia.org/wiki/Universally_unique_identifier}\n * @typedef {String} uuid\n */\n\n\n/**\n * This callback is displayed as part of the Requester class.\n * @callback requestCallback\n * @param {?Object} error\n * @param {CamSDK.AbstractClientResource|CamSDK.AbstractClientResource[]} [results]\n */\n\n\n/**\n * Function who does not perform anything\n * @callback noopCallback\n */\n\n},{\"./../events\":24,\"./http-client\":5,\"./resources/authorization\":7,\"./resources/case-definition\":8,\"./resources/case-execution\":9,\"./resources/case-instance\":10,\"./resources/deployment\":11,\"./resources/filter\":12,\"./resources/group\":13,\"./resources/history\":14,\"./resources/incident\":15,\"./resources/job\":16,\"./resources/metrics\":17,\"./resources/process-definition\":18,\"./resources/process-instance\":19,\"./resources/task\":20,\"./resources/user\":21,\"./resources/variable\":22}],7:[function(_dereq_,module,exports){\n'use strict';\n\nvar AbstractClientResource = _dereq_(\"./../abstract-client-resource\");\n\n\n\n/**\n * Authorization Resource\n * @class\n * @memberof CamSDK.client.resource\n * @augments CamSDK.client.AbstractClientResource\n */\nvar Authorization = AbstractClientResource.extend();\n\n/**\n * API path for the process definition resource\n * @type {String}\n */\nAuthorization.path = 'authorization';\n\n\n\n\n/**\n * Fetch a list of authorizations\n *\n * @param {Object} params\n * @param {Object} [params.id]            Authorization by the id of the authorization.\n * @param {Object} [params.type]          Authorization by the type of the authorization.\n * @param {Object} [params.userIdIn]      Authorization by a comma-separated list of userIds\n * @param {Object} [params.groupIdIn]     Authorization by a comma-separated list of groupIds\n * @param {Object} [params.resourceType]  Authorization by resource type\n * @param {Object} [params.resourceId]    Authorization by resource id.\n * @param {Object} [params.sortBy]        Sort the results lexicographically by a given criterion.\n *                                        Valid values are resourceType and resourceId.\n *                                        Must be used with the sortOrder parameter.\n * @param {Object} [params.sortOrder]     Sort the results in a given order.\n *                                        Values may be \"asc\" or \"desc\".\n *                                        Must be used in conjunction with the sortBy parameter.\n * @param {Object} [params.firstResult]   Pagination of results.\n *                                        Specifies the index of the first result to return.\n * @param {Object} [params.maxResults]    Pagination of results.\n *                                        Specifies the maximum number of results to return.\n * @param {Function} done\n */\nAuthorization.list = function(params, done) {\n  return this.http.get(this.path, {\n    data: params,\n    done: done\n  });\n};\n\n\n\n/**\n * Retrieve a single authorization\n *\n * @param  {uuid}     authorizationId     of the authorization to be requested\n * @param  {Function} done\n */\nAuthorization.get = function(authorizationId, done) {\n  return this.http.get(this.path +'/'+ authorizationId, {\n    done: done\n  });\n};\n\n\n/**\n * Creates an authorization\n *\n * @param  {Object}   authorization       is an object representation of an authorization\n * @param  {Function} done\n */\nAuthorization.create = function(authorization, done) {\n  return this.http.post(this.path +'/create', {\n    data: authorization,\n    done: done\n  });\n};\n\n\n/**\n * Update an authorization\n *\n * @param  {Object}   authorization       is an object representation of an authorization\n * @param  {Function} done\n */\nAuthorization.update = function(authorization, done) {\n  return this.http.put(this.path +'/'+ authorization.id, {\n    data: authorization,\n    done: done\n  });\n};\n\n\n\n/**\n * Save an authorization\n *\n * @see Authorization.create\n * @see Authorization.update\n *\n * @param  {Object}   authorization   is an object representation of an authorization,\n *                                    if it has an id property, the authorization will be updated,\n *                                    otherwise created\n * @param  {Function} done\n */\nAuthorization.save = function(authorization, done) {\n  return Authorization[authorization.id ? 'update' : 'create'](authorization, done);\n};\n\n\n\n/**\n * Delete an authorization\n *\n * @param  {uuid}     id   of the authorization to delete\n * @param  {Function} done\n */\nAuthorization.delete = function(id, done) {\n  return this.http.del(this.path +'/'+ id, {\n    done: done\n  });\n};\n\n\n\nmodule.exports = Authorization;\n\n\n},{\"./../abstract-client-resource\":4}],8:[function(_dereq_,module,exports){\n'use strict';\n\nvar AbstractClientResource = _dereq_('./../abstract-client-resource');\n\n/**\n * CaseDefinition Resource\n * @class\n * @memberof CamSDK.client.resource\n * @augments CamSDK.client.AbstractClientResource\n */\nvar CaseDefinition = AbstractClientResource.extend();\n\n/**\n * Path used by the resource to perform HTTP queries\n * @type {String}\n */\nCaseDefinition.path = 'case-definition';\n\nCaseDefinition.list = function(params, done) {\n  return this.http.get(this.path, {\n    data: params,\n    done: done\n  });\n};\n\nCaseDefinition.create = function(caseDefinitionId, params, done) {\n  this.http.post(this.path + '/' + caseDefinitionId + '/create', {\n    data: params,\n    done: done\n  });\n};\n\nmodule.exports = CaseDefinition;\n\n},{\"./../abstract-client-resource\":4}],9:[function(_dereq_,module,exports){\n'use strict';\n\nvar AbstractClientResource = _dereq_('./../abstract-client-resource');\n\n/**\n * CaseExecution Resource\n * @class\n * @memberof CamSDK.client.resource\n * @augments CamSDK.client.AbstractClientResource\n */\nvar CaseExecution = AbstractClientResource.extend();\n\n/**\n * Path used by the resource to perform HTTP queries\n * @type {String}\n */\nCaseExecution.path = 'case-execution';\n\nCaseExecution.list = function(params, done) {\n  return this.http.get(this.path, {\n    data: params,\n    done: function(err, data) {\n      if (err) {\n        return done(err);\n      }\n\n      done(null, data);\n    }\n  });\n};\n\nCaseExecution.disable = function(executionId, params, done) {\n  this.http.post(this.path + '/' + executionId + '/disable', {\n    data: params,\n    done: done\n  });\n};\n\nCaseExecution.reenable = function(executionId, params, done) {\n  this.http.post(this.path + '/' + executionId + '/reenable', {\n    data: params,\n    done: done\n  });\n};\n\nCaseExecution.manualStart = function(executionId, params, done) {\n  this.http.post(this.path + '/' + executionId + '/manual-start', {\n    data: params,\n    done: done\n  });\n};\n\nCaseExecution.complete = function(executionId, params, done) {\n  this.http.post(this.path + '/' + executionId + '/complete', {\n    data: params,\n    done: done\n  });\n};\n\nmodule.exports = CaseExecution;\n\n},{\"./../abstract-client-resource\":4}],10:[function(_dereq_,module,exports){\n'use strict';\n\nvar AbstractClientResource = _dereq_('./../abstract-client-resource');\n\n/**\n * CaseInstance Resource\n * @class\n * @memberof CamSDK.client.resource\n * @augments CamSDK.client.AbstractClientResource\n */\nvar CaseInstance = AbstractClientResource.extend();\n\n/**\n * Path used by the resource to perform HTTP queries\n * @type {String}\n */\nCaseInstance.path = 'case-instance';\n\nCaseInstance.list = function(params, done) {\n  return this.http.get(this.path, {\n    data: params,\n    done: done\n  });\n};\n\nCaseInstance.close = function(instanceId, params, done) {\n  this.http.post(this.path + '/' + instanceId + '/close', {\n    data: params,\n    done: done\n  });\n};\n\nmodule.exports = CaseInstance;\n\n},{\"./../abstract-client-resource\":4}],11:[function(_dereq_,module,exports){\n'use strict';\n\nvar AbstractClientResource = _dereq_('./../abstract-client-resource');\n\n\n\n/**\n * Deployment Resource\n * @class\n * @memberof CamSDK.client.resource\n * @augments CamSDK.client.AbstractClientResource\n */\nvar Deployment = AbstractClientResource.extend();\n\n/**\n * Path used by the resource to perform HTTP queries\n * @type {String}\n */\nDeployment.path = 'deployment';\n\n\n/**\n * Create a deployment\n * @param  {Object} options\n *\n * @param  {Array} options.files\n *\n * @param  {String} options.deploymentName\n * @param  {String} [options.enableDuplicateFiltering]\n * @param  {String} [options.deployChangedOnly]\n * @param  {Function} done\n */\nDeployment.create = function (options, done) {\n  var fields = {\n    'deployment-name': options.deploymentName\n  };\n  var files = Array.isArray(options.files) ?\n              options.files :\n              [options.files];\n\n  if (options.enableDuplicateFiltering) {\n    fields['enable-duplicate-filtering'] = 'true';\n  }\n\n  if (options.deployChangedOnly) {\n    fields['deploy-changed-only'] = 'true';\n  }\n\n  return this.http.post(this.path +'/create', {\n    data:         {},\n    fields:       fields,\n    attachments:  files,\n    done:         done\n  });\n};\n\n\n\n/**\n * Lists the deployments\n * @param  {Object}   params                An object containing listing options.\n * @param  {uuid}     [params.id]           Filter by deployment id.\n * @param  {String}   [params.name]         Filter by the deployment name. Exact match.\n * @param  {String}   [params.nameLike]     Filter by the deployment name that the parameter is a\n *                                          substring of. The parameter can include the wildcard %\n *                                          to express like-strategy such as: starts with (%name),\n *                                          ends with (name%) or contains (%name%).\n * @param  {String}   [params.after]        Restricts to all deployments after the given date.\n *                                          The date must have the format yyyy-MM-dd'T'HH:mm:ss,\n *                                          e.g., 2013-01-23T14:42:45\n * @param  {String}   [params.before]       Restricts to all deployments before the given date.\n *                                          The date must have the format yyyy-MM-dd'T'HH:mm:ss,\n *                                          e.g., 2013-01-23T14:42:45\n * @param  {String}   [params.sortBy]       Sort the results lexicographically by a given criterion.\n *                                          Valid values are id, name and deploymentTime. Must be\n *                                          used in conjunction with the sortOrder parameter.\n * @param  {String}   [params.sortOrder]    Sort the results in a given order. Values may be asc for\n *                                          ascending order or desc for descending order. Must be\n *                                          used in conjunction with the sortBy parameter.\n * @param  {Integer}  [params.firstResult]  Pagination of results. Specifies the index of the first\n *                                          result to return.\n * @param  {Integer}  [params.maxResults]   Pagination of results. Specifies the maximum number of\n *                                          results to return. Will return less results if there are\n *                                          no more results left.\n * @param  {Function} done\n */\nDeployment.list = function () {\n  AbstractClientResource.list.apply(this, arguments);\n};\n\n\nmodule.exports = Deployment;\n\n},{\"./../abstract-client-resource\":4}],12:[function(_dereq_,module,exports){\n'use strict';\n\nvar AbstractClientResource = _dereq_('./../abstract-client-resource');\n\n\n\n/**\n * Filter Resource\n * @class\n * @memberof CamSDK.client.resource\n * @augments CamSDK.client.AbstractClientResource\n */\nvar Filter = AbstractClientResource.extend();\n\n/**\n * API path for the filter resource\n * @type {String}\n */\nFilter.path = 'filter';\n\n\n/**\n * Retrieve a single filter\n *\n * @param  {uuid}     filterId   of the filter to be requested\n * @param  {Function} done\n */\nFilter.get = function(filterId, done) {\n  return this.http.get(this.path +'/'+ filterId, {\n    done: done\n  });\n};\n\n\n/**\n * Retrieve some filters\n *\n * @param  {Object}   data\n * @param  {Integer}  [data.firstResult]\n * @param  {Integer}  [data.maxResults]\n * @param  {String}   [data.sortBy]\n * @param  {String}   [data.sortOrder]\n * @param  {Bool}     [data.itemCount]\n * @param  {Function} done\n */\nFilter.list = function(data, done) {\n  return this.http.get(this.path, {\n    data: data,\n    done: done\n  });\n};\n\n\n/**\n * Get the tasks result of filter\n *\n * @param  {(Object.<String, *>|uuid)}  data  uuid of a filter or parameters\n * @param  {uuid}     [data.id]               uuid of the filter to be requested\n * @param  {Integer}  [data.firstResult]\n * @param  {Integer}  [data.maxResults]\n * @param  {String}   [data.sortBy]\n * @param  {String}   [data.sortOrder]\n * @param  {Function} done\n */\nFilter.getTasks = function(data, done) {\n  var path = this.path +'/';\n\n  if (typeof data === 'string') {\n    path = path + data +'/list';\n    data = {};\n  }\n  else {\n    path = path + data.id +'/list';\n    delete data.id;\n  }\n\n  // those parameters have to be passed in the query and not body\n  path += '?firstResult='+ (data.firstResult || 0);\n  path += '&maxResults='+ (data.maxResults || 15);\n\n  return this.http.post(path, {\n    data: data,\n    done: done\n  });\n};\n\n\n/**\n * Creates a filter\n *\n * @param  {Object}   filter   is an object representation of a filter\n * @param  {Function} done\n */\nFilter.create = function(filter, done) {\n  return this.http.post(this.path +'/create', {\n    data: filter,\n    done: done\n  });\n};\n\n\n/**\n * Update a filter\n *\n * @param  {Object}   filter   is an object representation of a filter\n * @param  {Function} done\n */\nFilter.update = function(filter, done) {\n  return this.http.put(this.path +'/'+ filter.id, {\n    data: filter,\n    done: done\n  });\n};\n\n\n\n/**\n * Save a filter\n *\n * @see Filter.create\n * @see Filter.update\n *\n * @param  {Object}   filter   is an object representation of a filter, if it has\n *                             an id property, the filter will be updated, otherwise created\n * @param  {Function} done\n */\nFilter.save = function(filter, done) {\n  return Filter[filter.id ? 'update' : 'create'](filter, done);\n};\n\n\n/**\n * Delete a filter\n *\n * @param  {uuid}     id   of the filter to delete\n * @param  {Function} done\n */\nFilter.delete = function(id, done) {\n  return this.http.del(this.path +'/'+ id, {\n    done: done\n  });\n};\n\n\n/**\n * Performs an authorizations lookup on the resource or entity\n *\n * @param  {uuid}     [id]   of the filter to get authorizations for\n * @param  {Function} done\n */\nFilter.authorizations = function(id, done) {\n  if (arguments.length === 1) {\n    return this.http.options(this.path, {\n      done: id\n    });\n  }\n\n  return this.http.options(this.path +'/'+ id, {\n    done: done\n  });\n};\n\n\nmodule.exports = Filter;\n\n\n},{\"./../abstract-client-resource\":4}],13:[function(_dereq_,module,exports){\n'use strict';\n\nvar AbstractClientResource = _dereq_('./../abstract-client-resource');\n\n/**\n * Group Resource\n * @class\n * @memberof CamSDK.client.resource\n * @augments CamSDK.client.AbstractClientResource\n */\nvar Group = AbstractClientResource.extend();\n\n/**\n * Path used by the resource to perform HTTP queries\n * @type {String}\n */\nGroup.path = 'group';\n\n\n/**\n * Creates a group\n *\n * @param  {Object}   group       is an object representation of a group\n * @param  {String}   group.id\n * @param  {String}   group.name\n * @param  {String}   group.type\n * @param  {Function} done\n */\nGroup.create = function (options, done) {\n  return this.http.post(this.path +'/create', {\n    data: options,\n    done: done || function() {}\n  });\n};\n\n\n/**\n * Query for groups using a list of parameters and retrieves the count\n *\n * @param {String} [options.id]        Filter by the id of the group.\n * @param {String} [options.name]      Filter by the name of the group.\n * @param {String} [options.nameLike]  Filter by the name that the parameter is a substring of.\n * @param {String} [options.type]      Filter by the type of the group.\n * @param {String} [options.member]    Only retrieve groups where the given user id is a member of.\n * @param  {Function} done\n */\nGroup.count = function (options, done) {\n  if (arguments.length === 1) {\n    done = options;\n    options = {};\n  }\n  else {\n    options = options || {};\n  }\n\n  this.http.get(this.path + '/count', {\n    data: options,\n    done: done || function () {}\n  });\n};\n\n\n/**\n * Retrieves a single group\n *\n * @param  {String} [options.id]    The id of the group, can be a property (id) of an object\n * @param  {Function} done\n */\nGroup.get = function (options, done) {\n  var id = typeof options === 'string' ? options : options.id;\n\n  this.http.get(this.path + '/' + id, {\n    data: options,\n    done: done || function () {}\n  });\n};\n\n\n/**\n * Query for a list of groups using a list of parameters.\n * The size of the result set can be retrieved by using the get groups count method\n *\n * @param {String} [options.id]           Filter by the id of the group.\n * @param {String} [options.name]         Filter by the name of the group.\n * @param {String} [options.nameLike]     Filter by the name that the parameter is a substring of.\n * @param {String} [options.type]         Filter by the type of the group.\n * @param {String} [options.member]       Only retrieve groups where the given user id is a member of.\n * @param {String} [options.sortBy]       Sort the results lexicographically by a given criterion.\n *                                        Valid values are id, name and type.\n *                                        Must be used in conjunction with the sortOrder parameter.\n * @param {String} [options.sortOrder]    Sort the results in a given order.\n *                                        Values may be asc for ascending order or desc for descending order.\n *                                        Must be used in conjunction with the sortBy parameter.\n * @param {String} [options.firstResult]  Pagination of results.\n *                                        Specifies the index of the first result to return.\n * @param {String} [options.maxResults]   Pagination of results.\n *                                        Specifies the maximum number of results to return.\n *                                        Will return less results if there are no more results left.\n *\n * @param  {Function} done\n */\nGroup.list = function (options, done) {\n  this.http.get(this.path, {\n    data: options,\n    done: done || function () {}\n  });\n};\n\n\n/**\n * Add a memeber to a Group\n *\n * @param {String} [options.id]       The id of the group\n * @param {String} [options.userId]   The id of user to add to the group\n * @param  {Function} done\n */\nGroup.createMember = function (options, done) {\n  return this.http.put(this.path +'/' + options.id + '/members/' + options.userId, {\n    data: options,\n    done: done || function() {}\n  });\n};\n\n\n/**\n * Removes a memeber of a Group\n *\n * @param {String} [options.id]       The id of the group\n * @param {String} [options.userId]   The id of user to add to the group\n * @param  {Function} done\n */\nGroup.deleteMember = function (options, done) {\n  return this.http.del(this.path +'/' + options.id + '/members/' + options.userId, {\n    data: options,\n    done: done || function() {}\n  });\n};\n\n\n/**\n * Update a group\n *\n * @param  {Object}   group   is an object representation of a group\n * @param  {Function} done\n */\nGroup.update = function (options, done) {\n  return this.http.put(this.path +'/' + options.id, {\n    data: options,\n    done: done || function() {}\n  });\n};\n\n\n/**\n * Delete a group\n *\n * @param  {Object}   group   is an object representation of a group\n * @param  {Function} done\n */\nGroup.delete = function (options, done) {\n  return this.http.del(this.path +'/' + options.id, {\n    data: options,\n    done: done || function() {}\n  });\n};\n\nmodule.exports = Group;\n\n},{\"./../abstract-client-resource\":4}],14:[function(_dereq_,module,exports){\n'use strict';\n\nvar AbstractClientResource = _dereq_('./../abstract-client-resource');\n\n\n\n/**\n * History Resource\n * @class\n * @memberof CamSDK.client.resource\n * @augments CamSDK.client.AbstractClientResource\n */\nvar History = AbstractClientResource.extend();\n\n/**\n * Path used by the resource to perform HTTP queries\n * @type {String}\n */\nHistory.path = 'history';\n\n\n/**\n * Query for user operation log entries that fulfill the given parameters.\n *\n * @param {Object}   [params]\n * @param {String}   [params.processDefinitionId]   Filter by process definition id.\n * @param {String}   [params.processDefinitionKey]  Filter by process definition key.\n * @param {String}   [params.processInstanceId]     Filter by process instance id.\n * @param {String}   [params.executionId]           Filter by execution id.\n * @param {String}   [params.caseDefinitionId]      Filter by case definition id.\n * @param {String}   [params.caseInstanceId]        Filter by case instance id.\n * @param {String}   [params.caseExecutionId]       Filter by case execution id.\n * @param {String}   [params.taskId]                Only include operations on this task.\n * @param {String}   [params.userId]                Only include operations of this user.\n * @param {String}   [params.operationId]           Filter by the id of the operation. This allows fetching of multiple entries which are part of a composite operation.\n * @param {String}   [params.operationType]         Filter by the type of the operation like Claim or Delegate.\n * @param {String}   [params.entityType]            Filter by the type of the entity that was affected by this operation, possible values are Task, Attachment or IdentityLink.\n * @param {String}   [params.property]              Only include operations that changed this property, e.g. owner or assignee\n * @param {String}   [params.afterTimestamp]        Restrict to entries that were created after the given timestamp. The timestamp must have the format yyyy-MM-dd'T'HH:mm:ss, e.g. 2014-02-25T14:58:37\n * @param {String}   [params.beforeTimestamp]       Restrict to entries that were created before the given timestamp. The timestamp must have the format yyyy-MM-dd'T'HH:mm:ss, e.g. 2014-02-25T14:58:37\n * @param {String}   [params.sortBy]                Sort the results by a given criterion. At the moment the query only supports sorting based on the timestamp.\n * @param {String}   [params.sortOrder]             Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.\n * @param {Number}   [params.firstResult]           Pagination of results. Specifies the index of the first result to return.\n * @param {Number}   [params.maxResults]            Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.\n * @param {Function} done\n */\nHistory.userOperation = function(params, done) {\n  if (arguments.length < 2) {\n    done = arguments[0];\n    params = {};\n  }\n\n  return this.http.get(this.path + '/user-operation', {\n    data: params,\n    done: done\n  });\n};\n\n\n/**\n * Query for historic process instances that fulfill the given parameters.\n *\n * @param  {Object}   [params]\n * @param  {uuid}     [params.processInstanceId]                Filter by process instance id.\n * @param  {uuid[]}   [params.processInstanceIds]               Filter by process instance ids.\n *                                                              Must be a json array process instance ids.\n * @param  {String}   [params.processInstanceBusinessKey]       Filter by process instance business key.\n * @param  {String}   [params.processInstanceBusinessKeyLike]   Filter by process instance business key that the parameter is a substring of.\n * @param  {uuid}     [params.superProcessInstanceId]           Restrict query to all process instances that are sub process instances of the given process instance.\n *                                                              Takes a process instance id.\n * @param  {uuid}     [params.subProcessInstanceId]             Restrict query to one process instance that has a sub process instance with the given id.\n * @param  {uuid}     [params.superCaseInstanceId]              Restrict query to all process instances that are sub process instances of the given case instance.\n *                                                              Takes a case instance id.\n * @param  {uuid}     [params.subCaseInstanceId]                Restrict query to one process instance that has a sub case instance with the given id.\n * @param  {uuid}     [params.caseInstanceId]                   Restrict query to all process instances that are sub process instances of the given case instance.\n *                                                              Takes a case instance id.\n * @param  {uuid}     [params.processDefinitionId]              Filter by the process definition the instances run on.\n * @param  {String}   [params.processDefinitionKey]             Filter by the key of the process definition the instances run on.\n * @param  {String[]} [params.processDefinitionKeyNotIn]        Exclude instances that belong to a set of process definitions.\n *                                                              Must be a json array of process definition keys.\n * @param  {String}   [params.processDefinitionName]            Filter by the name of the process definition the instances run on.\n * @param  {String}   [params.processDefinitionNameLike]        Filter by process definition names that the parameter is a substring of.\n * @param  {Boolean}  [params.finished]                         Only include finished process instances.\n *                                                              Values may be `true` or `false`.\n * @param  {Boolean}  [params.unfinished]                       Only include unfinished process instances.\n *                                                              Values may be `true` or `false`.\n * @param  {String}   [params.startedBy]                        Only include process instances that were started by the given user.\n * @param  {String}   [params.startedBefore]                    Restrict to instances that were started before the given date.\n *                                                              The date must have the format `yyyy-MM-dd'T'HH:mm:ss`, e.g., 2013-01-23T14:42:45.\n * @param  {String}   [params.startedAfter]                     Restrict to instances that were started after the given date.\n *                                                              The date must have the format `yyyy-MM-dd'T'HH:mm:ss`, e.g., 2013-01-23T14:42:45.\n * @param  {String}   [params.finishedBefore]                   Restrict to instances that were finished before the given date.\n *                                                              The date must have the format `yyyy-MM-dd'T'HH:mm:ss`, e.g., 2013-01-23T14:42:45.\n * @param  {String}   [params.finishedAfter]                    Restrict to instances that were finished after the given date.\n *                                                              The date must have the format `yyyy-MM-dd'T'HH:mm:ss`, e.g., 2013-01-23T14:42:45.\n * @param  {Object[]} [params.variables]                        A JSON array to only include process instances that have/had variables with certain values. The array consists of objects with the three properties name, operator and value. name (String) is the variable name, operator (String) is the comparison operator to be used and value the variable value.\n *                                                              `value` may be String, Number or Boolean.\n *                                                              Valid operator values are:\n *                                                              - `eq` - equal to\n *                                                              - `neq` - not equal to\n *                                                              - `gt` - greater than\n *                                                              - `gteq` - greater than or equal to\n *                                                              - `lt` - lower than\n *                                                              - `lteq` - lower than or equal to\n *                                                              - `like`\n * @param  {String}   [params.sortBy]                           Sort the results by a given criterion.\n *                                                              Valid values are instanceId, definitionId, businessKey, startTime, endTime, duration. Must be used in conjunction with the sortOrder parameter.\n * @param  {String}   [params.sortOrder]                        Sort the results in a given order.\n *                                                              Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.\n * @param  {Number}   [params.firstResult]                      Pagination of results. Specifies the index of the first result to return.\n * @param  {Number}   [params.maxResults]                       Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.\n\n * @param  {Function} done\n */\nHistory.processInstance = function(params, done) {\n  if (arguments.length < 2) {\n    done = arguments[0];\n    params = {};\n  }\n\n  var body = {};\n  var query = {};\n  var queryParams = ['firstResult', 'maxResults'];\n\n  for (var p in params) {\n    if (queryParams.indexOf(p) > -1) {\n      query[p] = params[p];\n    }\n    else {\n      body[p] = params[p];\n    }\n  }\n\n  return this.http.post(this.path + '/process-instance', {\n    data: body,\n    query: query,\n    done: done\n  });\n};\n\n\n/**\n * Query for the number of historic process instances that fulfill the given parameters.\n * This method takes the same message body as `History.processInstance`.\n */\nHistory.processInstanceCount = function(params, done) {\n  if (arguments.length < 2) {\n    done = arguments[0];\n    params = {};\n  }\n\n  return this.http.post(this.path + '/process-instance/count', {\n    data: params,\n    done: done\n  });\n};\n\nmodule.exports = History;\n\n\n},{\"./../abstract-client-resource\":4}],15:[function(_dereq_,module,exports){\n'use strict';\n\nvar AbstractClientResource = _dereq_('./../abstract-client-resource');\n\n\n\n/**\n * Incident Resource\n * @class\n * @memberof CamSDK.client.resource\n * @augments CamSDK.client.AbstractClientResource\n */\nvar Incident = AbstractClientResource.extend();\n\n/**\n * Path used by the resource to perform HTTP queries\n * @type {String}\n */\nIncident.path = 'incident';\n\n\n/**\n * Query for incidents that fulfill given parameters. The size of the result set can be retrieved by using the get incidents count method.\n *\n * @param  {Object}           params\n *\n * @param  {String}           [params.incidentId]           Restricts to incidents that have the given id.\n *\n * @param  {String}           [params.incidentType]         Restricts to incidents that belong to the given incident type.\n *\n * @param  {String}           [params.incidentMessage]      Restricts to incidents that have the given incident message.\n *\n * @param  {String}           [params.processDefinitionId]  Restricts to incidents that belong to a process definition with the given id.\n *\n * @param  {String}           [params.processInstanceId]    Restricts to incidents that belong to a process instance with the given id.\n *\n * @param  {String}           [params.executionId]          Restricts to incidents that belong to an execution with the given id.\n *\n * @param  {String}           [params.activityId]           Restricts to incidents that belong to an activity with the given id.\n *\n * @param  {String}           [params.causeIncidentId]      Restricts to incidents that have the given incident id as cause incident.\n *\n * @param  {String}           [params.rootCauseIncidentId]  Restricts to incidents that have the given incident id as root cause incident.\n *\n * @param  {String}           [params.configuration]        Restricts to incidents that have the given parameter set as configuration.\n *\n * @param  {String}           [params.sortBy]               Sort the results lexicographically by a given criterion. Valid values are\n *                                                          incidentId, incidentTimestamp, incidentType, executionId, activityId,\n *                                                          processInstanceId, processDefinitionId, causeIncidentId, rootCauseIncidentId\n *                                                          and configuration. Must be used in conjunction with the sortOrder parameter.\n *\n * @param  {String}           [params.sortOrder]            Sort the results in a given order. Values may be asc for ascending order or\n *                                                          desc for descending order. Must be used in conjunction with the sortBy parameter.\n *\n * @param  {String}           [params.firstResult]          Pagination of results. Specifies the\n *                                                          index of the first result to return.\n *\n * @param  {String}           [params.maxResults]           Pagination of results. Specifies the\n *                                                          maximum number of results to return.\n *                                                          Will return less results if there are no\n *                                                          more results left.\n *\n * @param  {RequestCallback}  done\n */\nIncident.get = function (params, done) {\n  this.http.get(this.path, {\n    data: params,\n    done: done\n  });\n};\n\n/**\n * Query for the number of incidents that fulfill given parameters. Takes the same parameters as the get incidents method.\n *\n * @param  {Object}           params\n *\n * @param  {String}           [params.incidentId]           Restricts to incidents that have the given id.\n *\n * @param  {String}           [params.incidentType]         Restricts to incidents that belong to the given incident type.\n *\n * @param  {String}           [params.incidentMessage]      Restricts to incidents that have the given incident message.\n *\n * @param  {String}           [params.processDefinitionId]  Restricts to incidents that belong to a process definition with the given id.\n *\n * @param  {String}           [params.processInstanceId]    Restricts to incidents that belong to a process instance with the given id.\n *\n * @param  {String}           [params.executionId]          Restricts to incidents that belong to an execution with the given id.\n *\n * @param  {String}           [params.activityId]           Restricts to incidents that belong to an activity with the given id.\n *\n * @param  {String}           [params.causeIncidentId]      Restricts to incidents that have the given incident id as cause incident.\n *\n * @param  {String}           [params.rootCauseIncidentId]  Restricts to incidents that have the given incident id as root cause incident.\n *\n * @param  {String}           [params.configuration]        Restricts to incidents that have the given parameter set as configuration.\n *\n * @param  {RequestCallback}  done\n */\nIncident.count = function(params, done) {\n  this.http.get(this.path+'/count', {\n    data: params,\n    done: done\n  });\n};\n\nmodule.exports = Incident;\n\n\n},{\"./../abstract-client-resource\":4}],16:[function(_dereq_,module,exports){\n'use strict';\n\nvar AbstractClientResource = _dereq_('./../abstract-client-resource');\n\n\n\n/**\n * Job Resource\n * @class\n * @memberof CamSDK.client.resource\n * @augments CamSDK.client.AbstractClientResource\n */\nvar Job = AbstractClientResource.extend();\n\n/**\n * Path used by the resource to perform HTTP queries\n * @type {String}\n */\nJob.path = 'job';\n\n/**\n * Query for jobs that fulfill given parameters.\n * @param  {Object}   params\n * @param  {String}   [params.jobId]                Filter by job id.\n * @param  {String}   [params.processInstanceId]    Only select jobs which exist for the given process instance.\n * @param  {String}   [params.executionId]          Only select jobs which exist for the given execution.\n * @param  {String}   [params.processDefinitionId]  Filter by the id of the process definition the jobs run on.\n * @param  {String}   [params.processDefinitionKey] Filter by the key of the process definition the jobs run on.\n * @param  {String}   [params.activityId]           Only select jobs which exist for an activity with the given id.\n * @param  {Bool}     [params.withRetriesLeft]      Only select jobs which have retries left.\n * @param  {Bool}     [params.executable]           Only select jobs which are executable, ie. retries > 0 and due date is null or due date is in the past.\n * @param  {Bool}     [params.timers]               Only select jobs that are timers. Cannot be used together with messages.\n * @param  {Bool}     [params.messages]             Only select jobs that are messages. Cannot be used together with timers.\n * @param  {String}   [params.dueDates]             Only select jobs where the due date is lower or higher than the given date. Due date expressions are comma-separated and are structured as follows:\n *                                                  A valid condition value has the form operator_value. operator is the comparison operator to be used and value the date value as string.\n *                                                  Valid operator values are: gt - greater than; lt - lower than.\n *                                                  value may not contain underscore or comma characters.\n * @param  {Bool}     [params.withException]        Only select jobs that failed due to an exception.\n * @param  {String}   [params.exceptionMessage]     Only select jobs that failed due to an exception with the given message.\n * @param  {Bool}     [params.noRetriesLeft]        Only select jobs which have no retries left.\n * @param  {Bool}     [params.active]               Only include active jobs.\n * @param  {Bool}     [params.suspended]            Only include suspended jobs.\n * @param  {Array}    [params.sorting]              A JSON array of criteria to sort the result by. Each element of the array is a JSON object that specifies one ordering. The position in the array identifies the rank of an ordering, i.e. whether it is primary, secondary, etc.\n * @param  {String}   params.sorting.sortBy         Sort the results lexicographically by a given criterion. Valid values are jobId, executionId, processInstanceId, jobRetries and jobDueDate.\n * @param  {String}   params.sorting.sortOrder      Sort the results in a given order. Values may be asc for ascending order or desc for descending order.\n * @param  {String}   [params.firstResult]          Pagination of results. Specifies the index of the first result to return.\n * @param  {String}   [params.maxResults]           Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.\n * @param  {Function} done\n */\nJob.list = function (params, done) {\n\n  var path = this.path;\n\n  // those parameters have to be passed in the query and not body\n  path += '?firstResult='+ (params.firstResult || 0);\n  if(params.maxResults) {\n    path += '&maxResults='+ (params.maxResults);\n  }\n\n\n  return this.http.post(path, {\n    data: params,\n    done: done\n  });\n};\n\n/**\n * Sets the retries of the job to the given number of retries.\n * @param  {Object}   params\n * @param  {String}   params.is      The id of the job.\n * @param  {String}   params.retries The number of retries to set that a job has left.\n * @param  {Function} done\n */\nJob.setRetries = function(params, done) {\n  return this.http.put(this.path + '/' + params.id + '/retries', {\n    data: params,\n    done: done\n  });\n};\n\nmodule.exports = Job;\n\n},{\"./../abstract-client-resource\":4}],17:[function(_dereq_,module,exports){\n'use strict';\n\nvar AbstractClientResource = _dereq_('./../abstract-client-resource');\n\n\n\n/**\n * Job Resource\n * @class\n * @memberof CamSDK.client.resource\n * @augments CamSDK.client.AbstractClientResource\n */\nvar Metrics = AbstractClientResource.extend();\n\n/**\n * Path used by the resource to perform HTTP queries\n * @type {String}\n */\nMetrics.path = 'metrics';\n\n/**\n * Query for jobs that fulfill given parameters.\n * @param  {Object}   params\n * @param  {String}   [params.name]\n * @param  {String}   [params.startDate]\n * @param  {String}   [params.endDate]\n * @param  {Function} done\n */\nMetrics.sum = function (params, done) {\n\n  var path = this.path + '/' + params.name + '/sum';\n  delete params.name;\n\n  return this.http.get(path, { data: params, done: done });\n};\n\nmodule.exports = Metrics;\n\n},{\"./../abstract-client-resource\":4}],18:[function(_dereq_,module,exports){\n'use strict';\n\nvar AbstractClientResource = _dereq_('./../abstract-client-resource');\n\n/**\n * No-Op callback\n */\nfunction noop() {}\n\n/**\n * Process Definition Resource\n * @class\n * @memberof CamSDK.client.resource\n * @augments CamSDK.client.AbstractClientResource\n */\nvar ProcessDefinition = AbstractClientResource.extend(\n/** @lends  CamSDK.client.resource.ProcessDefinition.prototype */\n{\n  /**\n   * Suspends the process definition instance\n   *\n   * @param  {Object.<String, *>} [params]\n   * @param  {requestCallback}    [done]\n   */\n  suspend: function(params, done) {\n    // allows to pass only a callback\n    if (typeof params === 'function') {\n      done = params;\n      params = {};\n    }\n    params = params || {};\n    done = done || noop;\n\n    return this.http.post(this.path, {\n      done: done\n    });\n  },\n\n\n  /**\n   * Retrieves the statistics of a process definition.\n   *\n   * @param  {Function} [done]\n   */\n  stats: function(done) {\n    return this.http.post(this.path, {\n      done: done || noop\n    });\n  },\n\n\n  /**\n   * Retrieves the BPMN 2.0 XML document of a process definition.\n   *\n   * @param  {Function} [done]\n   */\n  // xml: function(id, done) {\n  //   return this.http.post(this.path + +'/xml', {\n  //     done: done || noop\n  //   });\n  // },\n\n\n  /**\n   * Starts a process instance from a process definition.\n   *\n   * @param  {Object} [varname]\n   * @param  {Function} [done]\n   */\n  start: function(done) {\n    return this.http.post(this.path, {\n      data: {},\n      done: done\n    });\n  }\n},\n/** @lends  CamSDK.client.resource.ProcessDefinition */\n{\n  /**\n   * API path for the process instance resource\n   */\n  path: 'process-definition',\n\n\n\n\n  /**\n   * Retrieve a single process definition\n   *\n   * @param  {uuid}     id    of the process definition to be requested\n   * @param  {Function} done\n   */\n  get: function(id, done) {\n\n    // var pointer = '';\n    // if (data.key) {\n    //   pointer = 'key/'+ data.key;\n    // }\n    // else if (data.id) {\n    //   pointer = data.id;\n    // }\n\n    return this.http.get(this.path +'/'+ id, {\n      done: done\n    });\n  },\n\n\n  /**\n   * Retrieve a single process definition\n   *\n   * @param  {String}   key    of the process definition to be requested\n   * @param  {Function} done\n   */\n  getByKey: function(key, done) {\n    return this.http.get(this.path +'/key/'+ key, {\n      done: done\n    });\n  },\n\n\n  /**\n   * Get a list of process definitions\n   * @param  {Object} params                        Query parameters as follow\n   * @param  {String} [params.name]                 Filter by name.\n   * @param  {String} [params.nameLike]             Filter by names that the parameter is a substring of.\n   * @param  {String} [params.deploymentId]         Filter by the deployment the id belongs to.\n   * @param  {String} [params.key]                  Filter by key, i.e. the id in the BPMN 2.0 XML. Exact match.\n   * @param  {String} [params.keyLike]              Filter by keys that the parameter is a substring of.\n   * @param  {String} [params.category]             Filter by category. Exact match.\n   * @param  {String} [params.categoryLike]         Filter by categories that the parameter is a substring of.\n   * @param  {String} [params.ver]                  Filter by version.\n   * @param  {String} [params.latest]               Only include those process definitions that are latest versions.\n   *                                                Values may be \"true\" or \"false\".\n   * @param  {String} [params.resourceName]         Filter by the name of the process definition resource. Exact match.\n   * @param  {String} [params.resourceNameLike]     Filter by names of those process definition resources that the parameter is a substring of.\n   * @param  {String} [params.startableBy]          Filter by a user name who is allowed to start the process.\n   * @param  {String} [params.active]               Only include active process definitions.\n   *                                                Values may be \"true\" or \"false\".\n   * @param  {String} [params.suspended]            Only include suspended process definitions.\n   *                                                Values may be \"true\" or \"false\".\n   * @param  {String} [params.incidentId]           Filter by the incident id.\n   * @param  {String} [params.incidentType]         Filter by the incident type.\n   * @param  {String} [params.incidentMessage]      Filter by the incident message. Exact match.\n   * @param  {String} [params.incidentMessageLike]  Filter by the incident message that the parameter is a substring of.\n   *\n   * @param  {String} [params.sortBy]               Sort the results lexicographically by a given criterion.\n   *                                                Valid values are category, \"key\", \"id\", \"name\", \"version\" and \"deploymentId\".\n   *                                                Must be used in conjunction with the \"sortOrder\" parameter.\n   *\n   * @param  {String} [params.sortOrder]            Sort the results in a given order.\n   *                                                Values may be asc for ascending \"order\" or \"desc\" for descending order.\n   *                                                Must be used in conjunction with the sortBy parameter.\n   *\n   * @param  {Integer} [params.firstResult]         Pagination of results. Specifies the index of the first result to return.\n   * @param  {Integer} [params.maxResults]          Pagination of results. Specifies the maximum number of results to return.\n   *                                                Will return less results, if there are no more results left.\n\n   * @param  {requestCallback} [done]\n   *\n   * @example\n   * CamSDK.resource('process-definition').list({\n   *   nameLike: 'Process'\n   * }, function(err, results) {\n   *   //\n   * });\n   */\n  list: function(params, done) {\n    AbstractClientResource.list.apply(this, arguments);\n  },\n\n\n  /**\n   * Fetch the variables of a process definition\n   * @param  {Object.<String, *>} data\n   * @param  {String}             [data.id]     of the process\n   * @param  {String}             [data.key]    of the process\n   * @param  {Array}              [data.names]  of variables to be fetched\n   * @param  {Function}           [done]\n   */\n  formVariables: function(data, done) {\n    var pointer = '';\n    if (data.key) {\n      pointer = 'key/'+ data.key;\n    }\n    else if (data.id) {\n      pointer = data.id;\n    }\n    else {\n      return done(new Error('Process definition task variables needs either a key or an id.'));\n    }\n\n    var queryData = {\n      deserializeValues: data.deserializeValues\n    };\n\n    if(data.names) {\n      queryData.variableNames = (data.names || []).join(',');\n    }\n\n    return this.http.get(this.path +'/'+ pointer +'/form-variables', {\n      data: queryData,\n      done: done || function() {}\n    });\n  },\n\n\n  /**\n   * Submit a form to start a process definition\n   *\n   * @param  {Object.<String, *>} data\n   * @param  {String}             [data.key]            start the process-definition with this key\n   * @param  {String}             [data.id]             or: start the process-definition with this id\n   * @param  {String}             [data.businessKey]    of the process to be set\n   * @param  {Array}              [data.variables]      variables to be set\n   * @param  {Function}           [done]\n   */\n  submitForm: function(data, done) {\n    var pointer = '';\n    if (data.key) {\n      pointer = 'key/'+ data.key;\n    }\n    else if (data.id) {\n      pointer = data.id;\n    }\n    else {\n      return done(new Error('Process definition task variables needs either a key or an id.'));\n    }\n\n    return this.http.post(this.path +'/'+ pointer +'/submit-form', {\n      data: {\n        businessKey : data.businessKey,\n        variables: data.variables\n      },\n      done: done || function() {}\n    });\n  },\n\n\n  /**\n   * Retrieves the form of a process definition.\n   * @param  {Function} [done]\n   */\n  startForm: function(data, done) {\n    var path = this.path +'/'+ (data.key ? 'key/'+ data.key : data.id) +'/startForm';\n    return this.http.get(path, {\n      done: done || noop\n    });\n  },\n\n\n  /**\n   * Retrieves the form of a process definition.\n   * @param  {Function} [done]\n   */\n  xml: function(data, done) {\n    var path = this.path +'/'+ (data.id ? data.id : 'key/'+ data.key) +'/xml';\n    return this.http.get(path, {\n      done: done || noop\n    });\n  },\n\n\n  /**\n   * Submits the form of a process definition.\n   *\n   * @param  {Object} [data]\n   * @param  {Function} [done]\n   */\n  submit: function(data, done) {\n    var path = this.path;\n    if (data.key) {\n      path += '/key/'+ data.key;\n    }\n    else {\n      path += '/'+ data.id;\n    }\n    path += '/submit-form';\n\n    return this.http.post(path, {\n      data: data,\n      done: done\n    });\n  },\n\n\n  /**\n   * Suspends one or more process definitions\n   *\n   * @param  {String|String[]}    ids\n   * @param  {Object.<String, *>} [params]\n   * @param  {requestCallback}    [done]\n   */\n  suspend: function(ids, params, done) {\n    // allows to pass only a callback\n    if (typeof params === 'function') {\n      done = params;\n      params = {};\n    }\n    params = params || {};\n    done = done || noop;\n    // allows to pass a single ID\n    ids = Array.isArray(ids) ? ids : [ids];\n\n    return this.http.post(this.path, {\n      done: done\n    });\n  },\n\n  /**\n   * Instantiates a given process definition.\n   *\n   * @param {Object} [params]\n   * @param {String} [params.id]              The id of the process definition to be instantiated. Must be omitted if key is provided.\n   * @param {String} [params.key]             The key of the process definition (the latest version thereof) to be instantiated. Must be omitted if id is provided.\n   * @param {String} [params.variables]       A JSON object containing the variables the process is to be initialized with. Each key corresponds to a variable name and each value to a variable value.\n   * @param {String} [params.businessKey]     The business key the process instance is to be initialized with. The business key uniquely identifies the process instance in the context of the given process definition.\n   * @param {String} [params.caseInstanceId]  The case instance id the process instance is to be initialized with.\n   */\n  start: function(params, done) {\n    return this.http.post(this.path +'/'+ (params.id ? params.id : 'key/'+params.key ) + '/start', {\n      data: params,\n      done: done\n    });\n  }\n});\n\n\nmodule.exports = ProcessDefinition;\n\n\n},{\"./../abstract-client-resource\":4}],19:[function(_dereq_,module,exports){\n'use strict';\n\nvar AbstractClientResource = _dereq_(\"./../abstract-client-resource\");\n\n\n\n\n/**\n * Process Instance Resource\n *\n * @class\n * @memberof CamSDK.client.resource\n * @augments CamSDK.client.AbstractClientResource\n */\nvar ProcessInstance = AbstractClientResource.extend(\n/** @lends  CamSDK.client.resource.ProcessInstance.prototype */\n{\n\n},\n\n/** @lends  CamSDK.client.resource.ProcessInstance */\n{\n  /**\n   * API path for the process instance resource\n   */\n  path: 'process-instance',\n\n\n  /**\n   * Creates a process instance from a process definition\n   *\n   * @param  {Object}   params\n   * @param  {String}   [params.id]\n   * @param  {String}   [params.key]\n   * @param  {Object.<String, *>} [params.variables]\n   * @param  {requestCallback} [done]\n   */\n  create: function (params, done) {\n    return this.http.post(params, done);\n  },\n\n\n  /**\n   * Get a list of process instances\n   *\n   * @param  {Object}   params\n   * @param {String} [params.processInstanceIds]      Filter by a comma-separated list of process\n   *                                                  instance ids.\n   * @param {String} [params.businessKey]             Filter by process instance business key.\n   * @param {String} [params.caseInstanceId]          Filter by case instance id.\n   * @param {String} [params.processDefinitionId]     Filter by the process definition the\n   *                                                  instances run on.\n   * @param {String} [params.processDefinitionKey]    Filter by the key of the process definition\n   *                                                  the instances run on.\n   * @param {String} [params.superProcessInstance]    Restrict query to all process instances that\n   *                                                  are sub process instances of the given process\n   *                                                  instance. Takes a process instance id.\n   * @param {String} [params.subProcessInstance]      Restrict query to all process instances that\n   *                                                  have the given process instance as a sub\n   *                                                  process instance. Takes a process instance id.\n   * @param {String} [params.active]                  Only include active process instances.\n   *                                                  Values may be true or false.\n   * @param {String} [params.suspended]               Only include suspended process instances.\n   *                                                  Values may be true or false.\n   * @param {String} [params.incidentId]              Filter by the incident id.\n   * @param {String} [params.incidentType]            Filter by the incident type.\n   * @param {String} [params.incidentMessage]         Filter by the incident message. Exact match.\n   * @param {String} [params.incidentMessageLike]     Filter by the incident message that the\n   *                                                  parameter is a substring of.\n   * @param {String} [params.variables]               Only include process instances that have\n   *                                                  variables with certain values.\n   *                                                  Variable filtering expressions are\n   *                                                  comma-separated and are structured as follows:\n   *                                                  A valid parameter value has the form\n   *                                                  key_operator_value. key is the variable name,\n   *                                                  operator is the comparison operator to be used\n   *                                                  and value the variable value.\n   *                                                  Note: Values are always treated as String\n   *                                                  objects on server side.\n   *                                                  Valid operator values are:\n   *                                                  - eq - equal to;\n   *                                                  - neq - not equal to;\n   *                                                  - gt - greater than;\n   *                                                  - gteq - greater than or equal to;\n   *                                                  - lt - lower than;\n   *                                                  - lteq - lower than or equal to;\n   *                                                  - like.\n   *                                                  key and value may not contain underscore or\n   *                                                  comma characters.\n   * @param {String} [params.sortBy]                  Sort the results lexicographically by a given\n   *                                                  criterion.\n   *                                                  Valid values are:\n   *                                                  - instanceId\n   *                                                  - definitionKey\n   *                                                  - definitionId.\n   *                                                  Must be used in conjunction with the sortOrder\n   *                                                  parameter.\n   * @param {String} [params.sortOrder]               Sort the results in a given order.\n   *                                                  Values may be asc for ascending order\n   *                                                  or desc for descending order.\n   *                                                  Must be used in conjunction with sortBy param.\n   * @param {String} [params.firstResult]             Pagination of results. Specifies the index of\n   *                                                  the first result to return.\n   * @param {String} [params.maxResults]              Pagination of results. Specifies the maximum\n   *                                                  number of results to return.\n   *                                                  Will return less results if there are no more\n   *                                                  results left.\n   * @param  {requestCallback} done\n   */\n  list: function (params, done) {\n    AbstractClientResource.list.apply(this, arguments);\n  },\n\n\n  /**\n   * Post process instance modifications\n   * @see http://docs.camunda.org/api-references/rest/#process-instance-modify-process-instance-execution-state-method\n   *\n   * @param  {Object}           params\n   * @param  {UUID}             params.id                     process instance UUID\n   *\n   * @param  {Array}            params.instructions           Array of instructions\n   *\n   * @param  {Boolean}          [params.skipCustomListeners]  Skip execution listener invocation for\n   *                                                          activities that are started or ended\n   *                                                          as part of this request.\n   *\n   * @param  {Boolean}          [params.skipIoMappings]       Skip execution of input/output\n   *                                                          variable mappings for activities that\n   *                                                          are started or ended as part of\n   *                                                          this request.\n   *\n   * @param  {requestCallback}  done\n   */\n  modify: function (params, done) {\n    this.http.post(this.path + '/' + params.id + '/modification', {\n      data: {\n        instructions:         params.instructions,\n        skipCustomListeners:  params.skipCustomListeners,\n        skipIoMappings:       params.skipIoMappings\n      },\n      done: done\n    });\n  }\n});\n\n\nmodule.exports = ProcessInstance;\n\n},{\"./../abstract-client-resource\":4}],20:[function(_dereq_,module,exports){\n'use strict';\n\nvar AbstractClientResource = _dereq_('./../abstract-client-resource');\n\n\n\n/**\n * Task Resource\n * @class\n * @memberof CamSDK.client.resource\n * @augments CamSDK.client.AbstractClientResource\n */\nvar Task = AbstractClientResource.extend();\n\n/**\n * Path used by the resource to perform HTTP queries\n * @type {String}\n */\nTask.path = 'task';\n\n\n/**\n * Fetch a list of tasks\n * @param {Object} [params]\n * @param {String} [params.processInstanceId]               Restrict to tasks that belong to process instances with the given id.\n * @param {String} [params.processInstanceBusinessKey]      Restrict to tasks that belong to process instances with the given business key.\n * @param {String} [params.processInstanceBusinessKeyLike]  Restrict to tasks that have a process instance business key that has the parameter value as a substring.\n * @param {String} [params.processDefinitionId]             Restrict to tasks that belong to a process definition with the given id.\n * @param {String} [params.processDefinitionKey]            Restrict to tasks that belong to a process definition with the given key.\n * @param {String} [params.processDefinitionName]           Restrict to tasks that belong to a process definition with the given name.\n * @param {String} [params.processDefinitionNameLike]       Restrict to tasks that have a process definition name that has the parameter value as a substring.\n * @param {String} [params.executionId]                     Restrict to tasks that belong to an execution with the given id.\n * @param {String} [params.activityInstanceIdIn]            Only include tasks which belongs to one of the passed and comma-separated activity instance ids.\n * @param {String} [params.assignee]                        Restrict to tasks that the given user is assigned to.\n * @param {String} [params.assigneeLike]                    Restrict to tasks that have an assignee that has the parameter value as a substring.\n * @param {String} [params.owner]                           Restrict to tasks that the given user owns.\n * @param {String} [params.candidateGroup]                  Only include tasks that are offered to the given group.\n * @param {String} [params.candidateUser]                   Only include tasks that are offered to the given user.\n * @param {String} [params.involvedUser]                    Only include tasks that the given user is involved in.\n *                                                          A user is involved in a task if there exists an identity link between task and user (e.g. the user is the assignee).\n * @param {String} [params.unassigned]                      If set to true, restricts the query to all tasks that are unassigned.\n * @param {String} [params.taskDefinitionKey]               Restrict to tasks that have the given key.\n * @param {String} [params.taskDefinitionKeyLike]           Restrict to tasks that have a key that has the parameter value as a substring.\n * @param {String} [params.name]                            Restrict to tasks that have the given name.\n * @param {String} [params.nameLike]                        Restrict to tasks that have a name with the given parameter value as substring.\n * @param {String} [params.description]                     Restrict to tasks that have the given description.\n * @param {String} [params.descriptionLike]                 Restrict to tasks that have a description that has the parameter value as a substring.\n * @param {String} [params.priority]                        Restrict to tasks that have the given priority.\n * @param {String} [params.maxPriority]                     Restrict to tasks that have a lower or equal priority.\n * @param {String} [params.minPriority]                     Restrict to tasks that have a higher or equal priority.\n * @param {String} [params.due]                             Restrict to tasks that are due on the given date.\n *                                                          The date must have the format yyyy-MM-dd'T'HH:mm:ss, so for example 2013-01-23T14:42:45 is valid.\n * @param {String} [params.dueAfter]                        Restrict to tasks that are due after the given date.\n *                                                          The date must have the format yyyy-MM-dd'T'HH:mm:ss, so for example 2013-01-23T14:42:45 is valid.\n * @param {String} [params.dueBefore]                       Restrict to tasks that are due before the given date.\n *                                                          The date must have the format yyyy-MM-dd'T'HH:mm:ss, so for example 2013-01-23T14:42:45 is valid.\n * @param {String} [params.followUp]                        Restrict to tasks that have a followUp date on the given date.\n *                                                          The date must have the format yyyy-MM-dd'T'HH:mm:ss, so for example 2013-01-23T14:42:45 is valid.\n * @param {String} [params.followUpAfter]                   Restrict to tasks that have a followUp date after the given date.\n *                                                          The date must have the format yyyy-MM-dd'T'HH:mm:ss, so for example 2013-01-23T14:42:45 is valid.\n * @param {String} [params.followUpBefore]                  Restrict to tasks that have a followUp date before the given date.\n *                                                          The date must have the format yyyy-MM-dd'T'HH:mm:ss, so for example 2013-01-23T14:42:45 is valid.\n * @param {String} [params.created]                         Restrict to tasks that were created on the given date.\n *                                                          The date must have the format yyyy-MM-dd'T'HH:mm:ss, so for example 2013-01-23T14:42:45 is valid.\n * @param {String} [params.createdAfter]                    Restrict to tasks that were created after the given date.\n *                                                          The date must have the format yyyy-MM-dd'T'HH:mm:ss, so for example 2013-01-23T14:42:45 is valid.\n * @param {String} [params.createdBefore]                   Restrict to tasks that were created before the given date.\n *                                                          The date must have the format yyyy-MM-dd'T'HH:mm:ss, so for example 2013-01-23T14:42:45 is valid.\n * @param {String} [params.delegationState]                 Restrict to tasks that are in the given delegation state.\n *                                                          Valid values are \"PENDING\" and \"RESOLVED\".\n * @param {String} [params.candidateGroups]                 Restrict to tasks that are offered to any of the given candidate groups. Takes a comma-separated list of group names, so for example developers,support,sales.\n * @param {String} [params.active]                          Only include active tasks. Values may be true or false. suspended Only include suspended tasks.\n *                                                          Values may be \"true\" or \"false\".\n * @param {String} [params.taskVariables]                   Only include tasks that have variables with certain values. Variable tasking expressions are comma-separated and are structured as follows:\n *                                                          A valid parameter value has the form key_operator_value. key is the variable name, op is the comparison operator to be used and value the variable value. Note: Values are always treated as String objects on server side. Valid operator values are: eq - equals; neq - not equals; gt - greater than; gteq - greater than or equals; lt - lower than; lteq - lower than or equals; like. key and value may not contain underscore or comma characters.\n * @param {String} [params.processVariables]                Only include tasks that belong to process instances that have variables with certain values.\n *                                                          Variable tasking expressions are comma-separated and are structured as follows:\n *                                                          A valid parameter value has the form key_operator_value. \"key\" is the variable name, \"op\" is the comparison operator to be used and value the variable value.\n *                                                          Note: Values are always treated as String objects on server side.\n *                                                          Valid operator values are: \"eq\" - equals; \"neq\" - not equals; \"gt\" - greater than; \"gteq\" - greater than or equals; \"lt\" - lower than; \"lteq\" - lower than or equals; like.\n *                                                          \"key\" and \"value\" may not contain underscore or comma characters.\n *\n * @param {String} [params.sortBy]                          Sort the results lexicographically by a given criterion.\n *                                                          Valid values are \"instanceId\", \"dueDate\", \"executionId\", \"assignee\", \"created\", \"description\", \"id\", \"name\" and \"priority\".\n *                                                          Must be used in conjunction with the sortOrder parameter.\n * @param {String} [params.sortOrder]                       Sort the results in a given order. Values may be \"asc\" for ascending order or \"desc\" for descending order.\n *                                                          Must be used in conjunction with the sortBy parameter.\n *\n * @param {String} [params.firstResult]                     Pagination of results. Specifies the index of the first result to return.\n * @param {String} [params.maxResults]                      Pagination of results. Specifies the maximum number of results to return.\n *                                                          Will return less results, if there are no more results left.\n * @param {Function} done\n */\nTask.list = function(params, done) {\n  return this.http.get(this.path, {\n    data: params,\n    done: function(err, data) {\n      if (err) {\n        return done(err);\n      }\n\n      // to ease the use of task data, we compile them here\n      var tasks = data._embedded.task || data._embedded.tasks;\n      var procDefs = data._embedded.processDefinition;\n\n      for (var t in tasks) {\n        var task = tasks[t];\n        task._embedded = task._embedded || {};\n        for (var p in procDefs) {\n          if (procDefs[p].id === task.processDefinitionId) {\n            task._embedded.processDefinition = [procDefs[p]];\n            break;\n          }\n        }\n      }\n\n      done(null, data);\n    }\n  });\n};\n\n\n/**\n * Retrieve a single task\n * @param  {uuid}     taskId   of the task to be requested\n * @param  {Function} done\n */\nTask.get = function(taskId, done) {\n  return this.http.get(this.path +'/'+ taskId, {\n    done: done\n  });\n};\n\n/**\n * Retrieve the comments for a single task\n * @param  {uuid}     taskId   of the task for which the comments are requested\n * @param  {Function} done\n */\nTask.comments = function(taskId, done) {\n  return this.http.get(this.path +'/'+ taskId + '/comment', {\n    done: done\n  });\n};\n\n/**\n * Retrieve the identity links for a single task\n * @param  {uuid}     taskId   of the task for which the identity links are requested\n * @param  {Function} done\n */\nTask.identityLinks = function(taskId, done) {\n  return this.http.get(this.path +'/'+ taskId + '/identity-links', {\n    done: done\n  });\n};\n\n/**\n * Add an identity link to a task\n * @param  {uuid}     taskId          of the task for which the identity link is created\n * @param  {Object} [params]\n * @param  {String} [params.userId]   The id of the user to link to the task. If you set this parameter, you have to omit groupId\n * @param  {String} [params.groupId]  The id of the group to link to the task. If you set this parameter, you have to omit userId\n * @param  {String} [params.type]     Sets the type of the link. Must be provided\n * @param  {Function} done\n */\nTask.identityLinksAdd = function(taskId, params, done) {\n  return this.http.post(this.path +'/'+ taskId + '/identity-links', {\n    data: params,\n    done: done\n  });\n};\n\n/**\n * Removes an identity link from a task.\n * @param  {uuid}     taskId          The id of the task to remove a link from\n * @param  {Object} [params]\n * @param  {String} [params.userId]   The id of the user being part of the link. If you set this parameter, you have to omit groupId.\n * @param  {String} [params.groupId]  The id of the group being part of the link. If you set this parameter, you have to omit userId.\n * @param  {String} [params.type]     Specifies the type of the link. Must be provided.\n * @param  {Function} done\n */\nTask.identityLinksDelete = function(taskId, params, done) {\n  return this.http.post(this.path +'/'+ taskId + '/identity-links/delete', {\n    data: params,\n    done: done\n  });\n};\n\n/**\n * Create a comment for a task.\n *\n * @param  {String}   taskId  The id of the task to add the comment to.\n * @param  {String}   message The message of the task comment to create.\n * @param  {Function} done\n */\nTask.createComment = function(taskId, message, done) {\n  return this.http.post(this.path +'/'+ taskId +'/comment/create', {\n    data: {\n      message: message\n    },\n    done: done\n  });\n};\n\n/**\n * Creates a task\n *\n * @param  {Object}   task   is an object representation of a task\n * @param  {Function} done\n */\nTask.create = function(task, done) {\n  return this.http.post(this.path +'/create', {\n    data: task,\n    done: done\n  });\n};\n\n\n/**\n * Update a task\n *\n * @param  {Object}   task   is an object representation of a task\n * @param  {Function} done\n */\nTask.update = function(task, done) {\n  return this.http.put(this.path +'/'+ task.id, {\n    data: task,\n    done: done\n  });\n};\n\n\n\n// /**\n//  * Save a task\n//  *\n//  * @see Task.create\n//  * @see Task.update\n//  *\n//  * @param  {Object}   task   is an object representation of a task, if it has\n//  *                             an id property, the task will be updated, otherwise created\n//  * @param  {Function} done\n//  */\n// Task.save = function(task, done) {\n//   return Task[task.id ? 'update' : 'create'](task, done);\n// };\n\n/**\n * Change the assignee of a task to a specific user.\n *\n * Note: The difference with claim a task is that\n * this method does not check if the task already has a user assigned to it\n *\n * Note: The response of this call is empty.\n *\n * @param  {String}   taskId\n * @param  {String}   userId\n * @param  {Function} done\n */\nTask.assignee = function(taskId, userId, done) {\n  var data = {\n      userId: userId\n  };\n\n  if (arguments.length === 2) {\n    taskId = arguments[0].taskId;\n    data.userId = arguments[0].userId;\n    done = arguments[1];\n  }\n\n  return this.http.post(this.path +'/'+ taskId +'/assignee', {\n    data: data,\n    done: done\n  });\n};\n\n\n\n/**\n * Delegate a task to another user.\n *\n * Note: The response of this call is empty.\n *\n * @param  {String}   taskId\n * @param  {String}   userId\n * @param  {Function} done\n */\nTask.delegate = function(taskId, userId, done) {\n  var data = {\n      userId: userId\n  };\n\n  if (arguments.length === 2) {\n    taskId = arguments[0].taskId;\n    data.userId = arguments[0].userId;\n    done = arguments[1];\n  }\n\n  return this.http.post(this.path +'/'+ taskId +'/delegate', {\n    data: data,\n    done: done\n  });\n};\n\n\n/**\n * Claim a task for a specific user.\n *\n * Note: The difference with set a assignee is that\n * here a check is performed to see if the task already has a user assigned to it.\n *\n * Note: The response of this call is empty.\n *\n * @param  {String}   taskId\n * @param  {String}   userId\n * @param  {Function} done\n */\nTask.claim = function(taskId, userId, done) {\n  var data = {\n      userId: userId\n  };\n\n  if (arguments.length === 2) {\n    taskId = arguments[0].taskId;\n    data.userId = arguments[0].userId;\n    done = arguments[1];\n  }\n\n  return this.http.post(this.path +'/'+ taskId +'/claim', {\n    data: data,\n    done: done\n  });\n};\n\n\n/**\n * Resets a task's assignee. If successful, the task is not assigned to a user.\n *\n * Note: The response of this call is empty.\n *\n * @param  {String}   taskId\n * @param  {Function} done\n */\nTask.unclaim = function(taskId, done) {\n  if (typeof taskId !== 'string') {\n    taskId = taskId.taskId;\n  }\n\n  return this.http.post(this.path +'/'+ taskId +'/unclaim', {\n    done: done\n  });\n};\n\n\n/**\n * Complete a task and update process variables using a form submit.\n * There are two difference between this method and the complete method:\n *\n * If the task is in state PENDING - ie. has been delegated before,\n * it is not completed but resolved. Otherwise it will be completed.\n *\n * If the task has Form Field Metadata defined,\n * the process engine will perform backend validation for any form fields which have validators defined.\n * See the Generated Task Forms section of the User Guide for more information.\n *\n * @param  {Object}   data\n * @param  {Function} done\n */\nTask.submitForm = function(data, done) {\n  if (!data.id) {\n    return done(new Error('Task submitForm needs a task id.'));\n  }\n\n  return this.http.post(this.path +'/'+ data.id +'/submit-form', {\n    data: {\n      variables: data.variables\n    },\n    done: done || function() {}\n  });\n};\n\n\n\n\n\n\nTask.formVariables = function(data, done) {\n  var pointer = '';\n  if (data.key) {\n    pointer = 'key/'+ data.key;\n  }\n  else if (data.id) {\n    pointer = data.id;\n  }\n  else {\n    return done(new Error('Task variables needs either a key or an id.'));\n  }\n\n  var queryData = {\n    deserializeValues: data.deserializeValues\n  };\n\n  if(data.names) {\n    queryData.variableNames = data.names.join(',');\n  }\n\n  return this.http.get(this.path +'/'+ pointer +'/form-variables', {\n    data: queryData,\n    done: done || function() {}\n  });\n};\n\n/**\n * Retrieve the form for a single task\n * @param  {uuid}     taskId   of the task for which the form is requested\n * @param  {Function} done\n */\nTask.form = function(taskId, done) {\n  return this.http.get(this.path +'/'+ taskId + '/form', {\n    done: done\n  });\n};\n\n/**\n * Sets a variable in the context of a given task.\n * @param {Object} [params]\n * @param {String} [params.id]         The id of the task to set the variable for.\n * @param {String} [params.varId]      The name of the variable to set.\n * @param {String} [params.value]      The variable's value. For variables of type Object, the serialized value has to be submitted as a String value.\n * @param {String} [params.type]       The value type of the variable.\n * @param {String} [params.valueInfo]  A JSON object containing additional, value-type-dependent properties.\n * @param {Function} done\n */\nTask.localVariable = function(params, done) {\n  return this.http.put(this.path +'/'+ params.id + '/localVariables/' + params.varId, {\n    data: params,\n    done: done\n  });\n};\n\n/**\n * Retrieve the local variables for a single task\n * @param  {uuid}     taskId   of the task for which the variables are requested\n * @param  {Function} done\n */\nTask.localVariables = function(taskId, done) {\n    return this.http.get(this.path + '/' + taskId + '/localVariables', {\n        done: done\n    });\n};\n\nmodule.exports = Task;\n\n\n},{\"./../abstract-client-resource\":4}],21:[function(_dereq_,module,exports){\n'use strict';\n\nvar AbstractClientResource = _dereq_('./../abstract-client-resource');\n\n/**\n * User Resource\n * @class\n * @memberof CamSDK.client.resource\n * @augments CamSDK.client.AbstractClientResource\n */\nvar User = AbstractClientResource.extend();\n\n/**\n * Path used by the resource to perform HTTP queries\n * @type {String}\n */\nUser.path = 'user';\n\n\n/**\n * Creates a user\n * @param  {Object}   options\n * @param  {String}   options.id\n * @param  {String}   options.password\n * @param  {String}   options.firstName\n * @param  {String}   options.lastName\n * @param  {String}   [options.email]\n * @param  {Function} done\n */\nUser.create = function (options, done) {\n  options = options || {};\n\n  var required = [\n    'id',\n    'firstName',\n    'lastName',\n    'password'\n  ];\n  for (var r in required) {\n    var name = required[r];\n    if (!options[name]) {\n      return done(new Error('Missing ' + name + ' option to create user'));\n    }\n  }\n\n  var data = {\n    profile: {\n      id: options.id,\n      firstName: options.firstName,\n      lastName: options.lastName\n    },\n    credentials: {\n      password: options.password\n    }\n  };\n\n  if (options.email) {\n    data.profile.email = options.email;\n  }\n\n  return this.http.post(this.path +'/create', {\n    data: data,\n    done: done || function() {}\n  });\n};\n\n\n/**\n * List users\n * @param {Object} [options]\n * @param {String} [options.id]            Filter by the id of the user.\n * @param {String} [options.firstName]     Filter by the firstname of the user.\n * @param {String} [options.firstNameLike] Filter by the firstname that the parameter is a substring of.\n * @param {String} [options.lastName]      Filter by the lastname of the user.\n * @param {String} [options.lastNameLike]  Filter by the lastname that the parameter is a substring of.\n * @param {String} [options.email]         Filter by the email of the user.\n * @param {String} [options.emailLike]     Filter by the email that the parameter is a substring of.\n * @param {String} [options.memberOfGroup] Filter for users which are members of a group.\n * @param {String} [options.sortBy]        Sort the results lexicographically by a given criterion. Valid values are userId, firstName, lastName and email. Must be used in conjunction with the sortOrder parameter.\n * @param {String} [options.sortOrder]     Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.\n * @param {String} [options.firstResult]   Pagination of results. Specifies the index of the first result to return.\n * @param {String} [options.maxResults]    Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.\n * @param  {Function} done\n */\nUser.list = function (options, done) {\n  if (arguments.length === 1) {\n    done = options;\n    options = {};\n  }\n  else {\n    options = options || {};\n  }\n\n  this.http.get(this.path, {\n    data: options,\n    done: done || function () {}\n  });\n};\n\n\n/**\n * Count the amount of users\n * @param {String} [options.id]            id of the user.\n * @param {String} [options.firstName]     firstname of the user.\n * @param {String} [options.firstNameLike] firstname that the parameter is a substring of.\n * @param {String} [options.lastName]      lastname of the user.\n * @param {String} [options.lastNameLike]  lastname that the parameter is a substring of.\n * @param {String} [options.email]         email of the user.\n * @param {String} [options.emailLike]     email that the parameter is a substring of.\n * @param {String} [options.memberOfGroup] users which are members of a group.\n * @param  {Function} done\n */\nUser.count = function (options, done) {\n  if (arguments.length === 1) {\n    done = options;\n    options = {};\n  }\n  else {\n    options = options || {};\n  }\n\n  this.http.get(this.path + '/count', {\n    data: options,\n    done: done || function () {}\n  });\n};\n\n\n/**\n * Get the profile of a user\n * @param  {Object|uuid}  options\n * @param  {uuid}         options.id\n * @param  {Function} done\n */\nUser.profile = function (options, done) {\n  var id = typeof options === 'string' ? options : options.id;\n\n  this.http.del(this.path + '/' + id + '/profile', {\n    done: done || function () {}\n  });\n};\n\n\n/**\n * Updates the profile of a user\n * @param  {Object}   options\n * @param  {uuid}     options.id id of the user to be updated\n * @param  {String}   [options.firstName]\n * @param  {String}   [options.lastName]\n * @param  {String}   [options.email]\n * @param  {Function} done\n */\nUser.updateProfile = function (options, done) {\n  options = options || {};\n\n  if (!options.id) {\n    return done(new Error('Missing id option to update user profile'));\n  }\n\n  this.http.put(this.path + '/' + options.id + '/profile', {\n    data: options,\n    done: done || function () {}\n  });\n};\n\n\n\n/**\n * Update the credentials of a user\n * @param {Object} options\n * @param {uuid} options.id                           The user's (who will be updated) id\n * @param {String} options.password                     The user's new password.\n * @param {String} [options.authenticatedUserPassword]  The password of the authenticated user who changes the password of the user (ie. the user with passed id as path parameter).\n * @param  {Function} done\n */\nUser.updateCredentials = function (options, done) {\n  options = options || {};\n\n  if (!options.id) {\n    return done(new Error('Missing id option to update user credentials'));\n  }\n\n  if (!options.password) {\n    return done(new Error('Missing password option to update user credentials'));\n  }\n\n  var data = {\n    password: options.password\n  };\n\n  if (options.authenticatedUserPassword) {\n    data.authenticatedUserPassword = options.authenticatedUserPassword;\n  }\n\n  this.http.put(this.path + '/' + options.id + '/credentials', {\n    data: data,\n    done: done || function () {}\n  });\n};\n\n\n/**\n * Delete a user\n * @param  {Object|uuid} options You can either pass an object (with at least a id property) or the id of the user to be deleted\n * @param  {uuid} options.id\n * @param  {Function} done\n */\nUser.delete = function (options, done) {\n  var id = typeof options === 'string' ? options : options.id;\n\n  this.http.del(this.path + '/' + id, {\n    done: done || function () {}\n  });\n};\n\nmodule.exports = User;\n\n},{\"./../abstract-client-resource\":4}],22:[function(_dereq_,module,exports){\n'use strict';\n\nvar AbstractClientResource = _dereq_('./../abstract-client-resource');\n\n\n\n/**\n * Variable Resource\n * @class\n * @memberof CamSDK.client.resource\n * @augments CamSDK.client.AbstractClientResource\n */\nvar Variable = AbstractClientResource.extend();\n\n/**\n * Path used by the resource to perform HTTP queries\n * @type {String}\n */\nVariable.path = 'variable-instance';\n\n\n/**\n * Get variable instances\n *\n * @param  {Object}           params\n *\n * @param  {String}           [params.variableName]         Filter by variable instance name.\n *\n * @param  {String}           [params.variableNameLike]     Filter by the variable instance name.\n *                                                          The parameter can include the wildcard %\n *                                                          to express like-strategy such as:\n *                                                          - starts with (%name)\n *                                                          - ends with (name%)\n *                                                          - contains (%name%).\n *\n * @param  {String[]}         [params.processInstanceIdIn]  Only include variable instances which\n *                                                          belong to one of the passed and\n *                                                          comma-separated process instance ids.\n *\n * @param  {String[]}         [params.executionIdIn]        Only include variable instances which\n *                                                          belong to one of the passed and\n *                                                          comma-separated execution ids.\n *\n * @param  {String[]}         [params.caseInstanceIdIn]     Only include variable instances which\n *                                                          belong to one of the passed\n *                                                          case instance ids.\n *\n * @param  {String[]}         [params.caseExecutionIdIn]    Only include variable instances which\n *                                                          belong to one of the passed\n *                                                          case execution ids.\n *\n * @param  {String[]}         [params.taskIdIn]             Only include variable instances which\n *                                                          belong to one of the passed and\n *                                                          comma-separated task ids.\n *\n * @param  {String[]}         [params.activityInstanceIdIn] Only include variable instances which\n *                                                          belong to one of the passed and\n *                                                          comma-separated activity instance ids.\n *\n * @param  {String}           [params.variableValues]       Only include variable instances that\n *                                                          have the certain values. Value filtering\n *                                                          expressions are comma-separated and are\n *                                                          structured as follows:\n *                                                          A valid parameter value has the form\n *                                                          key_operator_value.\n *                                                          key is the variable name,\n *                                                          operator is the comparison operator to\n *                                                          be used and value the variable value.\n *                                                          *Note*: Values are always treated as\n *                                                          String objects on server side.\n *                                                          Valid operator values are:\n *                                                          - eq - equal to\n *                                                          - neq - not equal to\n *                                                          - gt - greater than\n *                                                          - gteq - greater than or equal to\n *                                                          - lt - lower than\n *                                                          - lteq - lower than or equal to\n *                                                          key and value may not contain underscore\n *                                                          or comma characters.\n *\n * @param  {String}           [params.sortBy]               Sort the results lexicographically by a\n *                                                          given criterion. Valid values are\n *                                                          variableName, variableType and\n *                                                          activityInstanceId.\n *                                                          Must be used in conjunction with the\n *                                                          sortOrder parameter.\n *\n * @param  {String}           [params.sortOrder]            Sort the results in a given order.\n *                                                          Values may be asc for ascending order or\n *                                                          desc for descending order.\n *                                                          Must be used in conjunction with the\n *                                                          sortBy parameter.\n *\n * @param  {String}           [params.firstResult]          Pagination of results. Specifies the\n *                                                          index of the first result to return.\n *\n * @param  {String}           [params.maxResults]           Pagination of results. Specifies the\n *                                                          maximum number of results to return.\n *                                                          Will return less results if there are no\n *                                                          more results left.\n *\n * @param  {String}           [params.deserializeValues]    Determines whether serializable variable\n *                                                          values (typically variables that store\n *                                                          custom Java objects) should be\n *                                                          deserialized on server side\n *                                                          (default true).\n *                                                          If set to true, a serializable variable\n *                                                          will be deserialized on server side and\n *                                                          transformed to JSON using\n *                                                          Jackson's POJO/bean property\n *                                                          introspection feature.\n *                                                          Note that this requires the Java classes\n *                                                          of the variable value to be on the\n *                                                          REST API's classpath.\n *                                                          If set to false, a serializable variable\n *                                                          will be returned in its serialized\n *                                                          format.\n *                                                          For example, a variable that is\n *                                                          serialized as XML will be returned as a\n *                                                          JSON string containing XML.\n *                                                          Note:While true is the default value for\n *                                                          reasons of backward compatibility, we\n *                                                          recommend setting this parameter to\n *                                                          false when developing web applications\n *                                                          that are independent of the Java process\n *                                                          applications deployed to the engine.\n *\n * @param  {RequestCallback}  done\n */\nVariable.instances = function (data, done) {\n  this.http.post(this.path, {\n    data: data,\n    done: done\n  });\n};\n\nmodule.exports = Variable;\n\n\n},{\"./../abstract-client-resource\":4}],23:[function(_dereq_,module,exports){\n'use strict';\n\nvar Events = _dereq_('./events');\n\nfunction noop() {}\n\n/**\n * Abstract class for classes\n *\n * @class\n * @memberof CamSDK\n *\n * @borrows CamSDK.Events.on                        as on\n * @borrows CamSDK.Events.once                      as once\n * @borrows CamSDK.Events.off                       as off\n * @borrows CamSDK.Events.trigger                   as trigger\n *\n * @borrows CamSDK.Events.on                        as prototype.on\n * @borrows CamSDK.Events.once                      as prototype.once\n * @borrows CamSDK.Events.off                       as prototype.off\n * @borrows CamSDK.Events.trigger                   as prototype.trigger\n */\nfunction BaseClass() {\n  this.initialize();\n}\n\n\n\n\n/**\n * Creates a new Resource Class, very much inspired from Backbone.Model.extend.\n * [Backbone helpers]{@link http://backbonejs.org/docs/backbone.html}\n *\n *\n * @param  {?Object.<String, *>} protoProps\n * @param  {Object.<String, *>} [staticProps]\n * @return {CamSDK.BaseClass}\n */\nBaseClass.extend = function(protoProps, staticProps) {\n  protoProps = protoProps || {};\n  staticProps = staticProps || {};\n\n  var parent = this;\n  var child, Surrogate, s, i;\n\n  if (protoProps && Object.hasOwnProperty.call(parent, 'constructor')) {\n    child = protoProps.constructor;\n  }\n  else {\n    child = function(){ return parent.apply(this, arguments); };\n  }\n\n  for (s in parent) {\n    child[s] = parent[s];\n  }\n  for (s in staticProps) {\n    child[s] = staticProps[s];\n  }\n\n  Surrogate = function(){ this.constructor = child; };\n  Surrogate.prototype = parent.prototype;\n  child.prototype = new Surrogate();\n\n  for (i in protoProps) {\n    child.prototype[i] = protoProps[i];\n  }\n\n  return child;\n};\n\n\n/**\n * Aimed to be overriden in order to initialize an instance.\n *\n * @memberof CamSDK.BaseClass.prototype\n * @method initialize\n */\nBaseClass.prototype.initialize = noop;\n\n\nEvents.attach(BaseClass);\n\n\n\nmodule.exports = BaseClass;\n\n},{\"./events\":24}],24:[function(_dereq_,module,exports){\n'use strict';\n\n/**\n * Events handling utility which can be used on\n * any kind of object to provide `on`, `once`, `off`\n * and `trigger` functions.\n *\n * @exports CamSDK.Events\n * @mixin\n *\n * @example\n * var obj = {};\n * Events.attach(obj);\n *\n * obj.on('event:name', function() {});\n * obj.once('event:name', function() {});\n * obj.trigger('event:name', data, moreData, evenMoreData);\n */\n\nvar Events = {};\n\n\n/**\n * Converts an object into array\n * @param  {*} obj\n * @return {Array}\n */\nfunction toArray(obj) {\n  var a, arr = [];\n  for (a in obj) {\n    arr.push(obj[a]);\n  }\n  return arr;\n}\n\n/**\n * Returns a function that will be executed\n * at most one time, no matter how often you call it.\n * @param  {Function} func\n * @return {Function}\n */\nfunction once(func) {\n  var ran = false, memo;\n  return function() {\n    if (ran) return memo;\n    ran = true;\n    memo = func.apply(this, arguments);\n    func = null;\n    return memo;\n  };\n}\n\n\n/**\n * Ensure an object to have the needed _events property\n * @param  {*} obj\n * @param  {String} name\n */\nfunction ensureEvents(obj, name) {\n  obj._events = obj._events || {};\n  obj._events[name] = obj._events[name] || [];\n}\n\n\n/**\n * Add the relevant Events methods to an object\n * @param  {*} obj\n */\nEvents.attach = function(obj) {\n  obj.on      = this.on;\n  obj.once    = this.once;\n  obj.off     = this.off;\n  obj.trigger = this.trigger;\n  obj._events = {};\n};\n\n\n/**\n * Bind a callback to `eventName`\n * @param  {String}   eventName\n * @param  {Function} callback\n */\nEvents.on = function(eventName, callback) {\n  ensureEvents(this, eventName);\n\n  this._events[eventName].push(callback);\n\n  return this;\n};\n\n\n/**\n * Bind a callback who will only be called once to `eventName`\n * @param  {String}   eventName\n * @param  {Function} callback\n */\nEvents.once = function(eventName, callback) {\n  var self = this;\n  var cb = once(function() {\n    self.off(eventName, once);\n    callback.apply(this, arguments);\n  });\n  cb._callback = callback;\n  return this.on(eventName, cb);\n};\n\n\n/**\n * Unbind one or all callbacks originally bound to `eventName`\n * @param  {String}   eventName\n * @param  {Function} [callback]\n */\nEvents.off = function(eventName, callback) {\n  ensureEvents(this, eventName);\n\n  if (!callback) {\n    delete this._events[eventName];\n    return this;\n  }\n\n  var e, ev, arr = [];\n  for (e in this._events[eventName]) {\n    if (this._events[eventName][e] !== callback) {\n      arr.push(this._events[eventName][e]);\n    }\n  }\n  this._events[eventName] = arr;\n\n  return this;\n};\n\n\n/**\n * Call the functions bound to `eventName`\n * @param  {String} eventName\n * @param {...*} [params]\n */\nEvents.trigger = function() {\n  var args = toArray(arguments);\n  var eventName = args.shift();\n  ensureEvents(this, eventName);\n\n  var e, ev;\n  for (e in this._events[eventName]) {\n    this._events[eventName][e](this, args);\n  }\n\n  return this;\n};\n\n\nmodule.exports = Events;\n\n},{}],25:[function(_dereq_,module,exports){\n'use strict';\n/* global CamSDK, require, localStorage: false */\n\n/**\n * For all API client related\n * @namespace CamSDK.form\n */\n\nvar $ = _dereq_('./dom-lib');\n\nvar VariableManager = _dereq_('./variable-manager');\n\nvar InputFieldHandler = _dereq_('./controls/input-field-handler');\n\nvar ChoicesFieldHandler = _dereq_('./controls/choices-field-handler');\n\nvar BaseClass = _dereq_('./../base-class');\n\nvar constants = _dereq_('./constants');\n\nvar Events = _dereq_('./../events');\n\n\n\n/**\n * A class to help handling embedded forms\n *\n * @class\n * @memberof CamSDk.form\n *\n * @param {Object.<String,*>} options\n * @param {Cam}               options.client\n * @param {String}            [options.taskId]\n * @param {String}            [options.processDefinitionId]\n * @param {String}            [options.processDefinitionKey]\n * @param {Element}           [options.formContainer]\n * @param {Element}           [options.formElement]\n * @param {String}            [options.formUrl]\n */\nfunction CamundaForm(options) {\n  if(!options) {\n    throw new Error('CamundaForm need to be initialized with options.');\n  }\n\n  var done = options.done = options.done || function (err) { if(err) throw err; };\n\n  if (options.client) {\n    this.client = options.client;\n  }\n  else {\n    this.client = new CamSDK.Client(options.clientConfig || {});\n  }\n\n  if (!options.taskId && !options.processDefinitionId && !options.processDefinitionKey) {\n    return done(new Error('Cannot initialize Taskform: either \\'taskId\\' or \\'processDefinitionId\\' or \\'processDefinitionKey\\' must be provided'));\n  }\n\n  this.taskId = options.taskId;\n  this.processDefinitionId = options.processDefinitionId;\n  this.processDefinitionKey = options.processDefinitionKey;\n\n  this.formElement = options.formElement;\n  this.containerElement = options.containerElement;\n  this.formUrl = options.formUrl;\n\n  if(!this.formElement && !this.containerElement) {\n    return done(new Error('CamundaForm needs to be initilized with either \\'formElement\\' or \\'containerElement\\''));\n  }\n\n  if(!this.formElement && !this.formUrl) {\n    return done(new Error('Camunda form needs to be intialized with either \\'formElement\\' or \\'formUrl\\''));\n  }\n\n  /**\n   * A VariableManager instance\n   * @type {VariableManager}\n   */\n  this.variableManager = new VariableManager({\n    client: this.client\n  });\n\n  /**\n   * An array of FormFieldHandlers\n   * @type {FormFieldHandlers[]}\n   */\n  this.formFieldHandlers = options.formFieldHandlers || [\n    InputFieldHandler,\n    ChoicesFieldHandler\n  ];\n\n  this.businessKey = null;\n\n  this.fields = [];\n\n  this.scripts = [];\n\n  this.options = options;\n\n  // init event support\n  Events.attach(this);\n\n  this.initialize(done);\n}\n\n/**\n * @memberof CamSDK.form.CamundaForm.prototype\n */\nCamundaForm.prototype.initializeHandler = function(FieldHandler) {\n  var self = this;\n  var selector = FieldHandler.selector;\n  $(selector, self.formElement).each(function() {\n    self.fields.push(new FieldHandler(this, self.variableManager));\n  });\n};\n\n\n\n/**\n * @memberof CamSDK.form.CamundaForm.prototype\n */\nCamundaForm.prototype.initialize = function(done) {\n  done = done || function (err) { if(err) throw err; };\n  var self = this;\n\n  // check whether form needs to be loaded first\n  if(this.formUrl) {\n\n    this.client.http.load(this.formUrl, {\n      accept: '*/*',\n      done: function(err, result) {\n        if(err) {\n          return done(err);\n        }\n\n        try {\n          self.renderForm(result);\n          self.initializeForm(done);\n\n        } catch (error) {\n          done(error);\n        }\n      },\n      data: { noCache: Date.now() }\n    });\n  } else {\n\n    try  {\n      this.initializeForm(done);\n\n    } catch (error) {\n      done(error);\n    }\n  }\n};\n\n\n\n/**\n * @memberof CamSDK.form.CamundaForm.prototype\n */\nCamundaForm.prototype.renderForm = function(formHtmlSource) {\n\n  // apppend the form html to the container element,\n  // we also wrap the formHtmlSource to limit the risks of breaking\n  // the structure of the document\n  $(this.containerElement)\n    .html('')\n    .append('<div class=\"injected-form-wrapper\">'+formHtmlSource+'</div>');\n\n  // extract and validate form element\n  var formElement = this.formElement = $('form', this.containerElement);\n  if(formElement.length !== 1) {\n    throw new Error('Form must provide exaclty one element <form ..>');\n  }\n  if(!formElement.attr('name')) {\n    formElement.attr('name', '$$camForm');\n  }\n};\n\n\n\n/**\n * @memberof CamSDK.form.CamundaForm.prototype\n */\nCamundaForm.prototype.initializeForm = function(done) {\n  var self = this;\n\n  // handle form scripts\n  this.initializeFormScripts();\n\n  // initialize field handlers\n  this.initializeFieldHandlers();\n\n  // execute the scripts\n  this.executeFormScripts();\n\n  // fire form loaded\n  this.fireEvent('form-loaded');\n\n  this.fetchVariables(function(err, result) {\n    if (err) {\n      throw err;\n    }\n\n    // merge the variables\n    self.mergeVariables(result);\n\n    // retain original server values for dirty checking\n    self.storeOriginalValues(result);\n\n    // fire variables fetched\n    self.fireEvent('variables-fetched');\n\n    // restore variables from local storage\n    self.restore();\n\n    // fire variables-restored\n    self.fireEvent('variables-restored');\n\n    // apply the variables to the form fields\n    self.applyVariables();\n\n    // fire variables applied\n    self.fireEvent('variables-applied');\n\n    // invoke callback\n    done(null, self);\n  });\n};\n\nCamundaForm.prototype.initializeFieldHandlers = function() {\n  for(var FieldHandler in this.formFieldHandlers) {\n    this.initializeHandler(this.formFieldHandlers[FieldHandler]);\n  }\n};\n\n/**\n * @memberof CamSDK.form.CamundaForm.prototype\n */\nCamundaForm.prototype.initializeFormScripts = function() {\n  var formScriptElements = $( 'script['+constants.DIRECTIVE_CAM_SCRIPT+']', this.formElement);\n  for(var i = 0; i<formScriptElements.length; i++) {\n    this.scripts.push(formScriptElements[i].text);\n  }\n};\n\nCamundaForm.prototype.executeFormScripts = function() {\n  for(var i = 0; i<this.scripts.length; i++) {\n    this.executeFormScript(this.scripts[i]);\n  }\n};\n\nCamundaForm.prototype.executeFormScript = function(script) {\n  /* jshint unused: false */\n  (function(camForm) {\n\n    /* jshint evil: true */\n    eval(script);\n    /* jshint evil: false */\n\n  })(this);\n};\n\n\n\n/**\n * @memberof CamSDK.form.CamundaForm.prototype\n *\n * Store the state of the form to localStorage.\n *\n * You can prevent further execution by hooking\n * the `store` event and set `storePrevented` to\n * something truthy.\n */\nCamundaForm.prototype.store = function(callback) {\n  var formId = this.taskId || this.processDefinitionId || this.caseInstanceId;\n\n  if (!formId) {\n    if(typeof callback === 'function') {\n      return callback(new Error('Cannot determine the storage ID'));\n    } else {\n      throw new Error('Cannot determine the storage ID');\n    }\n  }\n\n  this.storePrevented = false;\n  this.fireEvent('store');\n  if(!!this.storePrevented) {\n    return;\n  }\n\n  try {\n    // get values from form fields\n    this.retrieveVariables();\n\n    // build the local storage object\n    var store = {date: Date.now(), vars: {}};\n    for(var name in this.variableManager.variables) {\n      if(this.variableManager.variables[name].type !== 'Bytes') {\n        store.vars[name] = this.variableManager.variables[name].value;\n      }\n    }\n\n    // store it\n    localStorage.setItem('camForm:'+ formId, JSON.stringify(store));\n  }\n  catch (error) {\n    if(typeof callback === 'function') {\n      return callback(error);\n    } else {\n      throw error;\n    }\n  }\n  this.fireEvent('variables-stored');\n  if(typeof callback === 'function') {\n    callback();\n  }\n};\n\n\n\n/**\n * @memberof CamSDK.form.CamundaForm.prototype\n * @return {Boolean} `true` if there is something who can be restored\n */\nCamundaForm.prototype.isRestorable = function() {\n  var formId = this.taskId || this.processDefinitionId || this.caseInstanceId;\n\n  if (!formId) {\n    throw new Error('Cannot determine the storage ID');\n  }\n\n  // verify the presence of an entry\n  if (!localStorage.getItem('camForm:'+ formId)) {\n    return false;\n  }\n\n  // unserialize\n  var stored = localStorage.getItem('camForm:'+ formId);\n  try  {\n    stored = JSON.parse(stored);\n  }\n  catch (error) {\n    return false;\n  }\n\n  // check the content\n  if (!stored || !Object.keys(stored).length) {\n    return false;\n  }\n\n  return true;\n};\n\n\n/**\n * @memberof CamSDK.form.CamundaForm.prototype\n *\n * Restore the state of the form from localStorage.\n *\n * You can prevent further execution by hooking\n * the `restore` event and set `restorePrevented` to\n * something truthy.\n */\nCamundaForm.prototype.restore = function(callback) {\n  var stored;\n  var vars = this.variableManager.variables;\n  var formId = this.taskId || this.processDefinitionId || this.caseDefinitionId;\n\n  if (!formId) {\n    if(typeof callback === 'function') {\n      return callback(new Error('Cannot determine the storage ID'));\n    } else {\n      throw new Error('Cannot determine the storage ID');\n    }\n  }\n\n\n  // no need to go further if there is nothing to restore\n  if (!this.isRestorable()) {\n    if(typeof callback === 'function') {\n      return callback();\n    }\n    return;\n  }\n\n  try {\n    // retrieve the values from localStoarge\n    stored = localStorage.getItem('camForm:'+ formId);\n    stored = JSON.parse(stored).vars;\n  }\n  catch (error) {\n    if(typeof callback === 'function') {\n      return callback(error);\n    } else {\n      throw error;\n    }\n  }\n\n  // merge the stored values on the variableManager.variables\n  for (var name in stored) {\n    if (vars[name]) {\n      vars[name].value = stored[name];\n    }\n    else {\n      vars[name] = {\n        name: name,\n        value: stored[name]\n      };\n    }\n  }\n\n  if(typeof callback === 'function') {\n    callback();\n  }\n\n};\n\n\n/**\n * @memberof CamSDK.form.CamundaForm.prototype\n */\nCamundaForm.prototype.submit = function(callback) {\n  var formId = this.taskId || this.processDefinitionId;\n\n  // fire submit event (event handler may prevent submit from being performed)\n  this.submitPrevented = false;\n  this.fireEvent('submit');\n  if (!!this.submitPrevented) {\n    return;\n  }\n\n  try {\n    // get values from form fields\n    this.retrieveVariables();\n  } catch (error) {\n    return callback(error);\n  }\n\n  var self = this;\n  this.transformFiles(function() {\n    // clear the local storage for this form\n    localStorage.removeItem('camForm:'+ formId);\n\n    // submit the form variables\n    self.submitVariables(function(err, result) {\n      if(err) {\n        self.fireEvent('submit-failed', err);\n        return callback(err);\n      }\n\n      self.fireEvent('submit-success');\n      callback(null, result);\n    });\n  });\n\n};\n\nCamundaForm.prototype.transformFiles = function(callback) {\n  var that = this;\n  var counter = 1;\n\n  var callCallback = function() {\n    if(--counter === 0) {\n      callback();\n    }\n  };\n\n  var bytesToSize = function(bytes) {\n     if(bytes === 0) return '0 Byte';\n     var k = 1000;\n     var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n     var i = Math.floor(Math.log(bytes) / Math.log(k));\n     return (bytes / Math.pow(k, i)).toPrecision(3) + ' ' + sizes[i];\n  };\n\n  for (var i in this.fields) {\n    var element = this.fields[i].element[0];\n    if(element.getAttribute('type') === 'file') {\n      if(typeof FileReader === 'function' && element.files.length > 0) {\n        if(element.files[0].size > (parseInt(element.getAttribute('cam-max-filesize'),10) || 5000000)) {\n          throw new Error('Maximum file size of ' + bytesToSize(parseInt(element.getAttribute('cam-max-filesize'),10) || 5000000) + ' exceeded.');\n        }\n        var reader = new FileReader();\n        /* jshint ignore:start */\n        reader.onloadend = (function(i) {\n          return function(e) {\n            var binary = '';\n            var bytes = new Uint8Array( e.target.result );\n            var len = bytes.byteLength;\n            for (var j = 0; j < len; j++) {\n                binary += String.fromCharCode( bytes[ j ] );\n            }\n            that.variableManager.variables[that.fields[i].variableName].value = btoa(binary);\n            callCallback();\n          };\n        })(i);\n        /* jshint ignore:end */\n        reader.readAsArrayBuffer(element.files[0]);\n        counter++;\n      } else {\n        that.variableManager.variables[that.fields[i].variableName].value = null;\n      }\n    }\n  }\n\n  callCallback();\n\n};\n\n/**\n * @memberof CamSDK.form.CamundaForm.prototype\n */\nCamundaForm.prototype.fetchVariables = function(done) {\n  done = done || function(){};\n  var names = this.variableManager.variableNames();\n  if (names.length) {\n\n    var data = {\n      names: names,\n      deserializeValues: false\n    };\n\n    // pass either the taskId, processDefinitionId or processDefinitionKey\n    if (this.taskId) {\n      data.id = this.taskId;\n      this.client.resource('task').formVariables(data, done);\n    }\n    else {\n      data.id = this.processDefinitionId;\n      data.key = this.processDefinitionKey;\n      this.client.resource('process-definition').formVariables(data, done);\n    }\n  }\n  else {\n    done();\n  }\n};\n\n\n\n/**\n * @memberof CamSDK.form.CamundaForm.prototype\n */\nCamundaForm.prototype.submitVariables = function(done) {\n  done = done || function() {};\n\n  var varManager = this.variableManager;\n  var vars = varManager.variables;\n\n  var variableData = {};\n  for(var v in vars) {\n    // only submit dirty variables\n    // LIMITATION: dirty checking is not performed for complex object variables\n    if(varManager.isDirty(v)) {\n      var val = vars[v].value;\n      // if variable is JSON, serialize\n\n      if(varManager.isJsonVariable(v)) {\n        val = JSON.stringify(val);\n      }\n\n      variableData[v] = {\n        value: val,\n        type: vars[v].type,\n        valueInfo: vars[v].valueInfo\n      };\n    }\n  }\n\n  var data = { variables: variableData };\n\n  // pass either the taskId, processDefinitionId or processDefinitionKey\n  if (this.taskId) {\n    data.id = this.taskId;\n    this.client.resource('task').submitForm(data, done);\n  }\n  else {\n    var businessKey = this.businessKey || this.formElement.find('input[type=\"text\"][cam-business-key]').val();\n    if (businessKey) {\n      data.businessKey = businessKey;\n    }\n    data.id = this.processDefinitionId;\n    data.key = this.processDefinitionKey;\n    this.client.resource('process-definition').submitForm(data, done);\n  }\n};\n\n/**\n * @memberof CamSDK.form.CamundaForm.prototype\n */\nCamundaForm.prototype.storeOriginalValues = function(variables) {\n  for(var v in variables) {\n    this.variableManager.setOriginalValue(v, variables[v].value);\n  }\n};\n\n/**\n * @memberof CamSDK.form.CamundaForm.prototype\n */\nCamundaForm.prototype.mergeVariables = function(variables) {\n\n  var vars = this.variableManager.variables;\n\n  for (var v in variables) {\n    if (vars[v]) {\n      for (var p in variables[v]) {\n        vars[v][p] = vars[v][p] || variables[v][p];\n      }\n    }\n    else {\n      vars[v] = variables[v];\n    }\n    // check whether the variable provides JSON payload. If true, deserialize\n    if(this.variableManager.isJsonVariable(v)) {\n      vars[v].value = JSON.parse(variables[v].value);\n    }\n    this.variableManager.isVariablesFetched = true;\n  }\n};\n\n\n\n/**\n * @memberof CamSDK.form.CamundaForm.prototype\n */\nCamundaForm.prototype.applyVariables = function() {\n\n  for (var i in this.fields) {\n    this.fields[i].applyValue();\n  }\n\n};\n\n\n\n/**\n * @memberof CamSDK.form.CamundaForm.prototype\n */\nCamundaForm.prototype.retrieveVariables = function() {\n  for (var i in this.fields) {\n    this.fields[i].getValue();\n  }\n};\n\n/**\n * @memberof CamSDK.form.CamundaForm.prototype\n */\nCamundaForm.prototype.fireEvent = function(eventName, obj) {\n  this.trigger(eventName, obj);\n};\n\n/**\n * @memberof CamSDK.form.CamundaForm\n */\nCamundaForm.$ = $;\n\nCamundaForm.VariableManager = VariableManager;\nCamundaForm.fields = {};\nCamundaForm.fields.InputFieldHandler = InputFieldHandler;\nCamundaForm.fields.ChoicesFieldHandler = ChoicesFieldHandler;\n\n/**\n * @memberof CamSDK.form.CamundaForm\n */\nCamundaForm.cleanLocalStorage = function(timestamp) {\n  for (var i = 0; i < localStorage.length; i++) {\n    var key = localStorage.key(i);\n    if(key.indexOf('camForm:') === 0) {\n      var item = JSON.parse(localStorage.getItem(key));\n      if(item.date < timestamp) {\n        localStorage.removeItem(key);\n        i--;\n      }\n    }\n  }\n};\n\n\n/**\n * @memberof CamSDK.form.CamundaForm\n * @borrows CamSDK.BaseClass.extend as extend\n * @name extend\n * @type {Function}\n */\nCamundaForm.extend = BaseClass.extend;\n\nmodule.exports = CamundaForm;\n\n\n},{\"./../base-class\":23,\"./../events\":24,\"./constants\":26,\"./controls/choices-field-handler\":28,\"./controls/input-field-handler\":29,\"./dom-lib\":30,\"./variable-manager\":32}],26:[function(_dereq_,module,exports){\n'use strict';\n\nmodule.exports = {\n  DIRECTIVE_CAM_FORM : 'cam-form',\n  DIRECTIVE_CAM_VARIABLE_NAME : 'cam-variable-name',\n  DIRECTIVE_CAM_VARIABLE_TYPE : 'cam-variable-type',\n  DIRECTIVE_CAM_CHOICES : 'cam-choices',\n  DIRECTIVE_CAM_SCRIPT : 'cam-script'\n};\n\n},{}],27:[function(_dereq_,module,exports){\n'use strict';\n\nvar BaseClass = _dereq_('../../base-class');\nvar $ = _dereq_('./../dom-lib');\n\nfunction noop() {}\n\n/**\n * An abstract class for the form field controls\n *\n * @class AbstractFormField\n * @abstract\n * @memberof CamSDK.form\n *\n */\nfunction AbstractFormField(element, variableManager) {\n  this.element = $( element );\n  this.variableManager = variableManager;\n\n  this.variableName = null;\n\n  this.initialize();\n}\n\n/**\n * @memberof CamSDK.form.AbstractFormField\n * @abstract\n * @name selector\n * @type {String}\n */\nAbstractFormField.selector = null;\n\n\n/**\n * @memberof CamSDK.form.AbstractFormField\n * @borrows CamSDK.BaseClass.extend as extend\n * @name extend\n * @type {Function}\n */\nAbstractFormField.extend = BaseClass.extend;\n\n\n/**\n * @memberof CamSDK.form.AbstractFormField.prototype\n * @abstract\n * @method initialize\n */\nAbstractFormField.prototype.initialize = noop;\n\n\n/**\n * Applies the stored value to a field element.\n *\n * @memberof CamSDK.form.AbstractFormField.prototype\n * @abstract\n * @method applyValue\n *\n * @return {CamSDK.form.AbstractFormField} Chainable method\n */\nAbstractFormField.prototype.applyValue = noop;\n\n\n/**\n * @memberof CamSDK.form.AbstractFormField.prototype\n * @abstract\n * @method getValue\n */\nAbstractFormField.prototype.getValue = noop;\n\nmodule.exports = AbstractFormField;\n\n\n},{\"../../base-class\":23,\"./../dom-lib\":30}],28:[function(_dereq_,module,exports){\n'use strict';\n\nvar constants = _dereq_('./../constants'),\n    AbstractFormField = _dereq_('./abstract-form-field'),\n    $ = _dereq_('./../dom-lib');\n\n\n/**\n * A field control handler for choices\n * @class\n * @memberof CamSDK.form\n * @augments {CamSDK.form.AbstractFormField}\n */\nvar ChoicesFieldHandler = AbstractFormField.extend(\n/** @lends CamSDK.form.ChoicesFieldHandler.prototype */\n{\n  /**\n   * Prepares an instance\n   */\n  initialize: function() {\n    // read variable definitions from markup\n    var variableName = this.variableName = this.element.attr(constants.DIRECTIVE_CAM_VARIABLE_NAME);\n    var variableType = this.variableType = this.element.attr(constants.DIRECTIVE_CAM_VARIABLE_TYPE);\n    var choicesVariableName = this.choicesVariableName = this.element.attr(constants.DIRECTIVE_CAM_CHOICES);\n\n    // crate variable\n    this.variableManager.createVariable({\n      name: variableName,\n      type: variableType,\n      value: this.element.val() || null\n    });\n\n    // fetch choices variable\n    if(!!choicesVariableName) {\n      this.variableManager.fetchVariable(choicesVariableName);\n    }\n\n    // remember the original value found in the element for later checks\n    this.originalValue = this.element.val() || null;\n\n    this.previousValue = this.originalValue;\n\n    // remember variable name\n    this.variableName = variableName;\n  },\n\n  /**\n   * Applies the stored value to a field element.\n   *\n   * @return {CamSDK.form.ChoicesFieldHandler} Chainable method.\n   */\n  applyValue: function() {\n\n    var selectedIndex = this.element[0].selectedIndex;\n    // if cam-choices variable is defined, apply options\n    if(!!this.choicesVariableName) {\n      var choicesVariableValue = this.variableManager.variableValue(this.choicesVariableName);\n      if(!!choicesVariableValue) {\n        // array\n        if (choicesVariableValue instanceof Array) {\n          for(var i = 0; i < choicesVariableValue.length; i++) {\n            var val = choicesVariableValue[i];\n            if(!this.element.find('option[text=\"'+val+'\"]').length) {\n              this.element.append($('<option>', {\n                value: val,\n                text: val\n              }));\n            }\n          }\n        // object aka map\n        } else {\n          for (var p in choicesVariableValue) {\n            if(!this.element.find('option[value=\"'+p+'\"]').length) {\n              this.element.append($('<option>', {\n                value: p,\n                text: choicesVariableValue[p]\n              }));\n            }\n          }\n        }\n      }\n    }\n\n    // make sure selected index is retained\n    this.element[0].selectedIndex = selectedIndex;\n\n    // select option referenced in cam-variable-name (if any)\n    this.previousValue = this.element.val() || '';\n    var variableValue = this.variableManager.variableValue(this.variableName);\n    if (variableValue !== this.previousValue) {\n      // write value to html control\n      this.element.val(variableValue);\n      this.element.trigger('camFormVariableApplied', variableValue);\n    }\n\n    return this;\n  },\n\n  /**\n   * Retrieves the value from a field element and stores it\n   *\n   * @return {*} when multiple choices are possible an array of values, otherwise a single value\n   */\n  getValue: function() {\n    // read value from html control\n    var value;\n    var multiple = this.element.prop('multiple');\n\n    if (multiple) {\n      value = [];\n      this.element.find('option:selected').each(function() {\n        value.push($(this).val());\n      });\n    }\n    else {\n      value = this.element.find('option:selected').attr('value');//.val();\n    }\n\n    // write value to variable\n    this.variableManager.variableValue(this.variableName, value);\n\n    return value;\n  }\n\n},\n/** @lends CamSDK.form.ChoicesFieldHandler */\n{\n  selector: 'select['+ constants.DIRECTIVE_CAM_VARIABLE_NAME +']'\n\n});\n\nmodule.exports = ChoicesFieldHandler;\n\n\n},{\"./../constants\":26,\"./../dom-lib\":30,\"./abstract-form-field\":27}],29:[function(_dereq_,module,exports){\n'use strict';\n\nvar constants = _dereq_('./../constants'),\n    AbstractFormField = _dereq_('./abstract-form-field'),\n    $ = _dereq_('./../dom-lib');\n\nvar isBooleanCheckbox = function(element) {\n  return element.attr('type') === \"checkbox\" && element.attr(constants.DIRECTIVE_CAM_VARIABLE_TYPE) === \"Boolean\";\n};\n\n/**\n * A field control handler for simple text / string values\n * @class\n * @memberof CamSDK.form\n * @augments {CamSDK.form.AbstractFormField}\n */\nvar InputFieldHandler = AbstractFormField.extend(\n/** @lends CamSDK.form.InputFieldHandler.prototype */\n{\n  /**\n   * Prepares an instance\n   */\n  initialize: function() {\n    // read variable definitions from markup\n    var variableName = this.element.attr(constants.DIRECTIVE_CAM_VARIABLE_NAME);\n    var variableType = this.element.attr(constants.DIRECTIVE_CAM_VARIABLE_TYPE);\n\n    // crate variable\n    this.variableManager.createVariable({\n      name: variableName,\n      type: variableType\n    });\n\n    // remember the original value found in the element for later checks\n    this.originalValue = this.element.val();\n\n    this.previousValue = this.originalValue;\n\n    // remember variable name\n    this.variableName = variableName;\n\n    this.getValue();\n  },\n\n  /**\n   * Applies the stored value to a field element.\n   *\n   * @return {CamSDK.form.InputFieldHandler} Chainable method\n   */\n  applyValue: function() {\n    this.previousValue = this.getValueFromHtmlControl() || '';\n    var variableValue = this.variableManager.variableValue(this.variableName);\n    if (variableValue !== this.previousValue) {\n      // write value to html control\n      this.applyValueToHtmlControl(variableValue);\n      this.element.trigger('camFormVariableApplied', variableValue);\n    }\n\n    return this;\n  },\n\n  /**\n   * Retrieves the value from an <input>\n   * element and stores it in the Variable Manager\n   *\n   * @return {*}\n   */\n  getValue: function() {\n    var value = this.getValueFromHtmlControl();\n\n    // write value to variable\n    this.variableManager.variableValue(this.variableName, value);\n\n    return value;\n  },\n\n  getValueFromHtmlControl: function() {\n    if(isBooleanCheckbox(this.element)) {\n      return this.element.prop(\"checked\");\n    } else {\n      return this.element.val();\n    }\n  },\n\n  applyValueToHtmlControl: function(variableValue) {\n    if(isBooleanCheckbox(this.element)) {\n      this.element.prop(\"checked\", variableValue);\n    } else if(this.element[0].type !== 'file') {\n      this.element.val(variableValue);\n    }\n\n  }\n\n},\n/** @lends CamSDK.form.InputFieldHandler */\n{\n\n  selector: 'input['+ constants.DIRECTIVE_CAM_VARIABLE_NAME +']'+\n           ',textarea['+ constants.DIRECTIVE_CAM_VARIABLE_NAME +']'\n\n});\n\nmodule.exports = InputFieldHandler;\n\n\n},{\"./../constants\":26,\"./../dom-lib\":30,\"./abstract-form-field\":27}],30:[function(_dereq_,module,exports){\n(function (global){\n'use strict';\n\n(function(factory) {\n  /* global global: false */\n  factory(typeof window !== 'undefined' ? window : global);\n}(function(root) {\n  root = root || {};\n  module.exports = root.jQuery ||\n                   (root.angular ? root.angular.element : false) ||\n                   root.Zepto;\n}));\n\n}).call(this,typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],31:[function(_dereq_,module,exports){\n'use strict';\n\nvar INTEGER_PATTERN = /^-?[\\d]+$/;\n\nvar FLOAT_PATTERN = /^(0|(-?(((0|[1-9]\\d*)\\.\\d+)|([1-9]\\d*))))([eE][-+]?[0-9]+)?$/;\n\nvar BOOLEAN_PATTERN = /^(true|false)$/;\n\nvar DATE_PATTERN = /^(\\d{2}|\\d{4})(?:\\-)([0]{1}\\d{1}|[1]{1}[0-2]{1})(?:\\-)([0-2]{1}\\d{1}|[3]{1}[0-1]{1})T(?:\\s)?([0-1]{1}\\d{1}|[2]{1}[0-3]{1}):([0-5]{1}\\d{1}):([0-5]{1}\\d{1})?$/;\n\nvar isType = function(value, type) {\n  switch(type) {\n    case 'Integer':\n    case 'Long':\n    case 'Short':\n      return INTEGER_PATTERN.test(value);\n    case 'Float':\n    case 'Double':\n      return FLOAT_PATTERN.test(value);\n    case 'Boolean':\n      return BOOLEAN_PATTERN.test(value);\n    case 'Date':\n      return DATE_PATTERN.test(value);\n  }\n};\n\nvar convertToType = function(value, type) {\n\n  if(typeof value === 'string') {\n    value = value.trim();\n  }\n\n  if(type === \"String\" || type === \"Bytes\") {\n    return value;\n  } else if (isType(value, type)) {\n    switch(type) {\n      case 'Integer':\n      case 'Long':\n      case 'Short':\n        return parseInt(value, 10);\n      case 'Float':\n      case 'Double':\n        return parseFloat(value);\n      case 'Boolean':\n        return \"true\" === value;\n      case 'Date':\n        return value;\n    }\n  } else {\n    throw new Error(\"Value '\"+value+\"' is not of type \"+type);\n  }\n};\n\nmodule.exports = {\n  convertToType : convertToType,\n  isType : isType\n};\n\n},{}],32:[function(_dereq_,module,exports){\n'use strict';\n\nvar convertToType = _dereq_('./type-util').convertToType;\n\n/**\n * @class\n * the variable manager is responsible for managing access to variables.\n *\n * Variable Datatype\n *\n * A variable has the following properties:\n *\n *   name: the name of the variable\n *\n *   type: the type of the variable. The type is a \"backend type\"\n *\n *\n */\nfunction VariableManager() {\n\n  /** @member object containing the form fields. Initially empty. */\n  this.variables = { };\n\n  /** @member boolean indicating whether the variables are fetched */\n  this.isVariablesFetched = false;\n\n}\n\nVariableManager.prototype.fetchVariable = function(variable) {\n  if(this.isVariablesFetched) {\n    throw new Error('Illegal State: cannot call fetchVariable(), variables already fetched.');\n  }\n  this.createVariable({ name: variable });\n};\n\nVariableManager.prototype.createVariable = function(variable) {\n  if(!this.variables[variable.name]) {\n    this.variables[variable.name] = variable;\n  } else {\n    throw new Error('Cannot add variable with name '+variable.name+': already exists.');\n  }\n};\n\nVariableManager.prototype.destroyVariable = function(variableName) {\n  if(!!this.variables[variableName]) {\n    delete this.variables[variableName];\n  } else {\n    throw new Error('Cannot remove variable with name '+variableName+': variable does not exist.');\n  }\n};\n\nVariableManager.prototype.setOriginalValue = function(variableName, value) {\n  if(!!this.variables[variableName]) {\n    this.variables[variableName].originalValue = value;\n  } else {\n    throw new Error('Cannot set original value of variable with name '+variableName+': variable does not exist.');\n  }\n\n};\n\nVariableManager.prototype.variable = function(variableName) {\n  return this.variables[variableName];\n};\n\nVariableManager.prototype.variableValue = function(variableName, value) {\n\n  var variable = this.variable(variableName);\n\n  if(typeof value === 'undefined' || value === null) {\n    value = null;\n\n  } else if(value === '' && variable.type !== 'String') {\n    // convert empty string to null for all types except String\n    value = null;\n\n  } else if(typeof value === \"string\" && variable.type !== \"String\") {\n    // convert string value into model value\n    value = convertToType(value, variable.type);\n\n  }\n\n  if(arguments.length === 2) {\n    variable.value = value;\n  }\n\n  return variable.value;\n};\n\nVariableManager.prototype.isDirty = function(name) {\n  var variable = this.variable(name);\n  if(this.isJsonVariable(name)) {\n    return variable.originalValue !== JSON.stringify(variable.value);\n  } else {\n    return variable.originalValue !== variable.value || variable.type === \"Object\";\n  }\n};\n\nVariableManager.prototype.isJsonVariable = function(name) {\n  var variable = this.variable(name);\n  var type = variable.type;\n\n  var supportedTypes = [ 'Object', 'json', 'Json' ];\n  var idx = supportedTypes.indexOf(type);\n\n  if (idx === 0) {\n    return variable.valueInfo.serializationDataFormat.indexOf('application/json') !== -1;\n  }\n\n  return idx !== -1;\n};\n\nVariableManager.prototype.variableNames = function() {\n  // since we support IE 8+ (http://kangax.github.io/compat-table/es5/)\n  return Object.keys(this.variables);\n};\n\nmodule.exports = VariableManager;\n\n\n},{\"./type-util\":31}],33:[function(_dereq_,module,exports){\n'use strict';\n\n\n/**\n * @exports CamSDK.utils\n */\nvar utils = module.exports = {\"typeUtils\" : _dereq_('./forms/type-util')};\n\nutils.solveHALEmbedded = function(results) {\n\n  function isId(str) {\n    if (str.slice(-2) !== 'Id') { return false; }\n\n    var prop = str.slice(0, -2);\n    var embedded = results._embedded;\n    return !!(embedded[prop] && !!embedded[prop].length);\n  }\n\n  function keys(obj) {\n    var arr = Object.keys(obj);\n\n    for (var a in arr) {\n      if (arr[a][0] === '_' || !isId(arr[a])) {\n        arr.splice(a, 1);\n      }\n    }\n\n    return arr;\n  }\n\n  var _embeddedRessources = Object.keys(results._embedded || {});\n  for (var r in _embeddedRessources) {\n    var name = _embeddedRessources[r];\n\n    for (var i in results._embedded[name]) {\n      results._embedded[name][i]._embedded = results._embedded[name][i]._embedded || {};\n\n      var properties = keys(results._embedded[name][i]);\n\n      for (var p in properties) {\n        var prop = properties[p];\n        if (results._embedded[name][i][prop]) {\n          var embedded = results._embedded[prop.slice(0, -2)];\n          for (var e in embedded) {\n            if (embedded[e].id === results._embedded[name][i][prop]) {\n              results._embedded[name][i]._embedded[prop.slice(0, -2)] = [embedded[e]];\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return results;\n};\n\n\n// the 2 folowing functions were borrowed from async.js\n// https://github.com/caolan/async/blob/master/lib/async.js\n\nfunction _eachSeries(arr, iterator, callback) {\n  callback = callback || function () {};\n  if (!arr.length) {\n    return callback();\n  }\n  var completed = 0;\n  var iterate = function () {\n    iterator(arr[completed], function (err) {\n      if (err) {\n        callback(err);\n        callback = function () {};\n      }\n      else {\n        completed += 1;\n        if (completed >= arr.length) {\n          callback();\n        }\n        else {\n          iterate();\n        }\n      }\n    });\n  };\n  iterate();\n}\n\n/**\n * Executes functions in serie\n *\n * @param  {(Object.<String, Function>|Array.<Function>)} tasks object or array of functions\n *                                                              taking a callback\n *\n * @param  {Function} callback                                  executed at the end, first argument\n *                                                              will be an error (if error occured),\n *                                                              the second depends on \"tasks\" type\n *\n * @example\n * CamSDK.utils.series({\n *   a: function(cb) { setTimeout(function() { cb(null, 1); }, 1); },\n *   b: function(cb) { setTimeout(function() { cb(new Error('Bang!')); }, 1); },\n *   c: function(cb) { setTimeout(function() { cb(null, 3); }, 1); }\n * }, function(err, result) {\n *   // err will be passed\n *   // result will be { a: 1, b: undefined }\n * });\n */\nutils.series = function(tasks, callback) {\n  callback = callback || function () {};\n\n  var results = {};\n  _eachSeries(Object.keys(tasks), function (k, callback) {\n    tasks[k](function (err) {\n      var args = Array.prototype.slice.call(arguments, 1);\n      if (args.length <= 1) {\n        args = args[0];\n      }\n      results[k] = args;\n      callback(err);\n    });\n  }, function (err) {\n    callback(err, results);\n  });\n};\n\n},{\"./forms/type-util\":31}],34:[function(_dereq_,module,exports){\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n\nvar base64 = _dereq_('base64-js')\nvar ieee754 = _dereq_('ieee754')\nvar isArray = _dereq_('is-array')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = Buffer\nexports.INSPECT_MAX_BYTES = 50\nBuffer.poolSize = 8192 // not used by this implementation\n\nvar kMaxLength = 0x3fffffff\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Note:\n *\n * - Implementation must support adding new properties to `Uint8Array` instances.\n *   Firefox 4-29 lacked support, fixed in Firefox 30+.\n *   See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *  - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *  - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *    incorrect length in some situations.\n *\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they will\n * get the Object implementation, which is slower but will work correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = (function () {\n  try {\n    var buf = new ArrayBuffer(0)\n    var arr = new Uint8Array(buf)\n    arr.foo = function () { return 42 }\n    return 42 === arr.foo() && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        new Uint8Array(1).subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n})()\n\n/**\n * Class: Buffer\n * =============\n *\n * The Buffer constructor returns instances of `Uint8Array` that are augmented\n * with function properties for all the node `Buffer` API functions. We use\n * `Uint8Array` so that square bracket notation works as expected -- it returns\n * a single octet.\n *\n * By augmenting the instances, we can avoid modifying the `Uint8Array`\n * prototype.\n */\nfunction Buffer (subject, encoding, noZero) {\n  if (!(this instanceof Buffer))\n    return new Buffer(subject, encoding, noZero)\n\n  var type = typeof subject\n\n  // Find the length\n  var length\n  if (type === 'number')\n    length = subject > 0 ? subject >>> 0 : 0\n  else if (type === 'string') {\n    if (encoding === 'base64')\n      subject = base64clean(subject)\n    length = Buffer.byteLength(subject, encoding)\n  } else if (type === 'object' && subject !== null) { // assume object is array-like\n    if (subject.type === 'Buffer' && isArray(subject.data))\n      subject = subject.data\n    length = +subject.length > 0 ? Math.floor(+subject.length) : 0\n  } else\n    throw new TypeError('must start with number, buffer, array or string')\n\n  if (this.length > kMaxLength)\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n      'size: 0x' + kMaxLength.toString(16) + ' bytes')\n\n  var buf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Preferred: Return an augmented `Uint8Array` instance for best performance\n    buf = Buffer._augment(new Uint8Array(length))\n  } else {\n    // Fallback: Return THIS instance of Buffer (created by `new`)\n    buf = this\n    buf.length = length\n    buf._isBuffer = true\n  }\n\n  var i\n  if (Buffer.TYPED_ARRAY_SUPPORT && typeof subject.byteLength === 'number') {\n    // Speed optimization -- use set if we're copying from a typed array\n    buf._set(subject)\n  } else if (isArrayish(subject)) {\n    // Treat array-ish objects as a byte array\n    if (Buffer.isBuffer(subject)) {\n      for (i = 0; i < length; i++)\n        buf[i] = subject.readUInt8(i)\n    } else {\n      for (i = 0; i < length; i++)\n        buf[i] = ((subject[i] % 256) + 256) % 256\n    }\n  } else if (type === 'string') {\n    buf.write(subject, 0, encoding)\n  } else if (type === 'number' && !Buffer.TYPED_ARRAY_SUPPORT && !noZero) {\n    for (i = 0; i < length; i++) {\n      buf[i] = 0\n    }\n  }\n\n  return buf\n}\n\nBuffer.isBuffer = function (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b))\n    throw new TypeError('Arguments must be Buffers')\n\n  var x = a.length\n  var y = b.length\n  for (var i = 0, len = Math.min(x, y); i < len && a[i] === b[i]; i++) {}\n  if (i !== len) {\n    x = a[i]\n    y = b[i]\n  }\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'binary':\n    case 'base64':\n    case 'raw':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function (list, totalLength) {\n  if (!isArray(list)) throw new TypeError('Usage: Buffer.concat(list[, length])')\n\n  if (list.length === 0) {\n    return new Buffer(0)\n  } else if (list.length === 1) {\n    return list[0]\n  }\n\n  var i\n  if (totalLength === undefined) {\n    totalLength = 0\n    for (i = 0; i < list.length; i++) {\n      totalLength += list[i].length\n    }\n  }\n\n  var buf = new Buffer(totalLength)\n  var pos = 0\n  for (i = 0; i < list.length; i++) {\n    var item = list[i]\n    item.copy(buf, pos)\n    pos += item.length\n  }\n  return buf\n}\n\nBuffer.byteLength = function (str, encoding) {\n  var ret\n  str = str + ''\n  switch (encoding || 'utf8') {\n    case 'ascii':\n    case 'binary':\n    case 'raw':\n      ret = str.length\n      break\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      ret = str.length * 2\n      break\n    case 'hex':\n      ret = str.length >>> 1\n      break\n    case 'utf8':\n    case 'utf-8':\n      ret = utf8ToBytes(str).length\n      break\n    case 'base64':\n      ret = base64ToBytes(str).length\n      break\n    default:\n      ret = str.length\n  }\n  return ret\n}\n\n// pre-set for values that may exist in the future\nBuffer.prototype.length = undefined\nBuffer.prototype.parent = undefined\n\n// toString(encoding, start=0, end=buffer.length)\nBuffer.prototype.toString = function (encoding, start, end) {\n  var loweredCase = false\n\n  start = start >>> 0\n  end = end === undefined || end === Infinity ? this.length : end >>> 0\n\n  if (!encoding) encoding = 'utf8'\n  if (start < 0) start = 0\n  if (end > this.length) end = this.length\n  if (end <= start) return ''\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'binary':\n        return binarySlice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase)\n          throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.equals = function (b) {\n  if(!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max)\n      str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  return Buffer.compare(this, b)\n}\n\n// `get` will be removed in Node 0.13+\nBuffer.prototype.get = function (offset) {\n  console.log('.get() is deprecated. Access using array indexes instead.')\n  return this.readUInt8(offset)\n}\n\n// `set` will be removed in Node 0.13+\nBuffer.prototype.set = function (v, offset) {\n  console.log('.set() is deprecated. Access using array indexes instead.')\n  return this.writeUInt8(v, offset)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new Error('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; i++) {\n    var byte = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(byte)) throw new Error('Invalid hex string')\n    buf[offset + i] = byte\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  var charsWritten = blitBuffer(utf8ToBytes(string), buf, offset, length)\n  return charsWritten\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  var charsWritten = blitBuffer(asciiToBytes(string), buf, offset, length)\n  return charsWritten\n}\n\nfunction binaryWrite (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  var charsWritten = blitBuffer(base64ToBytes(string), buf, offset, length)\n  return charsWritten\n}\n\nfunction utf16leWrite (buf, string, offset, length) {\n  var charsWritten = blitBuffer(utf16leToBytes(string), buf, offset, length, 2)\n  return charsWritten\n}\n\nBuffer.prototype.write = function (string, offset, length, encoding) {\n  // Support both (string, offset, length, encoding)\n  // and the legacy (string, encoding, offset, length)\n  if (isFinite(offset)) {\n    if (!isFinite(length)) {\n      encoding = length\n      length = undefined\n    }\n  } else {  // legacy\n    var swap = encoding\n    encoding = offset\n    offset = length\n    length = swap\n  }\n\n  offset = Number(offset) || 0\n  var remaining = this.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n  encoding = String(encoding || 'utf8').toLowerCase()\n\n  var ret\n  switch (encoding) {\n    case 'hex':\n      ret = hexWrite(this, string, offset, length)\n      break\n    case 'utf8':\n    case 'utf-8':\n      ret = utf8Write(this, string, offset, length)\n      break\n    case 'ascii':\n      ret = asciiWrite(this, string, offset, length)\n      break\n    case 'binary':\n      ret = binaryWrite(this, string, offset, length)\n      break\n    case 'base64':\n      ret = base64Write(this, string, offset, length)\n      break\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      ret = utf16leWrite(this, string, offset, length)\n      break\n    default:\n      throw new TypeError('Unknown encoding: ' + encoding)\n  }\n  return ret\n}\n\nBuffer.prototype.toJSON = function () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  var res = ''\n  var tmp = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; i++) {\n    if (buf[i] <= 0x7F) {\n      res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i])\n      tmp = ''\n    } else {\n      tmp += '%' + buf[i].toString(16)\n    }\n  }\n\n  return res + decodeUtf8Char(tmp)\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; i++) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction binarySlice (buf, start, end) {\n  return asciiSlice(buf, start, end)\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; i++) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len;\n    if (start < 0)\n      start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0)\n      end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start)\n    end = start\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    return Buffer._augment(this.subarray(start, end))\n  } else {\n    var sliceLen = end - start\n    var newBuf = new Buffer(sliceLen, undefined, true)\n    for (var i = 0; i < sliceLen; i++) {\n      newBuf[i] = this[i + start]\n    }\n    return newBuf\n  }\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0)\n    throw new RangeError('offset is not uint')\n  if (offset + ext > length)\n    throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUInt8 = function (offset, noAssert) {\n  if (!noAssert)\n    checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function (offset, noAssert) {\n  if (!noAssert)\n    checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function (offset, noAssert) {\n  if (!noAssert)\n    checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function (offset, noAssert) {\n  if (!noAssert)\n    checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function (offset, noAssert) {\n  if (!noAssert)\n    checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n      ((this[offset + 1] << 16) |\n      (this[offset + 2] << 8) |\n      this[offset + 3])\n}\n\nBuffer.prototype.readInt8 = function (offset, noAssert) {\n  if (!noAssert)\n    checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80))\n    return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function (offset, noAssert) {\n  if (!noAssert)\n    checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function (offset, noAssert) {\n  if (!noAssert)\n    checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function (offset, noAssert) {\n  if (!noAssert)\n    checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16) |\n      (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function (offset, noAssert) {\n  if (!noAssert)\n    checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n      (this[offset + 1] << 16) |\n      (this[offset + 2] << 8) |\n      (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function (offset, noAssert) {\n  if (!noAssert)\n    checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function (offset, noAssert) {\n  if (!noAssert)\n    checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function (offset, noAssert) {\n  if (!noAssert)\n    checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function (offset, noAssert) {\n  if (!noAssert)\n    checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')\n  if (value > max || value < min) throw new TypeError('value is out of bounds')\n  if (offset + ext > buf.length) throw new TypeError('index out of range')\n}\n\nBuffer.prototype.writeUInt8 = function (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert)\n    checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = value\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert)\n    checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value\n    this[offset + 1] = (value >>> 8)\n  } else objectWriteUInt16(this, value, offset, true)\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert)\n    checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = value\n  } else objectWriteUInt16(this, value, offset, false)\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert)\n    checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = value\n  } else objectWriteUInt32(this, value, offset, true)\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert)\n    checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = value\n  } else objectWriteUInt32(this, value, offset, false)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt8 = function (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert)\n    checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = value\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert)\n    checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value\n    this[offset + 1] = (value >>> 8)\n  } else objectWriteUInt16(this, value, offset, true)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert)\n    checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = value\n  } else objectWriteUInt16(this, value, offset, false)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert)\n    checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else objectWriteUInt32(this, value, offset, true)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert)\n    checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = value\n  } else objectWriteUInt32(this, value, offset, false)\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (value > max || value < min) throw new TypeError('value is out of bounds')\n  if (offset + ext > buf.length) throw new TypeError('index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert)\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert)\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function (target, target_start, start, end) {\n  var source = this\n\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (!target_start) target_start = 0\n\n  // Copy 0 bytes; we're done\n  if (end === start) return\n  if (target.length === 0 || source.length === 0) return\n\n  // Fatal error conditions\n  if (end < start) throw new TypeError('sourceEnd < sourceStart')\n  if (target_start < 0 || target_start >= target.length)\n    throw new TypeError('targetStart out of bounds')\n  if (start < 0 || start >= source.length) throw new TypeError('sourceStart out of bounds')\n  if (end < 0 || end > source.length) throw new TypeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length)\n    end = this.length\n  if (target.length - target_start < end - start)\n    end = target.length - target_start + start\n\n  var len = end - start\n\n  if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < len; i++) {\n      target[i + target_start] = this[i + start]\n    }\n  } else {\n    target._set(this.subarray(start, start + len), target_start)\n  }\n}\n\n// fill(value, start=0, end=buffer.length)\nBuffer.prototype.fill = function (value, start, end) {\n  if (!value) value = 0\n  if (!start) start = 0\n  if (!end) end = this.length\n\n  if (end < start) throw new TypeError('end < start')\n\n  // Fill 0 bytes; we're done\n  if (end === start) return\n  if (this.length === 0) return\n\n  if (start < 0 || start >= this.length) throw new TypeError('start out of bounds')\n  if (end < 0 || end > this.length) throw new TypeError('end out of bounds')\n\n  var i\n  if (typeof value === 'number') {\n    for (i = start; i < end; i++) {\n      this[i] = value\n    }\n  } else {\n    var bytes = utf8ToBytes(value.toString())\n    var len = bytes.length\n    for (i = start; i < end; i++) {\n      this[i] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n/**\n * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.\n * Added in Node 0.12. Only available in browsers that support ArrayBuffer.\n */\nBuffer.prototype.toArrayBuffer = function () {\n  if (typeof Uint8Array !== 'undefined') {\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\n      return (new Buffer(this)).buffer\n    } else {\n      var buf = new Uint8Array(this.length)\n      for (var i = 0, len = buf.length; i < len; i += 1) {\n        buf[i] = this[i]\n      }\n      return buf.buffer\n    }\n  } else {\n    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')\n  }\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar BP = Buffer.prototype\n\n/**\n * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods\n */\nBuffer._augment = function (arr) {\n  arr.constructor = Buffer\n  arr._isBuffer = true\n\n  // save reference to original Uint8Array get/set methods before overwriting\n  arr._get = arr.get\n  arr._set = arr.set\n\n  // deprecated, will be removed in node 0.13+\n  arr.get = BP.get\n  arr.set = BP.set\n\n  arr.write = BP.write\n  arr.toString = BP.toString\n  arr.toLocaleString = BP.toString\n  arr.toJSON = BP.toJSON\n  arr.equals = BP.equals\n  arr.compare = BP.compare\n  arr.copy = BP.copy\n  arr.slice = BP.slice\n  arr.readUInt8 = BP.readUInt8\n  arr.readUInt16LE = BP.readUInt16LE\n  arr.readUInt16BE = BP.readUInt16BE\n  arr.readUInt32LE = BP.readUInt32LE\n  arr.readUInt32BE = BP.readUInt32BE\n  arr.readInt8 = BP.readInt8\n  arr.readInt16LE = BP.readInt16LE\n  arr.readInt16BE = BP.readInt16BE\n  arr.readInt32LE = BP.readInt32LE\n  arr.readInt32BE = BP.readInt32BE\n  arr.readFloatLE = BP.readFloatLE\n  arr.readFloatBE = BP.readFloatBE\n  arr.readDoubleLE = BP.readDoubleLE\n  arr.readDoubleBE = BP.readDoubleBE\n  arr.writeUInt8 = BP.writeUInt8\n  arr.writeUInt16LE = BP.writeUInt16LE\n  arr.writeUInt16BE = BP.writeUInt16BE\n  arr.writeUInt32LE = BP.writeUInt32LE\n  arr.writeUInt32BE = BP.writeUInt32BE\n  arr.writeInt8 = BP.writeInt8\n  arr.writeInt16LE = BP.writeInt16LE\n  arr.writeInt16BE = BP.writeInt16BE\n  arr.writeInt32LE = BP.writeInt32LE\n  arr.writeInt32BE = BP.writeInt32BE\n  arr.writeFloatLE = BP.writeFloatLE\n  arr.writeFloatBE = BP.writeFloatBE\n  arr.writeDoubleLE = BP.writeDoubleLE\n  arr.writeDoubleBE = BP.writeDoubleBE\n  arr.fill = BP.fill\n  arr.inspect = BP.inspect\n  arr.toArrayBuffer = BP.toArrayBuffer\n\n  return arr\n}\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-z]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction isArrayish (subject) {\n  return isArray(subject) || Buffer.isBuffer(subject) ||\n      subject && typeof subject === 'object' &&\n      typeof subject.length === 'number'\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; i++) {\n    var b = str.charCodeAt(i)\n    if (b <= 0x7F) {\n      byteArray.push(b)\n    } else {\n      var start = i\n      if (b >= 0xD800 && b <= 0xDFFF) i++\n      var h = encodeURIComponent(str.slice(start, i+1)).substr(1).split('%')\n      for (var j = 0; j < h.length; j++) {\n        byteArray.push(parseInt(h[j], 16))\n      }\n    }\n  }\n  return byteArray\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; i++) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; i++) {\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(str)\n}\n\nfunction blitBuffer (src, dst, offset, length, unitSize) {\n  if (unitSize) length -= length % unitSize;\n  for (var i = 0; i < length; i++) {\n    if ((i + offset >= dst.length) || (i >= src.length))\n      break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction decodeUtf8Char (str) {\n  try {\n    return decodeURIComponent(str)\n  } catch (err) {\n    return String.fromCharCode(0xFFFD) // UTF 8 invalid char\n  }\n}\n\n},{\"base64-js\":35,\"ieee754\":36,\"is-array\":37}],35:[function(_dereq_,module,exports){\nvar lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\n;(function (exports) {\n\t'use strict';\n\n  var Arr = (typeof Uint8Array !== 'undefined')\n    ? Uint8Array\n    : Array\n\n\tvar PLUS   = '+'.charCodeAt(0)\n\tvar SLASH  = '/'.charCodeAt(0)\n\tvar NUMBER = '0'.charCodeAt(0)\n\tvar LOWER  = 'a'.charCodeAt(0)\n\tvar UPPER  = 'A'.charCodeAt(0)\n\n\tfunction decode (elt) {\n\t\tvar code = elt.charCodeAt(0)\n\t\tif (code === PLUS)\n\t\t\treturn 62 // '+'\n\t\tif (code === SLASH)\n\t\t\treturn 63 // '/'\n\t\tif (code < NUMBER)\n\t\t\treturn -1 //no match\n\t\tif (code < NUMBER + 10)\n\t\t\treturn code - NUMBER + 26 + 26\n\t\tif (code < UPPER + 26)\n\t\t\treturn code - UPPER\n\t\tif (code < LOWER + 26)\n\t\t\treturn code - LOWER + 26\n\t}\n\n\tfunction b64ToByteArray (b64) {\n\t\tvar i, j, l, tmp, placeHolders, arr\n\n\t\tif (b64.length % 4 > 0) {\n\t\t\tthrow new Error('Invalid string. Length must be a multiple of 4')\n\t\t}\n\n\t\t// the number of equal signs (place holders)\n\t\t// if there are two placeholders, than the two characters before it\n\t\t// represent one byte\n\t\t// if there is only one, then the three characters before it represent 2 bytes\n\t\t// this is just a cheap hack to not do indexOf twice\n\t\tvar len = b64.length\n\t\tplaceHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0\n\n\t\t// base64 is 4/3 + up to two characters of the original data\n\t\tarr = new Arr(b64.length * 3 / 4 - placeHolders)\n\n\t\t// if there are placeholders, only get up to the last complete 4 chars\n\t\tl = placeHolders > 0 ? b64.length - 4 : b64.length\n\n\t\tvar L = 0\n\n\t\tfunction push (v) {\n\t\t\tarr[L++] = v\n\t\t}\n\n\t\tfor (i = 0, j = 0; i < l; i += 4, j += 3) {\n\t\t\ttmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))\n\t\t\tpush((tmp & 0xFF0000) >> 16)\n\t\t\tpush((tmp & 0xFF00) >> 8)\n\t\t\tpush(tmp & 0xFF)\n\t\t}\n\n\t\tif (placeHolders === 2) {\n\t\t\ttmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)\n\t\t\tpush(tmp & 0xFF)\n\t\t} else if (placeHolders === 1) {\n\t\t\ttmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)\n\t\t\tpush((tmp >> 8) & 0xFF)\n\t\t\tpush(tmp & 0xFF)\n\t\t}\n\n\t\treturn arr\n\t}\n\n\tfunction uint8ToBase64 (uint8) {\n\t\tvar i,\n\t\t\textraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes\n\t\t\toutput = \"\",\n\t\t\ttemp, length\n\n\t\tfunction encode (num) {\n\t\t\treturn lookup.charAt(num)\n\t\t}\n\n\t\tfunction tripletToBase64 (num) {\n\t\t\treturn encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)\n\t\t}\n\n\t\t// go through the array every three bytes, we'll deal with trailing stuff later\n\t\tfor (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {\n\t\t\ttemp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n\t\t\toutput += tripletToBase64(temp)\n\t\t}\n\n\t\t// pad the end with zeros, but make sure to not forget the extra bytes\n\t\tswitch (extraBytes) {\n\t\t\tcase 1:\n\t\t\t\ttemp = uint8[uint8.length - 1]\n\t\t\t\toutput += encode(temp >> 2)\n\t\t\t\toutput += encode((temp << 4) & 0x3F)\n\t\t\t\toutput += '=='\n\t\t\t\tbreak\n\t\t\tcase 2:\n\t\t\t\ttemp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])\n\t\t\t\toutput += encode(temp >> 10)\n\t\t\t\toutput += encode((temp >> 4) & 0x3F)\n\t\t\t\toutput += encode((temp << 2) & 0x3F)\n\t\t\t\toutput += '='\n\t\t\t\tbreak\n\t\t}\n\n\t\treturn output\n\t}\n\n\texports.toByteArray = b64ToByteArray\n\texports.fromByteArray = uint8ToBase64\n}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))\n\n},{}],36:[function(_dereq_,module,exports){\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m,\n      eLen = nBytes * 8 - mLen - 1,\n      eMax = (1 << eLen) - 1,\n      eBias = eMax >> 1,\n      nBits = -7,\n      i = isLE ? (nBytes - 1) : 0,\n      d = isLE ? -1 : 1,\n      s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c,\n      eLen = nBytes * 8 - mLen - 1,\n      eMax = (1 << eLen) - 1,\n      eBias = eMax >> 1,\n      rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0),\n      i = isLE ? 0 : (nBytes - 1),\n      d = isLE ? 1 : -1,\n      s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n},{}],37:[function(_dereq_,module,exports){\n\n/**\n * isArray\n */\n\nvar isArray = Array.isArray;\n\n/**\n * toString\n */\n\nvar str = Object.prototype.toString;\n\n/**\n * Whether or not the given `val`\n * is an array.\n *\n * example:\n *\n *        isArray([]);\n *        // > true\n *        isArray(arguments);\n *        // > false\n *        isArray('');\n *        // > false\n *\n * @param {mixed} val\n * @return {bool}\n */\n\nmodule.exports = isArray || function (val) {\n  return !! val && '[object Array]' == str.call(val);\n};\n\n},{}],38:[function(_dereq_,module,exports){\n/**\n * Module dependencies.\n */\n\nvar Emitter = _dereq_('emitter');\nvar reduce = _dereq_('reduce');\n\n/**\n * Root reference for iframes.\n */\n\nvar root = 'undefined' == typeof window\n  ? this\n  : window;\n\n/**\n * Noop.\n */\n\nfunction noop(){};\n\n/**\n * Check if `obj` is a host object,\n * we don't want to serialize these :)\n *\n * TODO: future proof, move to compoent land\n *\n * @param {Object} obj\n * @return {Boolean}\n * @api private\n */\n\nfunction isHost(obj) {\n  var str = {}.toString.call(obj);\n\n  switch (str) {\n    case '[object File]':\n    case '[object Blob]':\n    case '[object FormData]':\n      return true;\n    default:\n      return false;\n  }\n}\n\n/**\n * Determine XHR.\n */\n\nfunction getXHR() {\n  if (root.XMLHttpRequest\n    && ('file:' != root.location.protocol || !root.ActiveXObject)) {\n    return new XMLHttpRequest;\n  } else {\n    try { return new ActiveXObject('Microsoft.XMLHTTP'); } catch(e) {}\n    try { return new ActiveXObject('Msxml2.XMLHTTP.6.0'); } catch(e) {}\n    try { return new ActiveXObject('Msxml2.XMLHTTP.3.0'); } catch(e) {}\n    try { return new ActiveXObject('Msxml2.XMLHTTP'); } catch(e) {}\n  }\n  return false;\n}\n\n/**\n * Removes leading and trailing whitespace, added to support IE.\n *\n * @param {String} s\n * @return {String}\n * @api private\n */\n\nvar trim = ''.trim\n  ? function(s) { return s.trim(); }\n  : function(s) { return s.replace(/(^\\s*|\\s*$)/g, ''); };\n\n/**\n * Check if `obj` is an object.\n *\n * @param {Object} obj\n * @return {Boolean}\n * @api private\n */\n\nfunction isObject(obj) {\n  return obj === Object(obj);\n}\n\n/**\n * Serialize the given `obj`.\n *\n * @param {Object} obj\n * @return {String}\n * @api private\n */\n\nfunction serialize(obj) {\n  if (!isObject(obj)) return obj;\n  var pairs = [];\n  for (var key in obj) {\n    if (null != obj[key]) {\n      pairs.push(encodeURIComponent(key)\n        + '=' + encodeURIComponent(obj[key]));\n    }\n  }\n  return pairs.join('&');\n}\n\n/**\n * Expose serialization method.\n */\n\n request.serializeObject = serialize;\n\n /**\n  * Parse the given x-www-form-urlencoded `str`.\n  *\n  * @param {String} str\n  * @return {Object}\n  * @api private\n  */\n\nfunction parseString(str) {\n  var obj = {};\n  var pairs = str.split('&');\n  var parts;\n  var pair;\n\n  for (var i = 0, len = pairs.length; i < len; ++i) {\n    pair = pairs[i];\n    parts = pair.split('=');\n    obj[decodeURIComponent(parts[0])] = decodeURIComponent(parts[1]);\n  }\n\n  return obj;\n}\n\n/**\n * Expose parser.\n */\n\nrequest.parseString = parseString;\n\n/**\n * Default MIME type map.\n *\n *     superagent.types.xml = 'application/xml';\n *\n */\n\nrequest.types = {\n  html: 'text/html',\n  json: 'application/json',\n  xml: 'application/xml',\n  urlencoded: 'application/x-www-form-urlencoded',\n  'form': 'application/x-www-form-urlencoded',\n  'form-data': 'application/x-www-form-urlencoded'\n};\n\n/**\n * Default serialization map.\n *\n *     superagent.serialize['application/xml'] = function(obj){\n *       return 'generated xml here';\n *     };\n *\n */\n\n request.serialize = {\n   'application/x-www-form-urlencoded': serialize,\n   'application/json': JSON.stringify\n };\n\n /**\n  * Default parsers.\n  *\n  *     superagent.parse['application/xml'] = function(str){\n  *       return { object parsed from str };\n  *     };\n  *\n  */\n\nrequest.parse = {\n  'application/x-www-form-urlencoded': parseString,\n  'application/json': JSON.parse\n};\n\n/**\n * Parse the given header `str` into\n * an object containing the mapped fields.\n *\n * @param {String} str\n * @return {Object}\n * @api private\n */\n\nfunction parseHeader(str) {\n  var lines = str.split(/\\r?\\n/);\n  var fields = {};\n  var index;\n  var line;\n  var field;\n  var val;\n\n  lines.pop(); // trailing CRLF\n\n  for (var i = 0, len = lines.length; i < len; ++i) {\n    line = lines[i];\n    index = line.indexOf(':');\n    field = line.slice(0, index).toLowerCase();\n    val = trim(line.slice(index + 1));\n    fields[field] = val;\n  }\n\n  return fields;\n}\n\n/**\n * Return the mime type for the given `str`.\n *\n * @param {String} str\n * @return {String}\n * @api private\n */\n\nfunction type(str){\n  return str.split(/ *; */).shift();\n};\n\n/**\n * Return header field parameters.\n *\n * @param {String} str\n * @return {Object}\n * @api private\n */\n\nfunction params(str){\n  return reduce(str.split(/ *; */), function(obj, str){\n    var parts = str.split(/ *= */)\n      , key = parts.shift()\n      , val = parts.shift();\n\n    if (key && val) obj[key] = val;\n    return obj;\n  }, {});\n};\n\n/**\n * Initialize a new `Response` with the given `xhr`.\n *\n *  - set flags (.ok, .error, etc)\n *  - parse header\n *\n * Examples:\n *\n *  Aliasing `superagent` as `request` is nice:\n *\n *      request = superagent;\n *\n *  We can use the promise-like API, or pass callbacks:\n *\n *      request.get('/').end(function(res){});\n *      request.get('/', function(res){});\n *\n *  Sending data can be chained:\n *\n *      request\n *        .post('/user')\n *        .send({ name: 'tj' })\n *        .end(function(res){});\n *\n *  Or passed to `.send()`:\n *\n *      request\n *        .post('/user')\n *        .send({ name: 'tj' }, function(res){});\n *\n *  Or passed to `.post()`:\n *\n *      request\n *        .post('/user', { name: 'tj' })\n *        .end(function(res){});\n *\n * Or further reduced to a single call for simple cases:\n *\n *      request\n *        .post('/user', { name: 'tj' }, function(res){});\n *\n * @param {XMLHTTPRequest} xhr\n * @param {Object} options\n * @api private\n */\n\nfunction Response(req, options) {\n  options = options || {};\n  this.req = req;\n  this.xhr = this.req.xhr;\n  this.text = this.req.method !='HEAD' \n     ? this.xhr.responseText \n     : null;\n  this.setStatusProperties(this.xhr.status);\n  this.header = this.headers = parseHeader(this.xhr.getAllResponseHeaders());\n  // getAllResponseHeaders sometimes falsely returns \"\" for CORS requests, but\n  // getResponseHeader still works. so we get content-type even if getting\n  // other headers fails.\n  this.header['content-type'] = this.xhr.getResponseHeader('content-type');\n  this.setHeaderProperties(this.header);\n  this.body = this.req.method != 'HEAD'\n    ? this.parseBody(this.text)\n    : null;\n}\n\n/**\n * Get case-insensitive `field` value.\n *\n * @param {String} field\n * @return {String}\n * @api public\n */\n\nResponse.prototype.get = function(field){\n  return this.header[field.toLowerCase()];\n};\n\n/**\n * Set header related properties:\n *\n *   - `.type` the content type without params\n *\n * A response of \"Content-Type: text/plain; charset=utf-8\"\n * will provide you with a `.type` of \"text/plain\".\n *\n * @param {Object} header\n * @api private\n */\n\nResponse.prototype.setHeaderProperties = function(header){\n  // content-type\n  var ct = this.header['content-type'] || '';\n  this.type = type(ct);\n\n  // params\n  var obj = params(ct);\n  for (var key in obj) this[key] = obj[key];\n};\n\n/**\n * Parse the given body `str`.\n *\n * Used for auto-parsing of bodies. Parsers\n * are defined on the `superagent.parse` object.\n *\n * @param {String} str\n * @return {Mixed}\n * @api private\n */\n\nResponse.prototype.parseBody = function(str){\n  var parse = request.parse[this.type];\n  return parse && str && str.length\n    ? parse(str)\n    : null;\n};\n\n/**\n * Set flags such as `.ok` based on `status`.\n *\n * For example a 2xx response will give you a `.ok` of __true__\n * whereas 5xx will be __false__ and `.error` will be __true__. The\n * `.clientError` and `.serverError` are also available to be more\n * specific, and `.statusType` is the class of error ranging from 1..5\n * sometimes useful for mapping respond colors etc.\n *\n * \"sugar\" properties are also defined for common cases. Currently providing:\n *\n *   - .noContent\n *   - .badRequest\n *   - .unauthorized\n *   - .notAcceptable\n *   - .notFound\n *\n * @param {Number} status\n * @api private\n */\n\nResponse.prototype.setStatusProperties = function(status){\n  var type = status / 100 | 0;\n\n  // status / class\n  this.status = status;\n  this.statusType = type;\n\n  // basics\n  this.info = 1 == type;\n  this.ok = 2 == type;\n  this.clientError = 4 == type;\n  this.serverError = 5 == type;\n  this.error = (4 == type || 5 == type)\n    ? this.toError()\n    : false;\n\n  // sugar\n  this.accepted = 202 == status;\n  this.noContent = 204 == status || 1223 == status;\n  this.badRequest = 400 == status;\n  this.unauthorized = 401 == status;\n  this.notAcceptable = 406 == status;\n  this.notFound = 404 == status;\n  this.forbidden = 403 == status;\n};\n\n/**\n * Return an `Error` representative of this response.\n *\n * @return {Error}\n * @api public\n */\n\nResponse.prototype.toError = function(){\n  var req = this.req;\n  var method = req.method;\n  var url = req.url;\n\n  var msg = 'cannot ' + method + ' ' + url + ' (' + this.status + ')';\n  var err = new Error(msg);\n  err.status = this.status;\n  err.method = method;\n  err.url = url;\n\n  return err;\n};\n\n/**\n * Expose `Response`.\n */\n\nrequest.Response = Response;\n\n/**\n * Initialize a new `Request` with the given `method` and `url`.\n *\n * @param {String} method\n * @param {String} url\n * @api public\n */\n\nfunction Request(method, url) {\n  var self = this;\n  Emitter.call(this);\n  this._query = this._query || [];\n  this.method = method;\n  this.url = url;\n  this.header = {};\n  this._header = {};\n  this.on('end', function(){\n    var err = null;\n    var res = null;\n\n    try {\n      res = new Response(self); \n    } catch(e) {\n      err = new Error('Parser is unable to parse the response');\n      err.parse = true;\n      err.original = e;\n    }\n\n    self.callback(err, res);\n  });\n}\n\n/**\n * Mixin `Emitter`.\n */\n\nEmitter(Request.prototype);\n\n/**\n * Allow for extension\n */\n\nRequest.prototype.use = function(fn) {\n  fn(this);\n  return this;\n}\n\n/**\n * Set timeout to `ms`.\n *\n * @param {Number} ms\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.timeout = function(ms){\n  this._timeout = ms;\n  return this;\n};\n\n/**\n * Clear previous timeout.\n *\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.clearTimeout = function(){\n  this._timeout = 0;\n  clearTimeout(this._timer);\n  return this;\n};\n\n/**\n * Abort the request, and clear potential timeout.\n *\n * @return {Request}\n * @api public\n */\n\nRequest.prototype.abort = function(){\n  if (this.aborted) return;\n  this.aborted = true;\n  this.xhr.abort();\n  this.clearTimeout();\n  this.emit('abort');\n  return this;\n};\n\n/**\n * Set header `field` to `val`, or multiple fields with one object.\n *\n * Examples:\n *\n *      req.get('/')\n *        .set('Accept', 'application/json')\n *        .set('X-API-Key', 'foobar')\n *        .end(callback);\n *\n *      req.get('/')\n *        .set({ Accept: 'application/json', 'X-API-Key': 'foobar' })\n *        .end(callback);\n *\n * @param {String|Object} field\n * @param {String} val\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.set = function(field, val){\n  if (isObject(field)) {\n    for (var key in field) {\n      this.set(key, field[key]);\n    }\n    return this;\n  }\n  this._header[field.toLowerCase()] = val;\n  this.header[field] = val;\n  return this;\n};\n\n/**\n * Remove header `field`.\n *\n * Example:\n *\n *      req.get('/')\n *        .unset('User-Agent')\n *        .end(callback);\n *\n * @param {String} field\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.unset = function(field){\n  delete this._header[field.toLowerCase()];\n  delete this.header[field];\n  return this;\n};\n\n/**\n * Get case-insensitive header `field` value.\n *\n * @param {String} field\n * @return {String}\n * @api private\n */\n\nRequest.prototype.getHeader = function(field){\n  return this._header[field.toLowerCase()];\n};\n\n/**\n * Set Content-Type to `type`, mapping values from `request.types`.\n *\n * Examples:\n *\n *      superagent.types.xml = 'application/xml';\n *\n *      request.post('/')\n *        .type('xml')\n *        .send(xmlstring)\n *        .end(callback);\n *\n *      request.post('/')\n *        .type('application/xml')\n *        .send(xmlstring)\n *        .end(callback);\n *\n * @param {String} type\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.type = function(type){\n  this.set('Content-Type', request.types[type] || type);\n  return this;\n};\n\n/**\n * Set Accept to `type`, mapping values from `request.types`.\n *\n * Examples:\n *\n *      superagent.types.json = 'application/json';\n *\n *      request.get('/agent')\n *        .accept('json')\n *        .end(callback);\n *\n *      request.get('/agent')\n *        .accept('application/json')\n *        .end(callback);\n *\n * @param {String} accept\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.accept = function(type){\n  this.set('Accept', request.types[type] || type);\n  return this;\n};\n\n/**\n * Set Authorization field value with `user` and `pass`.\n *\n * @param {String} user\n * @param {String} pass\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.auth = function(user, pass){\n  var str = btoa(user + ':' + pass);\n  this.set('Authorization', 'Basic ' + str);\n  return this;\n};\n\n/**\n* Add query-string `val`.\n*\n* Examples:\n*\n*   request.get('/shoes')\n*     .query('size=10')\n*     .query({ color: 'blue' })\n*\n* @param {Object|String} val\n* @return {Request} for chaining\n* @api public\n*/\n\nRequest.prototype.query = function(val){\n  if ('string' != typeof val) val = serialize(val);\n  if (val) this._query.push(val);\n  return this;\n};\n\n/**\n * Write the field `name` and `val` for \"multipart/form-data\"\n * request bodies.\n *\n * ``` js\n * request.post('/upload')\n *   .field('foo', 'bar')\n *   .end(callback);\n * ```\n *\n * @param {String} name\n * @param {String|Blob|File} val\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.field = function(name, val){\n  if (!this._formData) this._formData = new FormData();\n  this._formData.append(name, val);\n  return this;\n};\n\n/**\n * Queue the given `file` as an attachment to the specified `field`,\n * with optional `filename`.\n *\n * ``` js\n * request.post('/upload')\n *   .attach(new Blob(['<a id=\"a\"><b id=\"b\">hey!</b></a>'], { type: \"text/html\"}))\n *   .end(callback);\n * ```\n *\n * @param {String} field\n * @param {Blob|File} file\n * @param {String} filename\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.attach = function(field, file, filename){\n  if (!this._formData) this._formData = new FormData();\n  this._formData.append(field, file, filename);\n  return this;\n};\n\n/**\n * Send `data`, defaulting the `.type()` to \"json\" when\n * an object is given.\n *\n * Examples:\n *\n *       // querystring\n *       request.get('/search')\n *         .end(callback)\n *\n *       // multiple data \"writes\"\n *       request.get('/search')\n *         .send({ search: 'query' })\n *         .send({ range: '1..5' })\n *         .send({ order: 'desc' })\n *         .end(callback)\n *\n *       // manual json\n *       request.post('/user')\n *         .type('json')\n *         .send('{\"name\":\"tj\"})\n *         .end(callback)\n *\n *       // auto json\n *       request.post('/user')\n *         .send({ name: 'tj' })\n *         .end(callback)\n *\n *       // manual x-www-form-urlencoded\n *       request.post('/user')\n *         .type('form')\n *         .send('name=tj')\n *         .end(callback)\n *\n *       // auto x-www-form-urlencoded\n *       request.post('/user')\n *         .type('form')\n *         .send({ name: 'tj' })\n *         .end(callback)\n *\n *       // defaults to x-www-form-urlencoded\n  *      request.post('/user')\n  *        .send('name=tobi')\n  *        .send('species=ferret')\n  *        .end(callback)\n *\n * @param {String|Object} data\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.send = function(data){\n  var obj = isObject(data);\n  var type = this.getHeader('Content-Type');\n\n  // merge\n  if (obj && isObject(this._data)) {\n    for (var key in data) {\n      this._data[key] = data[key];\n    }\n  } else if ('string' == typeof data) {\n    if (!type) this.type('form');\n    type = this.getHeader('Content-Type');\n    if ('application/x-www-form-urlencoded' == type) {\n      this._data = this._data\n        ? this._data + '&' + data\n        : data;\n    } else {\n      this._data = (this._data || '') + data;\n    }\n  } else {\n    this._data = data;\n  }\n\n  if (!obj) return this;\n  if (!type) this.type('json');\n  return this;\n};\n\n/**\n * Invoke the callback with `err` and `res`\n * and handle arity check.\n *\n * @param {Error} err\n * @param {Response} res\n * @api private\n */\n\nRequest.prototype.callback = function(err, res){\n  var fn = this._callback;\n  this.clearTimeout();\n  if (2 == fn.length) return fn(err, res);\n  if (err) return this.emit('error', err);\n  fn(res);\n};\n\n/**\n * Invoke callback with x-domain error.\n *\n * @api private\n */\n\nRequest.prototype.crossDomainError = function(){\n  var err = new Error('Origin is not allowed by Access-Control-Allow-Origin');\n  err.crossDomain = true;\n  this.callback(err);\n};\n\n/**\n * Invoke callback with timeout error.\n *\n * @api private\n */\n\nRequest.prototype.timeoutError = function(){\n  var timeout = this._timeout;\n  var err = new Error('timeout of ' + timeout + 'ms exceeded');\n  err.timeout = timeout;\n  this.callback(err);\n};\n\n/**\n * Enable transmission of cookies with x-domain requests.\n *\n * Note that for this to work the origin must not be\n * using \"Access-Control-Allow-Origin\" with a wildcard,\n * and also must set \"Access-Control-Allow-Credentials\"\n * to \"true\".\n *\n * @api public\n */\n\nRequest.prototype.withCredentials = function(){\n  this._withCredentials = true;\n  return this;\n};\n\n/**\n * Initiate request, invoking callback `fn(res)`\n * with an instanceof `Response`.\n *\n * @param {Function} fn\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.end = function(fn){\n  var self = this;\n  var xhr = this.xhr = getXHR();\n  var query = this._query.join('&');\n  var timeout = this._timeout;\n  var data = this._formData || this._data;\n\n  // store callback\n  this._callback = fn || noop;\n\n  // state change\n  xhr.onreadystatechange = function(){\n    if (4 != xhr.readyState) return;\n    if (0 == xhr.status) {\n      if (self.aborted) return self.timeoutError();\n      return self.crossDomainError();\n    }\n    self.emit('end');\n  };\n\n  // progress\n  if (xhr.upload) {\n    xhr.upload.onprogress = function(e){\n      e.percent = e.loaded / e.total * 100;\n      self.emit('progress', e);\n    };\n  }\n\n  // timeout\n  if (timeout && !this._timer) {\n    this._timer = setTimeout(function(){\n      self.abort();\n    }, timeout);\n  }\n\n  // querystring\n  if (query) {\n    query = request.serializeObject(query);\n    this.url += ~this.url.indexOf('?')\n      ? '&' + query\n      : '?' + query;\n  }\n\n  // initiate request\n  xhr.open(this.method, this.url, true);\n\n  // CORS\n  if (this._withCredentials) xhr.withCredentials = true;\n\n  // body\n  if ('GET' != this.method && 'HEAD' != this.method && 'string' != typeof data && !isHost(data)) {\n    // serialize stuff\n    var serialize = request.serialize[this.getHeader('Content-Type')];\n    if (serialize) data = serialize(data);\n  }\n\n  // set header fields\n  for (var field in this.header) {\n    if (null == this.header[field]) continue;\n    xhr.setRequestHeader(field, this.header[field]);\n  }\n\n  // send stuff\n  this.emit('request', this);\n  xhr.send(data);\n  return this;\n};\n\n/**\n * Expose `Request`.\n */\n\nrequest.Request = Request;\n\n/**\n * Issue a request:\n *\n * Examples:\n *\n *    request('GET', '/users').end(callback)\n *    request('/users').end(callback)\n *    request('/users', callback)\n *\n * @param {String} method\n * @param {String|Function} url or callback\n * @return {Request}\n * @api public\n */\n\nfunction request(method, url) {\n  // callback\n  if ('function' == typeof url) {\n    return new Request('GET', method).end(url);\n  }\n\n  // url first\n  if (1 == arguments.length) {\n    return new Request('GET', method);\n  }\n\n  return new Request(method, url);\n}\n\n/**\n * GET `url` with optional callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed|Function} data or fn\n * @param {Function} fn\n * @return {Request}\n * @api public\n */\n\nrequest.get = function(url, data, fn){\n  var req = request('GET', url);\n  if ('function' == typeof data) fn = data, data = null;\n  if (data) req.query(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * HEAD `url` with optional callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed|Function} data or fn\n * @param {Function} fn\n * @return {Request}\n * @api public\n */\n\nrequest.head = function(url, data, fn){\n  var req = request('HEAD', url);\n  if ('function' == typeof data) fn = data, data = null;\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * DELETE `url` with optional callback `fn(res)`.\n *\n * @param {String} url\n * @param {Function} fn\n * @return {Request}\n * @api public\n */\n\nrequest.del = function(url, fn){\n  var req = request('DELETE', url);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * PATCH `url` with optional `data` and callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed} data\n * @param {Function} fn\n * @return {Request}\n * @api public\n */\n\nrequest.patch = function(url, data, fn){\n  var req = request('PATCH', url);\n  if ('function' == typeof data) fn = data, data = null;\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * POST `url` with optional `data` and callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed} data\n * @param {Function} fn\n * @return {Request}\n * @api public\n */\n\nrequest.post = function(url, data, fn){\n  var req = request('POST', url);\n  if ('function' == typeof data) fn = data, data = null;\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * PUT `url` with optional `data` and callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed|Function} data or fn\n * @param {Function} fn\n * @return {Request}\n * @api public\n */\n\nrequest.put = function(url, data, fn){\n  var req = request('PUT', url);\n  if ('function' == typeof data) fn = data, data = null;\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * Expose `request`.\n */\n\nmodule.exports = request;\n\n},{\"emitter\":39,\"reduce\":40}],39:[function(_dereq_,module,exports){\n\n/**\n * Expose `Emitter`.\n */\n\nmodule.exports = Emitter;\n\n/**\n * Initialize a new `Emitter`.\n *\n * @api public\n */\n\nfunction Emitter(obj) {\n  if (obj) return mixin(obj);\n};\n\n/**\n * Mixin the emitter properties.\n *\n * @param {Object} obj\n * @return {Object}\n * @api private\n */\n\nfunction mixin(obj) {\n  for (var key in Emitter.prototype) {\n    obj[key] = Emitter.prototype[key];\n  }\n  return obj;\n}\n\n/**\n * Listen on the given `event` with `fn`.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.on =\nEmitter.prototype.addEventListener = function(event, fn){\n  this._callbacks = this._callbacks || {};\n  (this._callbacks[event] = this._callbacks[event] || [])\n    .push(fn);\n  return this;\n};\n\n/**\n * Adds an `event` listener that will be invoked a single\n * time then automatically removed.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.once = function(event, fn){\n  var self = this;\n  this._callbacks = this._callbacks || {};\n\n  function on() {\n    self.off(event, on);\n    fn.apply(this, arguments);\n  }\n\n  on.fn = fn;\n  this.on(event, on);\n  return this;\n};\n\n/**\n * Remove the given callback for `event` or all\n * registered callbacks.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.off =\nEmitter.prototype.removeListener =\nEmitter.prototype.removeAllListeners =\nEmitter.prototype.removeEventListener = function(event, fn){\n  this._callbacks = this._callbacks || {};\n\n  // all\n  if (0 == arguments.length) {\n    this._callbacks = {};\n    return this;\n  }\n\n  // specific event\n  var callbacks = this._callbacks[event];\n  if (!callbacks) return this;\n\n  // remove all handlers\n  if (1 == arguments.length) {\n    delete this._callbacks[event];\n    return this;\n  }\n\n  // remove specific handler\n  var cb;\n  for (var i = 0; i < callbacks.length; i++) {\n    cb = callbacks[i];\n    if (cb === fn || cb.fn === fn) {\n      callbacks.splice(i, 1);\n      break;\n    }\n  }\n  return this;\n};\n\n/**\n * Emit `event` with the given args.\n *\n * @param {String} event\n * @param {Mixed} ...\n * @return {Emitter}\n */\n\nEmitter.prototype.emit = function(event){\n  this._callbacks = this._callbacks || {};\n  var args = [].slice.call(arguments, 1)\n    , callbacks = this._callbacks[event];\n\n  if (callbacks) {\n    callbacks = callbacks.slice(0);\n    for (var i = 0, len = callbacks.length; i < len; ++i) {\n      callbacks[i].apply(this, args);\n    }\n  }\n\n  return this;\n};\n\n/**\n * Return array of callbacks for `event`.\n *\n * @param {String} event\n * @return {Array}\n * @api public\n */\n\nEmitter.prototype.listeners = function(event){\n  this._callbacks = this._callbacks || {};\n  return this._callbacks[event] || [];\n};\n\n/**\n * Check if this emitter has `event` handlers.\n *\n * @param {String} event\n * @return {Boolean}\n * @api public\n */\n\nEmitter.prototype.hasListeners = function(event){\n  return !! this.listeners(event).length;\n};\n\n},{}],40:[function(_dereq_,module,exports){\n\n/**\n * Reduce `arr` with `fn`.\n *\n * @param {Array} arr\n * @param {Function} fn\n * @param {Mixed} initial\n *\n * TODO: combatible error handling?\n */\n\nmodule.exports = function(arr, fn, initial){  \n  var idx = 0;\n  var len = arr.length;\n  var curr = arguments.length == 3\n    ? initial\n    : arr[idx++];\n\n  while (idx < len) {\n    curr = fn.call(null, curr, arr[idx], ++idx, arr);\n  }\n  \n  return curr;\n};\n},{}]},{},[3])\n(3)\n});\n","/**\n * dataDepend - a toolkit for implementing complex, data heavy AngularJS applications\n *\n * See https://github.com/Nikku/angular-data-depend for details.\n *\n * @version 1.0.0\n * \n * @author Nico Rehwaldt <http://github.com/Nikku>\n * @author Roman Smirnov <https://github.com/romansmirnov>\n * \n * @license (c) 2013 Nico Rehwaldt, MIT\n */\n\n(function(angular) {\n  \n  function createBinding(angular) {\n\n    var module = angular.module('dataDepend', []);\n\n    var isArray = angular.isArray,\n        isFunction = angular.isFunction,\n        isObject = angular.isObject,\n        forEach = angular.forEach,\n        extend = angular.extend;\n\n    function ensureArray(elements) {\n      if (!isArray(elements)) {\n        return [ elements ];\n      } else {\n        return elements;\n      }\n    }\n\n    function toArray(arrayLike) {\n      return Array.prototype.slice.apply(arrayLike);\n    }\n\n    var dataDependFactory = [ '$rootScope', '$injector', '$q', function($rootScope, $injector, $q) {\n\n      function createDataDependFactory(annotate, nextTick) {\n\n        function createProviders(parent) {\n\n          var providers = {};\n\n          function get(key) {\n            var v = providers[key];\n            if (!v) {\n              if (parent) {\n                v = parent.get(key);\n              }\n            }\n\n            return v;\n          }\n\n          function put(key, value) {\n            if (get(key)) {\n              throw new Error('[dataDepend] provider with key ' + key + ' already registered');\n            }\n\n            providers[key] = value;\n          }\n\n          return {\n            local: providers,\n            get: get,\n            put: put\n          };\n        }\n\n        var id = 0;\n\n        function nextId() {\n          return id++;\n        }\n\n        /**\n         * Create a provider using the specified options\n         * \n         * @param {object} options\n         *\n         * @returns {object} the newly created, unregistered provider\n         */\n        function createProvider(options) {\n          \n          options = options || {};\n\n          var produces = options.produces,\n              registry = options.registry,\n              dependencies = options.dependencies || [],\n              factory = options.factory,\n              eager = options.eager || false;\n\n          var parentValues = {},\n              children = [],\n              changed = true,\n              dirty = true,\n              loading = null,\n              data = { $loaded: false };\n\n          // element produced by \n          // the factory\n          var provider = {\n            produces: produces,\n            data: data,\n            get: get,\n            set: set,\n            resolve: resolve,\n            children: children,\n            filter: filter,\n            destroy: destroy,\n            parentChanged: parentChanged\n          };\n\n          allDependenciesDo(function(d) {\n            getProvider(d).children.push(provider);\n          });\n\n          if (eager) {\n            log('resolve async');\n            nextTick(function() {\n              log('resolve');\n              resolve();\n            });\n          }\n\n          if (!factory) {\n            setLoaded(options.value);\n          }\n\n          function setLoaded(newValue) {\n\n            var oldValue = data.value;\n\n            data.$loaded = true;\n            delete data.$error;\n\n            changed = false;\n\n            if (oldValue !== newValue) {\n              data.value = newValue;\n              \n              log('setLoaded', oldValue, ' -> ', newValue);\n\n              notifyParentChanged();\n            }\n          }\n\n          function getTracker(name) {\n            var tracker = parentValues[name];\n            if (!tracker) {\n              parentValues[name] = tracker = {};\n            }\n\n            return tracker;\n          }\n\n          function setLoading() {\n            data.$loaded = false;\n            dirty = false;\n          }\n\n          function getProvider(key) {\n            var provider = registry.get(key);\n            \n            if (!provider) {\n              throw new Error('[dataDepend] No provider for ' + key);\n            }\n\n            return provider;\n          }\n\n          function allChildrenDo(fn) {\n            forEach(children, fn);\n          }\n\n          function allDependenciesDo(fn) {\n            forEach(dependencies, fn);\n          }\n\n          function notifyParentChanged() {\n            allChildrenDo(function(child) {\n              child.parentChanged();\n            });\n          }\n\n          function resolveDependencies() {\n            var promises = [];\n\n            function logValue(d, value) {\n              var tracker = getTracker(d),\n                  oldValue = tracker.value;\n\n              log('resolveDependencies', d, ':', oldValue, '->', value);\n\n              if (oldValue !== value) {\n                log('resolveDependencies', 'changed');\n                \n                tracker.value = value;\n                changed = true;\n              }\n            }\n\n            allDependenciesDo(function(d) {\n              var provider = getProvider(d);\n\n              var promise = provider.resolve().then(function(value) {\n                logValue(d, value);\n                return value;\n              }, function(error) {\n                throw new Error('<' + d + '> <- ' + error.message);\n              });\n\n              promises.push(promise);\n            });\n\n            return $q.all(promises).then(function() {\n\n              var values = [];\n\n              // best effort to receive up-to-date values\n              // return the most current one\n              allDependenciesDo(function(d) {\n                var v = getProvider(d).get();\n\n                logValue(d, v);\n                values.push(v);\n              });\n\n              return values;\n            });\n          }\n\n          function asyncLoad(reload) {\n            setLoading();\n\n            log('asyncLoad: init load');\n\n            var promise = resolveDependencies().then(function(values) {\n\n              log('asyncLoad dependencies resolved', values);\n\n              if (loading !== promise) {\n                log('asyncLoad: skip (new load request)');\n                return loading;\n              }\n\n              var value = get();\n\n              if (factory) {\n\n                // call factory only if neccessary\n                // (i.e. if parent variables changed, reload is explicitly set\n                // or no dependencies are given)\n                if (changed || reload || values.length == 0) {\n                  log('asyncLoad: call factory');\n                  try {\n                    value = factory.apply(factory, values);\n                  } catch (e) {\n                    throw new Error('unresolvable: ' + e.message);\n                  }\n                }\n              }\n\n              return value;\n            }).then(function(value) {\n\n              if (loading !== promise) {\n                log('asyncLoad: skip (new load request)');\n                return loading;\n              }\n\n              log('asyncLoad: load complete');\n\n              loading = null;\n              setLoaded(value);\n              return value;\n            }, function(error) {\n\n              if (loading !== promise) {\n                log('asyncLoad: skip (new load request)');\n                return loading;\n              }\n\n              log('asyncLoad: load error');\n\n              loading = null;\n              data.$error = error;\n              changed = false;\n\n              throw error;\n            });\n\n            return promise;\n          }\n\n          /**\n           * Receive a notification from the parent that it got changed\n           * and update your state accordingly.\n           *\n           */\n          function parentChanged() {\n\n            log('parentChanged START');\n\n            // anticipating parent change, everything ok\n            if (loading) {\n              log('parentChanged SKIP (loading)');\n              return;\n            }\n\n            dirty = true;\n\n            // should this provider resolve its data \n            // eagerly if it got dirty\n            if (eager) {\n              log('parentChanged RESOLVE async');\n\n              nextTick(function() {\n                log('parentChanged RESOLVE');\n                resolve();\n              });\n            }\n\n            notifyParentChanged();\n          }\n\n          function get() {\n            return data.value;\n          }\n\n          /**\n           * Resolve the value of this data holder\n           */\n          function resolve(options) {\n            options = options || {};\n\n            var reload = options.reload;\n\n            if (dirty || reload) {\n              loading = asyncLoad(reload);\n            }\n\n            if (loading) {\n              log('resolve: load async');\n              return loading;\n            } else {\n              log('resolve: load sync');\n              return $q.when(get());\n            }\n          }\n\n          function set(value) {\n            if (factory) {\n              throw new Error('[dataDepend] Cannot set value, was using factory');\n            } else if (isFunction(value)) {\n              throw new Error('[dataDepend] Cannot refine static value using factory function');\n            }\n\n            setLoaded(value);\n          }\n\n          function log() {\n            // var args = toArray(arguments);\n            // args.unshift('[' + produces + ']');\n            // args.unshift('[dataDepend]');\n\n            // console.log.apply(console, args);\n          }\n\n          /**\n           * Return a filtered view on the provider, that exposes only\n           * the dependency with the given name, if multiple dependencies\n           * are produced. \n           *\n           * @param {object} provider the provider to filter\n           * @param {string} name the produced name to filter for\n           *\n           * @returns {object} a view on the provider that filters for the\n           *                   specified name\n           *\n           * @throws error if the provider is not a multi provider\n           */\n          function filter(name) {\n\n            if (!isArray(provider.produces)) {\n              throw new Error('[dataDepend] Provider does not produce multiple values');\n            }\n\n            var idx = provider.produces.indexOf(name),\n                __get = provider.get,\n                __resolve = provider.resolve;\n\n            function filter(values) {\n              if (!values) {\n                return values;\n              } else {\n                return values[idx];\n              }\n            }\n            \n            function resolve() {\n              var args = toArray(arguments);\n              return __resolve.apply(null, args).then(filter);\n            }\n\n            function get() {\n              var args = toArray(arguments);\n              return filter(__get.apply(null, args));\n            }\n\n            var filteredProvider = angular.extend({}, provider, {\n              resolve: resolve,\n              get: get\n            });\n\n            return filteredProvider;\n          }\n\n          function destroy() {\n            allDependenciesDo(function(d) {\n              var parent = getProvider(d),\n                  parentChildren =  parent.children,\n                  idx = parentChildren.indexOf(provider);\n\n              if (idx !== -1) {\n                parentChildren.splice(idx, 1);\n              }\n            });\n          }\n\n          var handleApi = {\n            reload: function() {\n              resolve({ reload: true});\n            }\n          };\n\n          angular.extend(data, handleApi);\n          \n          return provider;\n        }\n\n        function createDataDepend(scope, inheritedProvides) {\n\n          var providers = createProviders(inheritedProvides);\n\n          /**\n           * Registers an observer on the data object that gets called whenever \n           * any of the required observed variables change. \n           *\n           * @param {String|Array<String>} variables single variable or list of \n           *                                         variables the callback depends on\n           * @param {Function} callback to be invoked when any of the required variables\n           *                            change\n           * @return {Object} a handle to getters data, including a $loaded attribute\n           *                  that reflects the load status of the getter.\n           * \n           * The method accepts a single variable name or an array of variable names \n           * the provided callback depends on.\n           *\n           * The second parameter is the callback that is executed when the required \n           * variables change. When no variables argument is given the dependencies\n           * may be provided using the [ 'a', 'b', function callback(a, b) { }]\n           * notation.\n           * \n           * Example: \n           *\n           *      var data = dataDepend.create($scope);\n           *      data.provide('a', 'A');\n           *      \n           *      var status = data.observe('a', function(a) {\n           *        console.log('a is ' + a);\n           *      });\n           *  \n           *      $timeout(function() {\n           *        data.set('a', 'B');\n           *      }, 2000);\n           *\n           *   prints out the following to the console: \n           *\n           *      > a is A\n           *      > a is B\n           */\n          function observe(variables, callback) {\n\n            var name = 'provider$' + nextId();\n            \n            if (!callback) {\n              // parse callback and variables from \n              // [ 'A', 'B', function(A, B) { ... }] notation \n              callback = variables;\n              variables = annotate(callback);\n\n              if (isArray(callback)) {\n                callback = callback[callback.length - 1];\n              }\n            } else {\n              // make sure we can use get('asdf', function(asdf) { })\n              // in place of get([ 'asdf' ], function(asdf) { })\n              variables = ensureArray(variables);\n            }\n\n            if (!isFunction(callback)) {\n              throw new Error('[dataDepend] Must provide callback as second parameter or use [ \"A\", \"B\", function(a, b) { } ] notation');\n            }\n\n            var provider = internalCreateProvider({\n              produces: name,\n              factory: callback,\n              dependencies: variables,\n              eager: true,\n              registry: providers\n            });\n\n            // return handle to the\n            // providers data\n            return provider.data;\n          }\n\n          function internalCreateProvider(options) {\n            var produces = options.produces,\n                provider;\n\n            if (!produces) {\n              throw new Error('[dataDepend] Must provide produces when creating new provider');\n            }\n\n            provider = createProvider(options);\n\n            if (isArray(produces)) {\n              forEach(produces, function(name) {\n                providers.put(name, provider.filter(name));\n              });\n            } else {\n              providers.put(produces, provider);\n            }\n\n            return provider;\n          }\n\n          /**\n           * Watches an expression on the scope this object was registered on\n           * and publishes that value as a variable.\n           *\n           * The old value of the watch expression is published as {name}:old in the object.\n           *\n           * @param {string} name of the variable to publish\n           * @param {string} expression (optional) expression used to watch on the scope (defaults to name)\n           *\n           * @return {object} data object representing the load status\n           */\n          function watchScope(name, expression) {\n            expression = expression || name;\n\n            var oldValueName = name + ':old';\n\n            // create provider\n            provide(name, scope.$eval(expression));\n            provide(oldValueName, null);\n\n            var provider = providers.get(name);\n            var oldValueProvider = providers.get(oldValueName);\n\n            scope.$watch(expression, function(newValue, oldValue) {\n              if (newValue !== oldValue) {\n                provider.set(newValue);\n\n                // publish old value as {name}:old\n                oldValueProvider.set(oldValue);\n              }\n            });\n\n            return provider.data;\n          }\n\n          /**\n           * Provide one ore more variables under well known names.\n           * \n           * @param {String|Array<String>} name of the variable(s)\n           * @param {Function | Object | Array } value the value to initialize the object with\n           *\n           * @return {Object} handle to the newly created providers data\n           */\n          function provide(name, value) {\n            var factory,\n                variables,\n                provider;\n\n            if (providers.get(name)) {\n              throw new Error('[dataDepend] provider for ' + name + ' already registered');\n            }\n\n            if (isFunction(value) || (isArray(value) && isFunction(value[value.length - 1]))) {\n              // parse factory and variables from \n              // [ 'A', 'B', function(A, B) { ... }] notation \n              factory = value;\n              variables = annotate(factory);\n              value = undefined;\n\n              if (isArray(factory)) {\n                factory = factory[factory.length - 1];\n              }\n            }\n\n            provider = internalCreateProvider({\n              produces: name,\n              factory: factory,\n              value: value,\n              dependencies: variables,\n              registry: providers\n            });\n\n            // return handle to the\n            // providers data\n            return provider.data;\n          }\n\n          /**\n           * Set a provided variable to the given value\n           * \n           * @param {string} name of the variable\n           * @param {function | object | array } value the value to initialize the object with\n           */\n          function set(name, value) {\n\n            if (typeof name !== 'string') {\n              throw new Error('[dataDepend] expected name to be a string, got ' + name);\n            }\n\n            var provider = providers.get(name);\n\n            if (!provider) {\n              throw new Error('[dataDepend] no provider with name ' + name);\n            }\n\n            provider.set(value);\n          }\n\n          function changed(name) {\n            var provider = providers.get(name);\n\n            if (!provider) {\n              throw new Error('[dataDepend] Provider \"' + name + '\" does not exists');\n            }\n\n            provider.resolve({ reload: true });\n          }\n\n          function destroy() {\n            var localProviders = providers.local;\n            \n            forEach(localProviders, function(provider) {\n              provider.destroy();\n            });\n          }\n\n          function createChild(scope) {\n            return createDataDepend(scope, providers);\n          }\n\n          scope.$on('$destroy', destroy);\n\n          return {\n            $providers: providers,\n            observe: observe,\n            provide: provide,\n            set: set,\n            changed: changed,\n            watchScope: watchScope,\n            newChild: createChild\n          };\n        }\n\n        return {\n          create: createDataDepend\n        };\n      }\n\n      return createDataDependFactory($injector.annotate, function(fn) {\n        $rootScope.$evalAsync(fn);\n      });\n    }];\n\n    module.factory('dataDepend', dataDependFactory);\n\n    return module;\n  }\n\n  if (typeof define === 'function' && define.amd) {\n    define('angular-data-depend',[ 'angular' ], function(angular) {\n      return createBinding(angular);\n    });\n  } else\n  if (typeof angular !== undefined) {\n    createBinding(angular);\n  } else {\n    throw new Error('[dataDepend] Failed to bind: AngularJS not available on window or via AMD');\n  }\n})(angular);\n","define('scripts/config/date',[], function() {\n  'use strict';\n  return [\n    'camDateFormatProvider',\n    'configurationProvider',\n  function(\n    camDateFormatProvider,\n    configurationProvider\n  ) {\n    var dateProperties = ['monthName', 'day', 'abbr', 'normal', 'long', 'short'];\n    for(var i = 0; i < dateProperties.length; i++) {\n      camDateFormatProvider.setDateFormat(configurationProvider.getDateFormat(dateProperties[i]), dateProperties[i]);\n    }\n\n  }];\n});\n\n","\ndefine('text!scripts/index.html',[],function () { return '<div class=\"columns\"\\n     ng-controller=\"camLayoutCtrl\">\\n\\n  <!-- # filters column -->\\n  <section class=\"column task-filters\"\\n           ng-controller=\"camFiltersCtrl\">\\n    <header class=\"cell top\">\\n      <button class=\"btn btn-link\"\\n              ng-show=\"userCanCreateFilter\"\\n              ng-click=\"openModal($event)\">\\n        <span class=\"glyphicon glyphicon-plus-sign\"></span>\\n        {{ \\'FILTER_CREATE\\' | translate }}\\n      </button>\\n\\n      <button ng-click=\"toggleRegion($event)\"\\n              data-region=\"filters\"\\n              class=\"region-toggle btn btn-link\">\\n        <span class=\"icon-bar\"></span>\\n        <span class=\"icon-bar\"></span>\\n        <span class=\"icon-bar\"></span>\\n      </button>\\n    </header>\\n\\n    <div class=\"cell content\">\\n      <div cam-tasklist-filters\\n           filters-data=\"filtersData\"\\n           open-modal=\"openModal\"></div>\\n    </div>\\n  </section>\\n  <!-- / filters column -->\\n\\n\\n\\n\\n\\n  <!-- # list column -->\\n  <section class=\"column tasks-list\"\\n           ng-controller=\"camListCtrl\">\\n    <header class=\"cell top\">\\n      <div cam-sorting-choices\\n           tasklist-data=\"tasklistData\"></div>\\n\\n      <button ng-click=\"toggleRegion($event)\"\\n              data-region=\"list\"\\n              class=\"region-toggle btn btn-link\">\\n        <span class=\"icon-bar\"></span>\\n        <span class=\"icon-bar\"></span>\\n        <span class=\"icon-bar\"></span>\\n      </button>\\n    </header>\\n\\n    <div class=\"cell content\">\\n      <view ng-repeat=\"tasklistPlugin in tasklistPlugins\"\\n            provider=\"tasklistPlugin\"\\n            vars=\"tasklistVars\" />\\n\\n      <div cam-tasks\\n           tasklist-data=\"tasklistData\"></div>\\n    </div>\\n  </section>\\n  <!-- / list column -->\\n\\n\\n\\n\\n\\n  <!-- # task column -->\\n  <section class=\"column task-details\"\\n           ng-controller=\"camTaskActionCtrl\">\\n    <header class=\"cell top\">\\n      <button ng-click=\"toggleRegion($event)\"\\n              data-region=\"task\"\\n              class=\"region-toggle btn btn-link\">\\n        <span class=\"icon-bar\"></span>\\n        <span class=\"icon-bar\"></span>\\n        <span class=\"icon-bar\"></span>\\n      </button>\\n\\n      <button ng-click=\"maximizeRegion($event)\"\\n              data-region=\"task\"\\n              class=\"btn btn-link maximize\">\\n        <span class=\"glyphicon glyphicon-resize-full\"></span>\\n      </button>\\n\\n      <button ng-click=\"resetRegions($event)\"\\n              class=\"btn btn-link reset-regions\">\\n        <span class=\"glyphicon glyphicon-resize-small\"></span>\\n      </button>\\n\\n      <div class=\"task-actions\"\\n           ng-show=\"task\"\\n           ng-repeat=\"taskAction in taskActions\">\\n        <view provider=\"taskAction\" vars=\"taskVars\">\\n      </div>\\n    </header>\\n\\n    <div class=\"cell content\">\\n      <div cam-tasklist-task\\n           tasklist-data=\"tasklistData\"></div>\\n    </div>\\n  </section>\\n  <!-- # task column -->\\n\\n</div>\\n';});\n\n","\ndefine('text!scripts/user/controller/cam-auth-login.html',[],function () { return '<div class=\"form-signin-container\">\\n  <form role=\"form\"\\n        name=\"signinForm\"\\n        class=\"form-signin cam-auth-login \">\\n\\n    <div class=\"auth-fields\">\\n\\n      <h2 translate=\"PLEASE_SIGN_IN\">Please sign in</h2>\\n\\n      <div notifications-panel />\\n\\n      <div class=\"form-group\">\\n        <input required\\n               autofocus=\"autofocus\"\\n               tabindex=\"1\"\\n               ng-model=\"username\"\\n               name=\"username\"\\n               type=\"text\"\\n               class=\"form-control\"\\n               id=\"signinFormInputUsername\"\\n               placeholder=\"{{ \\'USERNAME\\' | translate }}\"\\n               auto-fill>\\n      </div>\\n\\n      <div class=\"form-group\">\\n        <input required\\n               tabindex=\"2\"\\n               ng-model=\"password\"\\n               name=\"password\"\\n               type=\"password\"\\n               class=\"form-control\"\\n               id=\"signinFormInputPassword\"\\n               placeholder=\"{{ \\'PASSWORD\\' | translate }}\"\\n               auto-fill>\\n      </div>\\n\\n    </div>\\n\\n    <div class=\"auth-actions\">\\n      <button class=\"btn btn-lg btn-primary\"\\n              tabindex=\"3\"\\n              type=\"submit\"\\n              ng-disabled=\"!username || !password\"\\n              ng-click=\"login()\"\\n              translate=\"SIGN_IN_ACTION\">Sign in</button>\\n    </div>\\n  </form>\\n</div>\\n';});\n\n","define('scripts/api/index',[\n  'angular',\n  'camunda-bpm-sdk-js'\n],\nfunction(\n  angular,\n  CamSDK\n) {\n  'use strict';\n\n  var apiModule = angular.module('cam.tasklist.client', []);\n\n  apiModule.value('HttpClient', CamSDK.Client);\n\n  apiModule.value('CamForm', CamSDK.Form);\n\n  apiModule.factory('camAPIHttpClient', [\n          '$rootScope', '$location', '$translate', 'Notifications',\n  function($rootScope, $location, $translate, Notifications) {\n\n    function AngularClient(config) {\n      this._wrapped = new CamSDK.Client.HttpClient(config);\n    }\n\n    angular.forEach(['post', 'get', 'load', 'put', 'del', 'options', 'head'], function(name) {\n      AngularClient.prototype[name] = function(path, options) {\n        if (!options.done) {\n          return;\n        }\n\n        if (!$rootScope.authentication) {\n          return options.done(new Error('Not authenticated'));\n        }\n\n        var original = options.done;\n\n        options.done = function(err, result) {\n\n          function applyResponse() {\n            // in case the session expired\n            if (err && err.status === 401) {\n              // broadcast that the authentication changed\n              $rootScope.$broadcast('authentication.changed', null);\n              // set authentication to null\n              $rootScope.authentication = null;\n\n\n              $translate([\n                'SESSION_EXPIRED',\n                'SESSION_EXPIRED_MESSAGE'\n              ]).then(function(translations) {\n                Notifications.addError({\n                  status: translations.SESSION_EXPIRED,\n                  message: translations.SESSION_EXPIRED_MESSAGE,\n                  exclusive: true\n                });\n              });\n\n              // broadcast event that a login is required\n              // proceeds a redirect to /login\n              $rootScope.$broadcast('authentication.login.required');\n\n              return;\n            }\n\n            original(err, result);\n          }\n\n          var phase = $rootScope.$$phase;\n\n          if(phase !== '$apply' && phase !== '$digest') {\n            $rootScope.$apply(applyResponse);\n          }\n          else {\n            applyResponse();\n          }\n        };\n\n        this._wrapped[name](path, options);\n      };\n    });\n\n    angular.forEach(['on', 'once', 'off', 'trigger'], function(name) {\n      AngularClient.prototype[name] = function() {\n        this._wrapped[name].apply(this, arguments);\n      };\n    });\n\n    return AngularClient;\n  }]);\n\n\n  apiModule.factory('camAPI', [\n          'camAPIHttpClient',\n          '$window',\n          'Uri',\n  function(camAPIHttpClient, $window, Uri) {\n\n    var conf = {\n      apiUri:     'engine-rest/api/engine',\n      HttpClient: camAPIHttpClient,\n      engine: Uri.appUri(':engine')\n    };\n    if ($window.tasklistConf) {\n      for (var c in $window.tasklistConf) {\n        conf[c] = $window.tasklistConf[c];\n      }\n    }\n\n    return new CamSDK.Client(conf);\n  }]);\n\n  return apiModule;\n});\n\n","define('scripts/user/controller/cam-user-logout-ctrl',[\n], function(\n) {\n  'use strict';\n\n  return [\n    '$translate',\n    'AuthenticationService',\n    'Notifications',\n  function(\n    $translate,\n    AuthenticationService,\n    Notifications\n  ) {\n\n    AuthenticationService\n      .logout()\n      .then(function() {\n        $translate('LOGGED_OUT').then(function(translated) {\n          Notifications.add({\n            status: translated,\n            exclusive: true\n          });\n        });\n      });\n\n  }];\n\n});\n\n","define('scripts/user/controller/cam-user-login-ctrl',[\n], function(\n) {\n  'use strict';\n\n  return [\n    '$scope',\n    '$translate',\n    'AuthenticationService',\n    'Notifications',\n  function(\n    $scope,\n    $translate,\n    AuthenticationService,\n    Notifications\n  ) {\n\n    function loginSuccess() {\n      $translate('LOGGED_IN').then(function(translated) {\n        Notifications.addMessage({\n          duration: 5000,\n          status: translated,\n          exclusive: true\n        });\n      });\n    }\n\n    function loginError() {\n      $translate('CREDENTIALS_ERROR').then(function(translated) {\n        Notifications.addError({\n          status: translated,\n          scope: $scope\n        });\n      });\n    }\n\n    $scope.login = function() {\n      AuthenticationService\n        .login($scope.username, $scope.password)\n        .then(loginSuccess, loginError);\n    };\n\n  }];\n\n});\n\n","define('scripts/user/index',[\n  'angular',\n  'camunda-commons-ui/auth/index',\n  '../api/index',\n\n  './controller/cam-user-logout-ctrl',\n  './controller/cam-user-login-ctrl'\n], function(\n  angular,\n  auth,\n  api,\n\n  camUserLogoutCtrl,\n  camUserLoginCtrl\n) {\n  'use strict';\n\n  /**\n   * @module cam.tasklist.user\n   */\n\n  /**\n   * @memberof cam.tasklist\n   */\n\n  var userModule = angular.module('cam.tasklist.user', [\n    auth.name,\n    api.name\n  ]);\n\n  /**\n   * controller to be used for the /logout route\n   */\n  userModule.controller('camUserLogoutCtrl', camUserLogoutCtrl);\n\n  /**\n   * Controller used for the /login route\n   */\n  userModule.controller('camUserLoginCtrl', camUserLoginCtrl);\n\n\n  return userModule;\n});\n\n\n","define('scripts/config/routes',[\n  'text!./../index.html',\n  'text!./../user/controller/cam-auth-login.html',\n  './../user/index'\n], function(\n  tasklistTemplate,\n  userLoginTemplate\n) {\n  'use strict';\n\n  return [\n    '$routeProvider',\n  function(\n    $routeProvider\n  ) {\n\n    $routeProvider\n      .when('/', {\n        template: tasklistTemplate,\n        controller: 'camTasklistViewCtrl',\n        authentication: 'required',\n        reloadOnSearch: false\n      })\n\n      .when('/login', {\n        template: userLoginTemplate,\n        controller: 'camUserLoginCtrl'\n      })\n\n      .when('/logout', {\n        template: userLoginTemplate,\n        authentication: 'required',\n        controller: 'camUserLogoutCtrl'\n      })\n\n      .otherwise({\n        redirectTo: '/'\n      })\n    ;\n  }];\n});\n\n","define('scripts/config/locales',['moment', 'angular'], function(moment, angular) {\n  'use strict';\n\n  return function(ngModule, appRoot) {\n\n    ngModule.factory('localeLoader', ['$q', '$http', 'Notifications',\n      function($q, $http, Notifications) {\n        return function (options) {\n\n          if (!options || (!angular.isString(options.prefix) || !angular.isString(options.suffix))) {\n            throw new Error('Couldn\\'t load static files, no prefix or suffix specified!');\n          }\n\n          var deferred = $q.defer();\n\n          $http(angular.extend({\n            url: [\n              options.prefix,\n              options.key,\n              options.suffix\n            ].join(''),\n            method: 'GET',\n            params: ''\n          }, options.$http)).success(function (data) {\n            if(typeof options.callback === \"function\") {\n              options.callback(null, data, options.key);\n            }\n            deferred.resolve(data.labels);\n          }).error(function (data) {\n            if(typeof options.callback === \"function\") {\n              options.callback(data, null, options.key);\n            }\n            // error notification\n            Notifications.addError({\n              status: 'Error in localization configuration',\n              message: '\"' + options.key + '\" is declared as available locale, but no such locale file exists.'\n            });\n            deferred.reject(options.key);\n          });\n\n          return deferred.promise;\n        };\n      }]);\n\n    ngModule.config([\n      '$translateProvider',\n      'configurationProvider',\n      function(\n      $translateProvider,\n       configurationProvider\n      ) {\n        var avail = configurationProvider.getAvailableLocales();\n        var fallback = configurationProvider.getFallbackLocale();\n\n        $translateProvider.useLoader('localeLoader', {\n          prefix: appRoot + '/app/tasklist/locales/',\n          suffix: '.json',\n          callback: function(err, data, locale) {\n            if(!err && data && data.dateLocales) {\n              moment.lang(locale || fallback, data.dateLocales);\n            }\n          }\n        });\n\n        $translateProvider.registerAvailableLanguageKeys(avail);\n        $translateProvider.fallbackLanguage(fallback);\n\n        $translateProvider.determinePreferredLanguage(function() {\n          var nav = window.navigator;\n          var browserLang = ((angular.isArray(nav.languages) ? nav.languages[0] :\n                              nav.language ||\n                              nav.browserLanguage ||\n                              nav.systemLanguage ||\n                              nav.userLanguage\n                            ) || '').split('-');\n          var idx = avail.indexOf(angular.lowercase(browserLang[0]));\n          if (idx > -1) {\n            return avail[idx];\n          } else {\n            return fallback;\n          }\n        });\n      }]);\n  };\n});\n\n","define('scripts/config/tooltip',[], function() {\n  'use strict';\n\n  return [\n    '$tooltipProvider',\n  function(\n    $tooltipProvider\n  ) {\n    $tooltipProvider.options({\n      appendToBody: true,\n      popupDelay: 500\n    });\n  }];\n});\n\n","define('scripts/config/uris',[\n  'angular'\n], function(\n  angular\n) {\n  'use strict';\n\n\n  return function(ngModule, config) {\n\n    ngModule.config([\n      'UriProvider',\n      function(\n        UriProvider\n      ) {\n\n        UriProvider.replace(':appName', 'tasklist');\n        UriProvider.replace('app://', config.href);\n        UriProvider.replace('adminbase://', config['app-root'] + '/app/admin/');\n        UriProvider.replace('tasklistbase://', config['app-root'] + '/app/tasklist/');\n        UriProvider.replace('cockpitbase://', config['app-root'] + '/app/cockpit/');\n        UriProvider.replace('admin://', config['admin-api']);\n        UriProvider.replace('plugin://', config['admin-api'] + 'plugin/');\n        UriProvider.replace('engine://', config['engine-api']);\n\n        UriProvider.replace(':engine', ['$window', function($window) {\n          var uri = $window.location.href;\n\n          var match = uri.match(/\\/app\\/tasklist\\/(\\w+)(|\\/)/);\n          if (match) {\n            return match[1];\n          } else {\n            throw new Error('no process engine selected');\n          }\n        }]);\n      }]);\n  };\n});\n\n","define('scripts/controller/cam-tasklist-app-ctrl',[\n  'angular'\n], function(\n  angular\n) {\n  'use strict';\n\n  var TasklistApp = (function() {\n\n    function TasklistApp() {\n\n      this.refreshProvider = null;\n\n    }\n\n    return TasklistApp;\n\n  })();\n\n  return [\n    '$scope',\n  function(\n    $scope\n  ) {\n\n    // create a new tasklistApp\n    $scope.tasklistApp = new TasklistApp();\n\n  }];\n\n});\n\n","define('scripts/controller/cam-tasklist-view-ctrl',[\n  'angular'\n], function(\n  angular\n) {\n  'use strict';\n\n  function getRefreshProvider(tasklistData) {\n    return {\n      refreshTaskList : function () {\n        tasklistData.changed('taskList');\n      }\n    };\n  }\n\n  return [\n    '$scope',\n    '$q',\n    '$location',\n    '$interval',\n    'search',\n    'dataDepend',\n    'camAPI',\n  function(\n    $scope,\n    $q,\n    $location,\n    $interval,\n    search,\n    dataDepend,\n    camAPI\n  ) {\n\n    function getPropertyFromLocation(property) {\n      var search = $location.search() || {};\n      return search[property] || null;\n    }\n\n    function updateSilently(params) {\n      search.updateSilently(params);\n    }\n\n    $scope.$on('$destroy', function () {\n      $scope.tasklistApp.refreshProvider = null;\n    });\n\n    // init data depend for task list data\n    var tasklistData = $scope.tasklistData = dataDepend.create($scope);\n\n    // init taslist app with a refresh provider\n    if ($scope.tasklistApp) {\n      $scope.tasklistApp.refreshProvider = getRefreshProvider(tasklistData);\n    }\n\n    // get current task id from location\n    var taskId = getPropertyFromLocation('task');\n    var detailsTab = getPropertyFromLocation('detailsTab');\n\n    // resources\n    var Filter = camAPI.resource('filter');\n    var Task = camAPI.resource('task');\n\n    // current selected filter\n    var currentFilter;\n\n    // provide /////////////////////////////////////////////////////////////////////////////////\n\n    /**\n     * Provides the list of filters\n     */\n    tasklistData.provide('filters', [ function() {\n      var deferred = $q.defer();\n\n      Filter.list({\n        itemCount: false,\n        resoureType: 'Task'\n      }, function(err, res) {\n        if(!!err) {\n          deferred.reject(err);\n\n        }\n        else {\n          deferred.resolve(res);\n        }\n      });\n\n      return deferred.promise;\n    }]);\n\n    tasklistData.provide('currentFilter', ['filters', function(filters) {\n\n      var focused,\n          filterId = getPropertyFromLocation('filter');\n\n      for (var i = 0, filter; !!(filter = filters[i]); i++) {\n\n          if (filterId === filter.id) {\n            focused = filter;\n            break;\n          }\n          // auto focus first filter\n          if(!focused || filter.properties.priority < focused.properties.priority) {\n            focused = filter;\n          }\n      }\n\n      if(currentFilter && currentFilter.id !== focused.id) {\n        var currentPage = getPropertyFromLocation('page');\n        if (currentPage) {\n          updateSilently({\n            page: '1'\n          });\n        }\n      }\n\n      if(focused && focused.id !== filterId) {\n        updateSilently({\n          filter: focused.id\n        });\n      }\n\n      return angular.copy(focused);\n\n    }]);\n\n    tasklistData.provide('searchQuery', {\n        processVariables: [],\n        taskVariables: [],\n        caseInstanceVariables: []\n      });\n\n    tasklistData.provide('taskListQuery', ['currentFilter', 'searchQuery', function(currentFilter, searchQuery) {\n      if (!currentFilter) {\n        return null;\n      }\n\n      var taskListQuery = angular.copy(searchQuery);\n\n      var firstResult = ((getPropertyFromLocation('page') || 1) - 1) * 15;\n      var sorting = getPropertyFromLocation('sorting');\n      try {\n        sorting = JSON.parse(sorting);\n      }\n      catch (err) {\n        sorting = [{}];\n      }\n      sorting = (Array.isArray(sorting) && sorting.length) ? sorting : [{}];\n      sorting[0].sortOrder = sorting[0].sortOrder || 'desc';\n      sorting[0].sortBy = sorting[0].sortBy || 'created';\n\n      taskListQuery.id = currentFilter.id;\n      taskListQuery.firstResult = firstResult;\n      taskListQuery.maxResults = 15;\n      taskListQuery.sorting = sorting;\n      taskListQuery.active = true;\n\n      return taskListQuery;\n\n    }]);\n\n     /**\n      * Provide the list of tasks\n      */\n     tasklistData.provide('taskList', [ 'taskListQuery', function(taskListQuery) {\n       var deferred = $q.defer();\n\n       if(!taskListQuery || taskListQuery.id === null) {\n         // no filter selected\n         deferred.resolve({\n           count: 0,\n           _embedded : {}\n         });\n       }\n       else {\n         // filter selected\n         Filter.getTasks(angular.copy(taskListQuery), function(err, res) {\n           if(err) {\n             deferred.reject(err);\n           }\n           else {\n             deferred.resolve(res);\n           }\n         });\n       }\n       return deferred.promise;\n     }]);\n\n   /**\n     * Provide current task id\n     */\n    tasklistData.provide('taskId', { 'taskId' : taskId });\n\n\n    /**\n     * Provide the current task or the value 'null' in case no task is selected\n     */\n    tasklistData.provide('task', ['taskId', function(task) {\n\n      var deferred = $q.defer();\n\n      var taskId = task.taskId;\n\n      if(typeof taskId !== 'string') {\n        deferred.resolve(null);\n      }\n      else {\n        Task.get(taskId, function(err, res) {\n          if(err) {\n            deferred.reject(err);\n          }\n          else {\n            deferred.resolve(res);\n          }\n\n        });\n      }\n\n      return deferred.promise;\n    }]);\n\n    // observe //////////////////////////////////////////////////////////////////////////////\n\n\n    tasklistData.observe('currentFilter', function(_currentFilter) {\n      currentFilter = _currentFilter;\n    });\n\n    /*\n     * automatically refresh the taskList every 10 seconds so that changes\n     * (such as claims) are represented in realtime\n     */\n    var intervalPromise;\n    tasklistData.observe('currentFilter', function(currentFilter) {\n      // stop current refresh\n      if(intervalPromise) {\n        $interval.cancel(intervalPromise);\n      }\n\n      if(currentFilter && currentFilter.properties.refresh) {\n        intervalPromise = $interval(function(){\n\n          if($scope.tasklistApp && $scope.tasklistApp.refreshProvider) {\n            $scope.tasklistApp.refreshProvider.refreshTaskList();\n\n          }\n          else {\n            $interval.cancel(intervalPromise);\n          }\n\n        }, 10000);\n      }\n    });\n\n    // routeChanged listener ////////////////////////////////////////////////////////////////\n\n    /**\n     * Update task if location changes\n     */\n    $scope.$on('$routeChanged', function() {\n      var oldTaskId = taskId;\n      var oldDetailsTab = detailsTab;\n\n      taskId = getPropertyFromLocation('task');\n      detailsTab = getPropertyFromLocation('detailsTab');\n\n      if (oldTaskId !== taskId || oldDetailsTab === detailsTab) {\n        tasklistData.set('taskId', { 'taskId' : taskId });\n      }\n\n      currentFilter = null;\n      tasklistData.changed('currentFilter');\n    });\n  }];\n});\n\n","define('scripts/services/cam-tasklist-assign-notification',[], function() {\n  'use strict';\n  return ['camAPI', 'Notifications', '$translate',\n  function(camAPI,   Notifications,   $translate) {\n    var Task = camAPI.resource('task');\n    /**\n     * Search for tasks which are assigned to the user and display a notification containin a list of these tasks\n     *\n     * @param {Object} params\n     * @param {String} [params.assignee]              The name of the user for which the tasks should be retrieved\n     * @param {String} [params.processInstanceId]     The ID of the process instance.\n     * @param {String} [params.caseInstanceId]        The ID of the case instance.\n     */\n    return function(params) {\n      if(!params.assignee || !(params.processInstanceId || params.caseInstanceId)) {\n        return;\n      }\n      Task.list(params, function(err, data) {\n        if(data._embedded.task.length > 0) {\n          var msg = \"\";\n          for(var task, i = 0; !!(task = data._embedded.task[i]); i++) {\n            msg += '<a ng-href=\"#/?task='+ task.id +'\" ng-click=\"removeNotification(notification)\">'+task.name+'</a>, ';\n          }\n          $translate(params.processInstanceId ? 'ASSIGN_NOTE_PROCESS' : 'ASSIGN_NOTE_CASE').then(function(translated) {\n            Notifications.addMessage({\n              duration: 16000,\n              status: translated,\n              message: msg.slice(0,-2)\n            });\n          });\n        }\n      });\n    };\n  }];\n});\n\n","define('scripts/services/cam-tasklist-configuration',['angular'], function(angular) {\n  'use strict';\n\n  var config = window.camTasklistConf;\n  var defaultConfig = {\n    \"dateFormat\": {\n      \"monthName\": \"MMMM\",\n      \"day\": \"DD\",\n      \"abbr\": \"lll\",\n      \"normal\": \"LLL\",\n      \"long\": \"LLLL\",\n      \"short\": \"LL\"\n    },\n    \"locales\": {\n      \"availableLocales\": [\"en\"],\n      \"fallbackLocale\": \"en\"\n    }\n  };\n  return [function() {\n    this.getDateFormat = function(formatName) {\n      var dateFormatObj = config.dateFormat || defaultConfig.dateFormat;\n      return dateFormatObj[formatName] || defaultConfig.dateFormat[formatName];\n    };\n\n    this.getFallbackLocale = function() {\n      if(config.locales && config.locales.fallbackLocale) {\n        return config.locales.fallbackLocale;\n      } else {\n        return defaultConfig.locales.fallbackLocale;\n      }\n    };\n\n    this.getAvailableLocales = function() {\n      if(config.locales && config.locales.availableLocales) {\n        return config.locales.availableLocales;\n      } else {\n        return defaultConfig.locales.availableLocales;\n      }\n    };\n\n    this.getDateLocales = function() {\n      return config.camDateLocales;\n    };\n\n\n    this.$get = function() {\n      return this;\n    };\n  }];\n});\n\n","\ndefine('text!scripts/variable/directives/cam-tasklist-variables.html',[],function () { return '<div class=\"variables-list\"\\n     ng-class=\"{expanded: (expanded && shownVariablesCount > 2)}\">\\n\\n  <!-- <h6 class=\"col-xs-12\"\\n      translate=\"TASK_VARIABLES\">Variables</h6> -->\\n\\n  <div ng-repeat=\"(delta, info) in variableDefinitions\"\\n       ng-if=\"variablesByName[info.name] || filterProperties.showUndefinedVariable\">\\n    <div class=\"col-xs-12 col-lg-6\">\\n\\n      <div class=\"row variable-item\">\\n        <!-- <span class=\"col-xs-4 col-lg-12\"\\n              ng-click=\"selectValue($event)\"> -->\\n        <span class=\"col-xs-4 col-lg-12\">\\n          <strong class=\"variable-label\"\\n                  ng-class=\"{\\'undefined\\' : !variablesByName[info.name] && filterProperties.showUndefinedVariable}\"\\n                  tooltip-placement=\"top\"\\n                  tooltip=\"{{ info.name }}\">\\n            {{ info.label }}:\\n          </strong>\\n        </span>\\n\\n\\n        <span class=\"col-xs-8 col-lg-12\"\\n              ng-if=\"!variablesByName[info.name] && filterProperties.showUndefinedVariable\">\\n          <span class=\"variable-value undefined\"\\n                translate=\"UNDEFINED_VARIABLE\">\\n            &lt;Undefined&gt;\\n          </span>\\n        </span>\\n\\n\\n        <span class=\"col-xs-8 col-lg-12\"\\n              ng-if=\"(variablesByName[info.name] && variablesByName[info.name].value !== null) || variablesByName[info.name].type === \\'Bytes\\'\"\\n              ng-switch=\"variablesByName[info.name].type\">\\n          <span class=\"variable-value\"\\n                ng-switch-when=\"Date\"\\n                tooltip-placement=\"top\"\\n                tooltip=\"{{ variablesByName[info.name].value | camDate }}\">\\n            {{ variablesByName[info.name].value | camDate }}\\n          </span>\\n\\n          <span class=\"variable-value\"\\n                ng-switch-when=\"Null\">\\n            {{ variablesByName[info.name].value }}\\n          </span>\\n\\n          <a class=\"variable-value variable-type\"\\n             ng-switch-when=\"Object\"\\n             ng-click=\"showValue(variablesByName[info.name], $event)\">\\n            {{ variablesByName[info.name].valueInfo.objectTypeName }}\\n          </a>\\n\\n          <a class=\"variable-value\"\\n             ng-switch-when=\"Bytes\"\\n             ng-click=\"download(variablesByName[info.name], $event)\">\\n            {{ \\'DOWNLOAD\\' | translate }}\\n            <span class=\"glyphicon glyphicon-download\"></span>\\n          </a>\\n\\n          <span class=\"variable-value\"\\n                ng-switch-default\\n                tooltip-placement=\"top\"\\n                tooltip=\"{{ variablesByName[info.name].value }}\">\\n            {{ variablesByName[info.name].value }}\\n          </span>\\n        </span>\\n\\n        <span class=\"col-xs-8 col-lg-12\"\\n          ng-if=\"variablesByName[info.name].value === null && variablesByName[info.name].type !== \\'Bytes\\'\">\\n          <span class=\"variable-value variable-empty-value\"\\n                translate=\"EMPTY_VALUE\">Empty</span>\\n        </span>\\n      </div>\\n\\n    </div>\\n  </div>\\n\\n\\n  <div class=\"shutter\"\\n       ng-if=\"shownVariablesCount > 2\"\\n       ng-click=\"toggle($event)\"\\n       tooltip-placement=\"bottom\"\\n       tooltip=\"{{ (expanded ? \\'LESS_VARIABLES\\' : \\'MORE_VARIABLES\\') | translate }}\">\\n    <a class=\"glyphicon\"\\n       ng-class=\"{\\'glyphicon-chevron-up\\': expanded, \\'glyphicon-chevron-down\\': !expanded}\">\\n    </a>\\n  </div>\\n</div>\\n\\n';});\n\n","\ndefine('text!scripts/variable/modals/cam-tasklist-variables-detail-modal.html',[],function () { return '<div class=\"modal-header\">\\n  <h3 class=\"modal-title\">\\n    <span translate=\"VARIABLE_VALUE\">Value of</span>\\n    {{ variable.name }}\\n  </h3>\\n</div>\\n\\n<div class=\"modal-body\">\\n  <div class=\"form-group\">\\n    <label translate=\"VARIABLE_VALUE_INFO\">Value Info</label>\\n  </div>\\n  <div class=\"form-group\">\\n    {{ \\'VARIABLE_OBJECT_TYPE_NAME\\' | translate }}:\\n    <code class=\"variable-type\">{{ type }}</code>\\n  </div>\\n  <div class=\"form-group\">\\n    {{ \\'VARIABLE_SERIALIZATION_DATA_FORMAT\\' | translate }}:\\n    <code class=\"variable-type\">{{ dataFormat }}</code>\\n  </div>\\n\\n  <div class=\"form-group\">\\n    <label translate=\"VARIABLE_VALUE\">Value</label>\\n  </div>\\n\\n   <ul class=\"nav nav-tabs\">\\n    <li ng-class=\"{ active: selectedTab === \\'serialized\\' }\">\\n      <a href ng-click=\"selectTab(\\'serialized\\')\">{{ \\'SERIALIZED\\' | translate }}</a>\\n    </li>\\n    <li ng-class=\"{ active: selectedTab === \\'deserialized\\' }\">\\n      <a href ng-click=\"selectTab(\\'deserialized\\')\">{{ \\'DESERIALIZED\\' | translate }}</a>\\n    </li>\\n  </ul>\\n\\n  <div ng-show=\"selectedTab === \\'serialized\\'\" class=\"tab-content\">\\n    <textarea disabled\\n              ng-model=\"value\"\\n              rows=\"10\"\\n              class=\"form-control input-xxlarge\">\\n    </textarea>\\n  </div>\\n  <div ng-show=\"selectedTab === \\'deserialized\\'\" class=\"tab-content\">\\n    <div class=\"alert alert-warning\"\\n         role=\"alert\" \\n         ng-show=\"deserializationError\">\\n      <strong>{{ \\'DESERIALIZATION_ERROR\\' | translate }}</strong>:\\n      {{ deserializationError }}\\n    </div>\\n    <div ng-show=\"!deserializationError\">\\n      <textarea disabled\\n                ng-model=\"valueDeserialized\"\\n                rows=\"10\"\\n                class=\"form-control input-xxlarge\">\\n      </textarea>\\n    </div>\\n  </div>\\n\\n</div>\\n\\n<div class=\"modal-footer\">\\n  <div class=\"row row-action\">\\n    <div class=\"col-xs-12\">\\n      <button class=\"btn btn-xs btn-link\"\\n              type=\"submit\"\\n              ng-click=\"$dismiss()\"\\n              translate=\"CLOSE\">Close</button>\\n    </div>\\n  </div>\\n</div>\\n';});\n\n","// RequireJS dependencies\ndefine('scripts/variable/directives/cam-tasklist-variables',[\n  'angular',\n  'text!./cam-tasklist-variables.html',\n  'text!../modals/cam-tasklist-variables-detail-modal.html'\n], function(\n  angular,\n  template,\n  modalTemplate\n) {\n  'use strict';\n\n  // AngularJS DI\n  return [\n    '$modal',\n    '$window',\n    'Uri',\n  function(\n    $modal,\n    $window,\n    Uri\n  ) {\n\n    return {\n      template: template,\n\n      scope: {\n        variables:        '=',\n        filterProperties: '='\n      },\n\n      link: function(scope) {\n        scope.variableDefinitions = [];\n        scope.variablesByName = {};\n        scope.expanded = false;\n        scope.shownVariablesCount = 0;\n\n        scope.toggle = function($event) {\n          scope.expanded = !scope.expanded;\n          if ($event && $event.preventDefault) {\n            $event.preventDefault();\n          }\n          $event.stopPropagation();\n        };\n\n        scope.showValue = function(variable, $event) {\n          $event.preventDefault();\n          $event.stopPropagation();\n          $modal.open({\n            template: modalTemplate,\n\n            windowClass: 'variable-modal-detail',\n\n            resolve: {\n              details: function() { return variable; }\n            },\n\n            controller: 'camTasklistVariablesDetailsModalCtrl'\n          });\n        };\n\n        scope.download = function(variable, $event) {\n          $event.preventDefault();\n          $event.stopPropagation();\n          var link = variable._links.self.href +'/data';\n          link = Uri.appUri('engine://engine/:engine'+ link);\n          $window.open(link, 'download');\n        };\n\n        if (scope.filterProperties) {\n          scope.variableDefinitions = scope.filterProperties.variables || {};\n\n          // building an object on which keys are name of variables is more efficient\n          // than calling a function which would iterate every time.\n          angular.forEach(scope.variables, function(variable) {\n            scope.variablesByName[variable.name] = variable;\n          });\n\n          scope.shownVariablesCount = Object.keys(scope.filterProperties.showUndefinedVariable ? scope.variableDefinitions : scope.variablesByName).length;\n        }\n      }\n    };\n  }];\n});\n\n","define('scripts/variable/modals/cam-tasklist-variables-detail-modal',[\n  'angular'\n], function(\n  angular\n) {\n  'use strict';\n\n  return [\n    '$scope',\n    '$http',\n    'Uri',\n    'details',\n  function(\n    $scope,\n    $http,\n    Uri,\n    details\n  ) {\n\n    $scope.$on('$locationChangeSuccess', function() {\n      $scope.$dismiss();\n    });\n\n    $scope.value = null;\n    $scope.valueDeserialized = null;\n    $scope.deserializationError = null;\n    $scope.type = null;\n    $scope.dataFormat = null;\n    $scope.variable = details;\n    $scope.selectedTab = 'serialized';\n\n    switch ($scope.variable.type) {\n      case 'Object':\n        $scope.type = $scope.variable.valueInfo.objectTypeName;\n        $scope.value = $scope.variable.value;\n        $scope.dataFormat = $scope.variable.valueInfo.serializationDataFormat;\n\n        // attempt fetching the deserialized value\n        $http({\n          method: 'GET', \n          url: Uri.appUri('engine://engine/:engine'+$scope.variable._links.self.href)\n        }).success(function(data, status) {\n          $scope.valueDeserialized = JSON.stringify(data.value);\n        }).error(function(data, status) {\n          $scope.deserializationError = data.message;\n        });\n\n        break;\n\n      default:\n        $scope.value = $scope.variable.value;\n    }\n\n    $scope.selectTab = function(tab) {\n      $scope.selectedTab = tab;\n    };\n\n  }];\n\n});\n","/* angular-moment.js / v0.9.0 / (c) 2013, 2014, 2015 Uri Shaked / MIT Licence */\n\n'format global';\n/* global define */\n'deps angular';\n'deps moment';\n\n(function () {\n\t'use strict';\n\n\tfunction angularMoment(angular, moment) {\n\n\t\t/**\n\t\t * @ngdoc overview\n\t\t * @name angularMoment\n\t\t *\n\t\t * @description\n\t\t * angularMoment module provides moment.js functionality for angular.js apps.\n\t\t */\n\t\treturn angular.module('angularMoment', [])\n\n\t\t/**\n\t\t * @ngdoc object\n\t\t * @name angularMoment.config:angularMomentConfig\n\t\t *\n\t\t * @description\n\t\t * Common configuration of the angularMoment module\n\t\t */\n\t\t\t.constant('angularMomentConfig', {\n\t\t\t\t/**\n\t\t\t\t * @ngdoc property\n\t\t\t\t * @name angularMoment.config.angularMomentConfig#preprocess\n\t\t\t\t * @propertyOf angularMoment.config:angularMomentConfig\n\t\t\t\t * @returns {string} The default preprocessor to apply\n\t\t\t\t *\n\t\t\t\t * @description\n\t\t\t\t * Defines a default preprocessor to apply (e.g. 'unix', 'etc', ...). The default value is null,\n\t\t\t\t * i.e. no preprocessor will be applied.\n\t\t\t\t */\n\t\t\t\tpreprocess: null, // e.g. 'unix', 'utc', ...\n\n\t\t\t\t/**\n\t\t\t\t * @ngdoc property\n\t\t\t\t * @name angularMoment.config.angularMomentConfig#timezone\n\t\t\t\t * @propertyOf angularMoment.config:angularMomentConfig\n\t\t\t\t * @returns {string} The default timezone\n\t\t\t\t *\n\t\t\t\t * @description\n\t\t\t\t * The default timezone (e.g. 'Europe/London'). Empty string by default (does not apply\n\t\t\t\t * any timezone shift).\n\t\t\t\t */\n\t\t\t\ttimezone: '',\n\n\t\t\t\t/**\n\t\t\t\t * @ngdoc property\n\t\t\t\t * @name angularMoment.config.angularMomentConfig#format\n\t\t\t\t * @propertyOf angularMoment.config:angularMomentConfig\n\t\t\t\t * @returns {string} The pre-conversion format of the date\n\t\t\t\t *\n\t\t\t\t * @description\n\t\t\t\t * Specify the format of the input date. Essentially it's a\n\t\t\t\t * default and saves you from specifying a format in every\n\t\t\t\t * element. Overridden by element attr. Null by default.\n\t\t\t\t */\n\t\t\t\tformat: null,\n\n\t\t\t\t/**\n\t\t\t\t * @ngdoc property\n\t\t\t\t * @name angularMoment.config.angularMomentConfig#statefulFilters\n\t\t\t\t * @propertyOf angularMoment.config:angularMomentConfig\n\t\t\t\t * @returns {boolean} Whether angular-moment filters should be stateless (or not)\n\t\t\t\t *\n\t\t\t\t * @description\n\t\t\t\t * Specifies whether the filters included with angular-moment are stateful.\n\t\t\t\t * Stateful filters will automatically re-evaluate whenever you change the timezone\n\t\t\t\t * or language settings, but may negatively impact performance. true by default.\n\t\t\t\t */\n\t\t\t\tstatefulFilters: true\n\t\t\t})\n\n\t\t/**\n\t\t * @ngdoc object\n\t\t * @name angularMoment.object:moment\n\t\t *\n\t\t * @description\n\t\t * moment global (as provided by the moment.js library)\n\t\t */\n\t\t\t.constant('moment', moment)\n\n\t\t/**\n\t\t * @ngdoc object\n\t\t * @name angularMoment.config:amTimeAgoConfig\n\t\t * @module angularMoment\n\t\t *\n\t\t * @description\n\t\t * configuration specific to the amTimeAgo directive\n\t\t */\n\t\t\t.constant('amTimeAgoConfig', {\n\t\t\t\t/**\n\t\t\t\t * @ngdoc property\n\t\t\t\t * @name angularMoment.config.amTimeAgoConfig#withoutSuffix\n\t\t\t\t * @propertyOf angularMoment.config:amTimeAgoConfig\n\t\t\t\t * @returns {boolean} Whether to include a suffix in am-time-ago directive\n\t\t\t\t *\n\t\t\t\t * @description\n\t\t\t\t * Defaults to false.\n\t\t\t\t */\n\t\t\t\twithoutSuffix: false,\n\n\t\t\t\t/**\n\t\t\t\t * @ngdoc property\n\t\t\t\t * @name angularMoment.config.amTimeAgoConfig#serverTime\n\t\t\t\t * @propertyOf angularMoment.config:amTimeAgoConfig\n\t\t\t\t * @returns {number} Server time in milliseconds since the epoch\n\t\t\t\t *\n\t\t\t\t * @description\n\t\t\t\t * If set, time ago will be calculated relative to the given value.\n\t\t\t\t * If null, local time will be used. Defaults to null.\n\t\t\t\t */\n\t\t\t\tserverTime: null,\n\n\t\t\t\t/**\n\t\t\t\t * @ngdoc property\n\t\t\t\t * @name angularMoment.config.amTimeAgoConfig#format\n\t\t\t\t * @propertyOf angularMoment.config:amTimeAgoConfig\n\t\t\t\t * @returns {string} The format of the date to be displayed in the title of the element. If null,\n\t\t\t\t *        the directive set the title of the element.\n\t\t\t\t *\n\t\t\t\t * @description\n\t\t\t\t * Specify the format of the date when displayed. null by default.\n\t\t\t\t */\n\t\t\t\ttitleFormat: null\n\t\t\t})\n\n\t\t/**\n\t\t * @ngdoc directive\n\t\t * @name angularMoment.directive:amTimeAgo\n\t\t * @module angularMoment\n\t\t *\n\t\t * @restrict A\n\t\t */\n\t\t\t.directive('amTimeAgo', ['$window', 'moment', 'amMoment', 'amTimeAgoConfig', 'angularMomentConfig', function ($window, moment, amMoment, amTimeAgoConfig, angularMomentConfig) {\n\n\t\t\t\treturn function (scope, element, attr) {\n\t\t\t\t\tvar activeTimeout = null;\n\t\t\t\t\tvar currentValue;\n\t\t\t\t\tvar currentFormat = angularMomentConfig.format;\n\t\t\t\t\tvar withoutSuffix = amTimeAgoConfig.withoutSuffix;\n\t\t\t\t\tvar titleFormat = amTimeAgoConfig.titleFormat;\n\t\t\t\t\tvar localDate = new Date().getTime();\n\t\t\t\t\tvar preprocess = angularMomentConfig.preprocess;\n\t\t\t\t\tvar modelName = attr.amTimeAgo.replace(/^::/, '');\n\t\t\t\t\tvar isBindOnce = (attr.amTimeAgo.indexOf('::') === 0);\n\t\t\t\t\tvar isTimeElement = ('TIME' === element[0].nodeName.toUpperCase());\n\t\t\t\t\tvar unwatchChanges;\n\n\t\t\t\t\tfunction getNow() {\n\t\t\t\t\t\tvar now;\n\t\t\t\t\t\tif (amTimeAgoConfig.serverTime) {\n\t\t\t\t\t\t\tvar localNow = new Date().getTime();\n\t\t\t\t\t\t\tvar nowMillis = localNow - localDate + amTimeAgoConfig.serverTime;\n\t\t\t\t\t\t\tnow = moment(nowMillis);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tnow = moment();\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn now;\n\t\t\t\t\t}\n\n\t\t\t\t\tfunction cancelTimer() {\n\t\t\t\t\t\tif (activeTimeout) {\n\t\t\t\t\t\t\t$window.clearTimeout(activeTimeout);\n\t\t\t\t\t\t\tactiveTimeout = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tfunction updateTime(momentInstance) {\n\t\t\t\t\t\telement.text(momentInstance.from(getNow(), withoutSuffix));\n\n\t\t\t\t\t\tif (titleFormat && !element.attr('title')) {\n\t\t\t\t\t\t\telement.attr('title', momentInstance.local().format(titleFormat));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!isBindOnce) {\n\n\t\t\t\t\t\t\tvar howOld = Math.abs(getNow().diff(momentInstance, 'minute'));\n\t\t\t\t\t\t\tvar secondsUntilUpdate = 3600;\n\t\t\t\t\t\t\tif (howOld < 1) {\n\t\t\t\t\t\t\t\tsecondsUntilUpdate = 1;\n\t\t\t\t\t\t\t} else if (howOld < 60) {\n\t\t\t\t\t\t\t\tsecondsUntilUpdate = 30;\n\t\t\t\t\t\t\t} else if (howOld < 180) {\n\t\t\t\t\t\t\t\tsecondsUntilUpdate = 300;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tactiveTimeout = $window.setTimeout(function () {\n\t\t\t\t\t\t\t\tupdateTime(momentInstance);\n\t\t\t\t\t\t\t}, secondsUntilUpdate * 1000);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tfunction updateDateTimeAttr(value) {\n\t\t\t\t\t\tif (isTimeElement) {\n\t\t\t\t\t\t\telement.attr('datetime', value);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tfunction updateMoment() {\n\t\t\t\t\t\tcancelTimer();\n\t\t\t\t\t\tif (currentValue) {\n\t\t\t\t\t\t\tvar momentValue = amMoment.preprocessDate(currentValue, preprocess, currentFormat);\n\t\t\t\t\t\t\tupdateTime(momentValue);\n\t\t\t\t\t\t\tupdateDateTimeAttr(momentValue.toISOString());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tunwatchChanges = scope.$watch(modelName, function (value) {\n\t\t\t\t\t\tif ((typeof value === 'undefined') || (value === null) || (value === '')) {\n\t\t\t\t\t\t\tcancelTimer();\n\t\t\t\t\t\t\tif (currentValue) {\n\t\t\t\t\t\t\t\telement.text('');\n\t\t\t\t\t\t\t\tupdateDateTimeAttr('');\n\t\t\t\t\t\t\t\tcurrentValue = null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcurrentValue = value;\n\t\t\t\t\t\tupdateMoment();\n\n\t\t\t\t\t\tif (value !== undefined && isBindOnce) {\n\t\t\t\t\t\t\tunwatchChanges();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\tif (angular.isDefined(attr.amWithoutSuffix)) {\n\t\t\t\t\t\tscope.$watch(attr.amWithoutSuffix, function (value) {\n\t\t\t\t\t\t\tif (typeof value === 'boolean') {\n\t\t\t\t\t\t\t\twithoutSuffix = value;\n\t\t\t\t\t\t\t\tupdateMoment();\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\twithoutSuffix = amTimeAgoConfig.withoutSuffix;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tattr.$observe('amFormat', function (format) {\n\t\t\t\t\t\tif (typeof format !== 'undefined') {\n\t\t\t\t\t\t\tcurrentFormat = format;\n\t\t\t\t\t\t\tupdateMoment();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\tattr.$observe('amPreprocess', function (newValue) {\n\t\t\t\t\t\tpreprocess = newValue;\n\t\t\t\t\t\tupdateMoment();\n\t\t\t\t\t});\n\n\t\t\t\t\tscope.$on('$destroy', function () {\n\t\t\t\t\t\tcancelTimer();\n\t\t\t\t\t});\n\n\t\t\t\t\tscope.$on('amMoment:localeChanged', function () {\n\t\t\t\t\t\tupdateMoment();\n\t\t\t\t\t});\n\t\t\t\t};\n\t\t\t}])\n\n\t\t/**\n\t\t * @ngdoc service\n\t\t * @name angularMoment.service.amMoment\n\t\t * @module angularMoment\n\t\t */\n\t\t\t.service('amMoment', ['moment', '$rootScope', '$log', 'angularMomentConfig', function (moment, $rootScope, $log, angularMomentConfig) {\n\t\t\t\t/**\n\t\t\t\t * @ngdoc property\n\t\t\t\t * @name angularMoment:amMoment#preprocessors\n\t\t\t\t * @module angularMoment\n\t\t\t\t *\n\t\t\t\t * @description\n\t\t\t\t * Defines the preprocessors for the preprocessDate method. By default, the following preprocessors\n\t\t\t\t * are defined: utc, unix.\n\t\t\t\t */\n\t\t\t\tthis.preprocessors = {\n\t\t\t\t\tutc: moment.utc,\n\t\t\t\t\tunix: moment.unix\n\t\t\t\t};\n\n\t\t\t\t/**\n\t\t\t\t * @ngdoc function\n\t\t\t\t * @name angularMoment.service.amMoment#changeLocale\n\t\t\t\t * @methodOf angularMoment.service.amMoment\n\t\t\t\t *\n\t\t\t\t * @description\n\t\t\t\t * Changes the locale for moment.js and updates all the am-time-ago directive instances\n\t\t\t\t * with the new locale. Also broadcasts a `amMoment:localeChanged` event on $rootScope.\n\t\t\t\t *\n\t\t\t\t * @param {string} locale Locale code (e.g. en, es, ru, pt-br, etc.)\n\t\t\t\t */\n\t\t\t\tthis.changeLocale = function (locale) {\n\t\t\t\t\tvar result = moment.locale(locale);\n\t\t\t\t\tif (angular.isDefined(locale)) {\n\t\t\t\t\t\t$rootScope.$broadcast('amMoment:localeChanged');\n\n\t\t\t\t\t}\n\t\t\t\t\treturn result;\n\t\t\t\t};\n\n\t\t\t\t/**\n\t\t\t\t * @ngdoc function\n\t\t\t\t * @name angularMoment.service.amMoment#preprocessDate\n\t\t\t\t * @methodOf angularMoment.service.amMoment\n\t\t\t\t *\n\t\t\t\t * @description\n\t\t\t\t * Preprocess a given value and convert it into a Moment instance appropriate for use in the\n\t\t\t\t * am-time-ago directive and the filters.\n\t\t\t\t *\n\t\t\t\t * @param {*} value The value to be preprocessed\n\t\t\t\t * @param {string} preprocess The name of the preprocessor the apply (e.g. utc, unix)\n\t\t\t\t * @param {string=} format Specifies how to parse the value (see {@link http://momentjs.com/docs/#/parsing/string-format/})\n\t\t\t\t * @return {Moment} A value that can be parsed by the moment library\n\t\t\t\t */\n\t\t\t\tthis.preprocessDate = function (value, preprocess, format) {\n\t\t\t\t\tif (angular.isUndefined(preprocess)) {\n\t\t\t\t\t\tpreprocess = angularMomentConfig.preprocess;\n\t\t\t\t\t}\n\t\t\t\t\tif (this.preprocessors[preprocess]) {\n\t\t\t\t\t\treturn this.preprocessors[preprocess](value, format);\n\t\t\t\t\t}\n\t\t\t\t\tif (preprocess) {\n\t\t\t\t\t\t$log.warn('angular-moment: Ignoring unsupported value for preprocess: ' + preprocess);\n\t\t\t\t\t}\n\t\t\t\t\tif (!isNaN(parseFloat(value)) && isFinite(value)) {\n\t\t\t\t\t\t// Milliseconds since the epoch\n\t\t\t\t\t\treturn moment(parseInt(value, 10));\n\t\t\t\t\t}\n\t\t\t\t\t// else just returns the value as-is.\n\t\t\t\t\treturn moment(value, format);\n\t\t\t\t};\n\n\t\t\t\t/**\n\t\t\t\t * @ngdoc function\n\t\t\t\t * @name angularMoment.service.amMoment#applyTimezone\n\t\t\t\t * @methodOf angularMoment.service.amMoment\n\t\t\t\t *\n\t\t\t\t * @description\n\t\t\t\t * Apply a timezone onto a given moment object - if moment-timezone.js is included\n\t\t\t\t * Otherwise, it'll not apply any timezone shift.\n\t\t\t\t *\n\t\t\t\t * @param {Moment} aMoment a moment() instance to apply the timezone shift to\n\t\t\t\t * @returns {Moment} The given moment with the timezone shift applied\n\t\t\t\t */\n\t\t\t\tthis.applyTimezone = function (aMoment) {\n\t\t\t\t\tvar timezone = angularMomentConfig.timezone;\n\t\t\t\t\tif (aMoment && timezone) {\n\t\t\t\t\t\tif (aMoment.tz) {\n\t\t\t\t\t\t\taMoment = aMoment.tz(timezone);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$log.warn('angular-moment: timezone specified but moment.tz() is undefined. Did you forget to include moment-timezone.js?');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn aMoment;\n\t\t\t\t};\n\t\t\t}])\n\n\t\t/**\n\t\t * @ngdoc filter\n\t\t * @name angularMoment.filter:amCalendar\n\t\t * @module angularMoment\n\t\t */\n\t\t\t.filter('amCalendar', ['moment', 'amMoment', 'angularMomentConfig', function (moment, amMoment, angularMomentConfig) {\n\t\t\t\tfunction amCalendarFilter(value, preprocess) {\n\t\t\t\t\tif (typeof value === 'undefined' || value === null) {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\n\t\t\t\t\tvalue = amMoment.preprocessDate(value, preprocess);\n\t\t\t\t\tvar date = moment(value);\n\t\t\t\t\tif (!date.isValid()) {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn amMoment.applyTimezone(date).calendar();\n\t\t\t\t}\n\n\t\t\t\t// Since AngularJS 1.3, filters have to explicitly define being stateful\n\t\t\t\t// (this is no longer the default).\n\t\t\t\tamCalendarFilter.$stateful = angularMomentConfig.statefulFilters;\n\n\t\t\t\treturn amCalendarFilter;\n\t\t\t}])\n\n\t\t/**\n\t\t * @ngdoc filter\n\t\t * @name angularMoment.filter:amDateFormat\n\t\t * @module angularMoment\n\t\t * @function\n\t\t */\n\t\t\t.filter('amDateFormat', ['moment', 'amMoment', 'angularMomentConfig', function (moment, amMoment, angularMomentConfig) {\n\t\t\t\tfunction amDateFormatFilter(value, format, preprocess) {\n\t\t\t\t\tif (typeof value === 'undefined' || value === null) {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\n\t\t\t\t\tvalue = amMoment.preprocessDate(value, preprocess);\n\t\t\t\t\tvar date = moment(value);\n\t\t\t\t\tif (!date.isValid()) {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn amMoment.applyTimezone(date).format(format);\n\t\t\t\t}\n\n\t\t\t\tamDateFormatFilter.$stateful = angularMomentConfig.statefulFilters;\n\n\t\t\t\treturn amDateFormatFilter;\n\t\t\t}])\n\n\t\t/**\n\t\t * @ngdoc filter\n\t\t * @name angularMoment.filter:amDurationFormat\n\t\t * @module angularMoment\n\t\t * @function\n\t\t */\n\t\t\t.filter('amDurationFormat', ['moment', 'angularMomentConfig', function (moment, angularMomentConfig) {\n\t\t\t\tfunction amDurationFormatFilter(value, format, suffix) {\n\t\t\t\t\tif (typeof value === 'undefined' || value === null) {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn moment.duration(value, format).humanize(suffix);\n\t\t\t\t}\n\n\t\t\t\tamDurationFormatFilter.$stateful = angularMomentConfig.statefulFilters;\n\n\t\t\t\treturn amDurationFormatFilter;\n\t\t\t}])\n\n\t\t/**\n\t\t * @ngdoc filter\n\t\t * @name angularMoment.filter:amTimeAgo\n\t\t * @module angularMoment\n\t\t * @function\n\t\t */\n\t\t\t.filter('amTimeAgo', ['moment', 'amMoment', 'angularMomentConfig', function (moment, amMoment, angularMomentConfig) {\n\t\t\t\tfunction amTimeAgoFilter(value, preprocess, suffix) {\n\t\t\t\t\tif (typeof value === 'undefined' || value === null) {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\n\t\t\t\t\tvalue = amMoment.preprocessDate(value, preprocess);\n\t\t\t\t\tvar date = moment(value);\n\t\t\t\t\tif (!date.isValid()) {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn amMoment.applyTimezone(date).fromNow(suffix);\n\t\t\t\t}\n\n\t\t\t\tamTimeAgoFilter.$stateful = angularMomentConfig.statefulFilters;\n\n\t\t\t\treturn amTimeAgoFilter;\n\t\t\t}]);\n\t}\n\n\tif (typeof define === 'function' && define.amd) {\n\t\tdefine('angular-moment', ['angular', 'moment'], angularMoment);\n\t} else if (typeof module !== 'undefined' && module && module.exports) {\n\t\tangularMoment(angular, require('moment'));\n\t} else {\n\t\tangularMoment(angular, window.moment);\n\t}\n})();\n\n\n","/**\n * @module  cam.tasklist.variables\n * @belongsto cam.tasklist\n *\n * Set of features to deal with variables (from tasks, processes, ...)\n */\n\n\n\ndefine('scripts/variable/index',[\n  'angular',\n  './directives/cam-tasklist-variables',\n  './modals/cam-tasklist-variables-detail-modal',\n  'angular-moment'\n], function(\n  angular,\n  camTasklistVariables,\n  camTasklistVariablesDetailsModalCtrl\n) {\n  'use strict';\n\n  var variableModule = angular.module('cam.tasklist.variables', [\n    'ui.bootstrap',\n    'angularMoment'\n  ]);\n\n  variableModule.directive('camTasklistVariables', camTasklistVariables);\n  variableModule.controller('camTasklistVariablesDetailsModalCtrl', camTasklistVariablesDetailsModalCtrl);\n\n  return variableModule;\n});\n\n","define('scripts/tasklist/controller/cam-tasklist-list-ctrl',[], function() {\n  'use strict';\n\n  return [\n    '$scope',\n    'Views',\n  function(\n    $scope,\n    Views\n  ) {\n\n    $scope.tasklistVars = { read: [ 'tasklistData' ] };\n    $scope.tasklistPlugins = Views.getProviders({ component: 'tasklist.list' });\n\n  }];\n\n});\n\n","\ndefine('text!scripts/tasklist/directives/cam-tasklist-sorting-choices.html',[],function () { return '<span class=\"sorting-label hidden-xs hidden-sm hidden-md\"\\n      translate=\"SORT_BY\"></span>\\n\\n<ol class=\"sorting-choice list-inline\">\\n  <li ng-repeat=\"(index, sorting) in sortings\"\\n      class=\"sorting-choice dropdown\"\\n      is-open=\"openDropdowns[index]\"\\n      on-toggle=\"openDropdown(index, open)\">\\n    <a class=\"glyphicon glyphicon-minus-sign\"\\n       ng-if=\"sortings.length > 1\"\\n       ng-click=\"removeSorting(index)\"\\n       tooltip-placement=\"bottom\"\\n       tooltip=\"{{ \\'REMOVE_SORTING\\' | translate }}\"></a>\\n\\n    <a href\\n       tabindex=\"-1\"\\n       class=\"dropdown-toggle\">\\n      <span class=\"sort-by\">{{ byLabel(index) }}</span>\\n    </a>\\n\\n    <a href\\n       tabindex=\"-1\"\\n       tooltip=\"{{ (sorting.order === \\'desc\\' ? \\'DESC\\' : \\'ASC\\') | translate }}\"\\n       class=\"sort-direction glyphicon\"\\n       ng-class=\"sorting.order === \\'asc\\' ? \\'glyphicon-chevron-up\\' : \\'glyphicon-chevron-down\\'\"\\n       ng-click=\"changeOrder(index)\"></a>\\n\\n    <ul cam-sorting-dropdown\\n        options=\"availableOptions\"\\n        click-handler=\"changeSorting(index, id, type, value)\"\\n        reset-function=\"resetFunctions[index]\"\\n        change=\"true\">\\n    </ul>\\n  </li>\\n\\n  <li class=\"dropdown new-sort\"\\n      is-open=\"openDropdownNew\"\\n      on-toggle=\"openDropdown(-1, open)\">\\n    <a href\\n       class=\"dropdown-toggle\">\\n      <span class=\"glyphicon glyphicon-plus-sign\"\\n            tooltip=\"{{ \\'ADD_SORT_BY\\' | translate }}\"></span>\\n      <span class=\"hidden-xs hidden-sm hidden-md\"\\n            translate=\"ADD_SORT_BY\"></span>\\n    </a>\\n\\n    <ul cam-sorting-dropdown\\n        options=\"availableOptions\"\\n        click-handler=\"addSorting(id, type, value)\"\\n        reset-function=\"resetFunctions[-1]\">\\n    </ul>\\n  </li>\\n</ol>\\n';});\n\n","define('scripts/tasklist/directives/cam-tasklist-sorting-choices',[\n  'angular',\n  'text!./cam-tasklist-sorting-choices.html'\n], function(\n  angular,\n  template\n) {\n  'use strict';\n\n  function stringifySortings(sortingQuery) {\n    return JSON.stringify(sortingQuery.map(function (sorting) {\n      var obj = {\n        sortBy: sorting.by,\n        sortOrder: sorting.order\n      };\n\n      if (sorting.by.indexOf('Variable') > -1) {\n        if (!sorting.parameters) {\n          throw new Error('Variable sorting needs parameters');\n        }\n        obj.parameters = sorting.parameters;\n      }\n\n      return obj;\n    }));\n  }\n\n  return [\n    'search',\n    '$translate',\n    '$location',\n    '$timeout',\n  function(\n    search,\n    $translate,\n    $location,\n    $timeout\n  ) {\n    return {\n\n      restrict: 'A',\n\n      scope: {\n        tasklistData: '='\n      },\n\n      template: template,\n\n      controller: [function () {}],\n\n      link: function(scope, element) {\n        var $bdy = angular.element('body');\n        var $newSort = element.find('.new-sort .dropdown-menu');\n\n        scope.sortings = [{\n          order:    'desc',\n          by:       'created'\n        }];\n\n        scope.openDropdowns = [];\n        scope.openDropdownNew = false;\n\n        scope.sortedOn = [];\n\n        var plannedRefresh;\n        function updateColumns() {\n          if (plannedRefresh) {\n            $timeout.cancel(plannedRefresh);\n          }\n\n          plannedRefresh = $timeout(function () {\n            var columns = element.parents('.columns');\n            var headers = columns.find('.cell.top');\n            var bodies = columns.find('.cell.content');\n            var shown = $bdy.hasClass('list-column-close');\n\n            element.css('height', 'auto');\n\n            if (shown) {\n              var minHeight = parseInt(headers.css('min-height'), 10);\n              headers.css('height', minHeight);\n              bodies.css('top', minHeight);\n              return;\n            }\n\n            var height = element.height();\n            var columnTop = element.parent();\n            columnTop.height(height);\n            var columnTopHeight = height;\n\n            headers.height(columnTopHeight);\n            bodies.css('top', columnTopHeight + 30);\n            plannedRefresh = null;\n          }, 100);\n        }\n\n        scope.$on('layout:change', updateColumns);\n\n        scope.uniqueProps = {\n          priority:               $translate.instant('PRIORITY'),\n          created:                $translate.instant('CREATION_DATE'),\n          dueDate:                $translate.instant('DUE_DATE'),\n          followUpDate:           $translate.instant('FOLLOW_UP_DATE'),\n          nameCaseInsensitive:    $translate.instant('TASK_NAME'),\n          assignee:               $translate.instant('ASSIGNEE')\n        };\n\n        scope.byLabel = function (index) {\n          if (!scope.sortings[index]) {\n            return '';\n          }\n\n          var by = scope.sortings[index].by;\n\n          if (scope.uniqueProps[by]) {\n            return scope.uniqueProps[by].toLowerCase();\n          }\n\n          if (!scope.sortings[index] || !scope.sortings[index].parameters) {\n            return '';\n          }\n\n          return scope.sortings[index].parameters.variable;\n        };\n\n        /**\n         * observe the task list query\n         */\n        var tasklistData = scope.tasklistData.newChild(scope);\n\n        tasklistData.observe('taskListQuery', function(taskListQuery) {\n          if (taskListQuery) {\n            var urlSortings = JSON.parse(($location.search() || {}).sorting || '[]');\n\n            scope.sortedOn = [];\n            scope.openDropdowns = [];\n\n            scope.availableOptions = angular.copy(scope.uniqueProps);\n\n            scope.sortings = urlSortings.map(function (sorting) {\n              scope.sortedOn.push(sorting.sortBy);\n              scope.openDropdowns.push(false);\n\n              delete scope.availableOptions[sorting.sortBy];\n\n              var returned = {\n                order:      sorting.sortOrder,\n                by:         sorting.sortBy\n              };\n\n              if (sorting.parameters) {\n                returned.parameters = sorting.parameters;\n              }\n\n              return returned;\n            });\n\n\n            if (!scope.sortings.length) {\n              scope.addSorting('created');\n            }\n\n            updateColumns();\n          }\n        });\n\n\n        scope.$watch('sortings.length', function (now, before) {\n          if (now !== before) { scope.updateSortings(); }\n        });\n\n        scope.$watch('sortings', updateColumns, true);\n\n        function positionDropdown(el) {\n          var edgeLeft = el.parent().position().left;\n          var edgeRight = el.outerWidth() + edgeLeft;\n          if (edgeRight > element.outerWidth()) {\n            el.css('left', (element.outerWidth() - edgeRight) + 'px');\n          }\n        }\n\n        scope.$watch('openDropdowns', function (now) {\n          var index = now.indexOf(true);\n          var els = element\n                      .find('li.sorting-choice .dropdown-menu')\n                      .css('left', 'auto');\n          if (index > -1 && els[index]) {\n            positionDropdown(angular.element(els[index]));\n          }\n        }, true);\n\n        scope.$watch('openDropdownNew', function (now) {\n          if (now) {\n            positionDropdown($newSort);\n          }\n          else {\n            $newSort.css('left', 'auto');\n          }\n        });\n\n        scope.changeSorting = function(idx, id, type, value) {\n          scope.sortings[idx].by = id;\n          delete scope.sortings[idx].parameters;\n          if(type) {\n            scope.sortings[idx].parameters = {\n              variable : value,\n              type     : type\n            };\n          }\n\n          scope.updateSortings();\n        };\n\n        scope.resetFunctions = [];\n        scope.openDropdown = function(idx, open) {\n          if(open) {\n            var sorting = scope.sortings[idx];\n            if(sorting) {\n              scope.resetFunctions[idx](sorting.by, sorting.parameters && sorting.parameters.type, sorting.parameters && sorting.parameters.variable);\n            } else {\n              scope.resetFunctions[idx]();\n            }\n\n          }\n        };\n\n        // should NOT manipulate the `scope.sortings`!\n        scope.updateSortings = function () {\n          scope.openDropdowns = [];\n          scope.sortedOn = scope.sortings.map(function (sorting) {\n            scope.openDropdowns.push(false);\n            return sorting.by;\n          });\n\n          search.updateSilently({\n            sorting: stringifySortings(scope.sortings)\n          });\n\n          tasklistData.changed('taskListQuery');\n\n          updateColumns();\n        };\n\n        /**\n         * Invoked when adding a sorting object\n         */\n        scope.addSorting = function (id, type, value) {\n\n          var newSorting = {\n            order: 'desc',\n            by: id\n          };\n          if(type) {\n            newSorting.parameters = {\n              variable : value,\n              type     : type\n            };\n          }\n          scope.sortings.push(newSorting);\n\n          scope.updateSortings();\n        };\n\n        /**\n         * Invoked when removing a sorting object\n         */\n        scope.removeSorting = function (index) {\n          scope.sortings.splice(index, 1);\n          scope.updateSortings();\n        };\n\n        /**\n         * invoked when the sort order is changed\n         */\n        scope.changeOrder = function(index) {\n          scope.sortings[index].order = scope.sortings[index].order === 'asc' ? 'desc' : 'asc';\n\n          scope.updateSortings();\n        };\n      }\n    };\n  }];\n});\n\n","\ndefine('text!scripts/tasklist/directives/cam-tasklist-sorting-dropdown.html',[],function () { return '<ul class=\"dropdown-menu\">\\n  <!-- single time selectable -->\\n  <li ng-repeat=\"(name, label) in options\">\\n    <a tabindex=\"-1\"\\n       translate=\"{{ label }}\"\\n       ng-click=\"handleClick($event, name)\">\\n    </a>\\n  </li>\\n\\n  <li class=\"divider\"\\n      ng-if=\"hasOptions()\"></li>\\n\\n  <!-- multiple times selectable -->\\n  <li ng-repeat=\"(name, label) in sortableVariables\"\\n      ng-click=\"showInputs($event, name)\"\\n      ng-class=\"{\\'active\\': name === focusedOn}\">\\n    <a translate=\"{{ label }}\"\\n       tabindex=\"-1\"></a>\\n\\n    <div ng-show=\"name === focusedOn\"\\n         cam-sorting-inputs\\n         change=\"change\"\\n         apply-handler=\"handleClick($event, name)\"\\n         variable=\"variable\"\\n         reset-function=\"resetInputs[name]\"></div>\\n  </li>\\n\\n</ul>\\n';});\n\n","define('scripts/tasklist/directives/cam-tasklist-sorting-dropdown',[\n  'angular',\n  'text!./cam-tasklist-sorting-dropdown.html'\n], function (\n  angular,\n  template\n) {\n  'use strict';\n  return ['$translate',\n  function ($translate){\n    return {\n      restrict: 'A',\n\n      replace: true,\n\n      template: template,\n\n      scope: {\n        options: '=',\n        clickHandler: '&',\n        change: '&',\n        resetFunction: '='\n      },\n\n      link: function($scope) {\n\n        $scope.change = $scope.$eval($scope.change);\n\n        $scope.variable = {\n          varName: '',\n          varType: 'Integer'\n        };\n\n\n        $scope.hasOptions = function(){\n          return $scope.options && Object.keys($scope.options).length > 0;\n        };\n\n        // --- CONTROL FUNCTIONS ---\n        $scope.resetInputs = {};\n        $scope.resetFunction = function(id, type, value){\n          if($scope.sortableVariables[id]) {\n            $scope.focusedOn = id;\n            $scope.variable.varType = type;\n            $scope.variable.varName = value;\n          } else {\n            $scope.focusedOn = null;\n            $scope.variable.varType = 'Integer';\n            $scope.variable.varName = '';\n          }\n        };\n\n        $scope.handleClick = function(evt, name) {\n          if($scope.sortableVariables[name]) {\n            $scope.clickHandler({$event: evt, id: name, type: $scope.variable.varType, value: $scope.variable.varName});\n          } else {\n            $scope.clickHandler({$event: evt, id: name});\n          }\n\n        };\n\n        $scope.sortableVariables = {\n          processVariable:        $translate.instant('PROCESS_VARIABLE'),\n          executionVariable:      $translate.instant('EXECUTION_VARIABLE'),\n          taskVariable:           $translate.instant('TASK_VARIABLE'),\n          caseExecutionVariable:  $translate.instant('CASE_EXECUTION_VARIABLE'),\n          caseInstanceVariable:   $translate.instant('CASE_INSTANCE_VARIABLE')\n        };\n\n        $scope.showInputs = function ($event, name) {\n          $event.preventDefault();\n          $event.stopPropagation();\n          $scope.focusedOn = name;\n        };\n      }\n    };\n  }];\n});\n\n","\ndefine('text!scripts/tasklist/directives/cam-tasklist-sorting-inputs.html',[],function () { return '<div class=\"variable-inputs\">\\n  <div class=\"form-group\">\\n    <input type=\"text\"\\n           placeholder=\"{{ \\'VARIABLE_NAME\\' | translate }}\"\\n           class=\"form-control\"\\n           ng-model=\"variable.varName\"\\n           autofocus />\\n  </div>\\n\\n  <div class=\"form-group\">\\n    <select class=\"form-control\"\\n            ng-model=\"variable.varType\">\\n      <option ng-repeat=\"(varType, varText) in variableTypes\"\\n              ng-selected=\"varType === variable.varType\"\\n              value=\"{{ varType }}\">{{ varText }}</option>\\n    </select>\\n  </div>\\n\\n  <div class=\"form-group actions\">\\n    <button ng-click=\"applySorting($event)\"\\n            ng-disabled=\"!variable\"\\n            class=\"btn btn-primary btn-sm\">\\n      {{ (change ? \\'CHANGE\\' : \\'ADD\\') | translate }}\\n    </button>\\n  </div>\\n</div>\\n';});\n\n","define('scripts/tasklist/directives/cam-tasklist-sorting-inputs',[\n  'angular',\n  'text!./cam-tasklist-sorting-inputs.html'\n], function (\n  angular,\n  template\n) {\n  'use strict';\n  return [\n    '$translate',\n  function (\n    $translate\n  ){\n    return {\n      restrict: 'AC',\n\n      replace: true,\n\n      template: template,\n\n      scope: {\n        change: '=',\n        applyHandler: '&',\n        resetFunction: '=',\n        variable: '=',\n      },\n\n      controller: [\n        '$scope',\n      function (\n        $scope\n      ) {\n        $scope.variableTypes = {\n          'Boolean':  $translate.instant('BOOLEAN'),\n          'Double':   $translate.instant('DOUBLE'),\n          'Date':     $translate.instant('DATE'),\n          'Integer':  $translate.instant('INTEGER'),\n          'Long':     $translate.instant('LONG'),\n          'Short':    $translate.instant('SHORT'),\n          'String':   $translate.instant('STRING')\n        };\n\n        $scope.applySorting = function (evt) {\n          $scope.applyHandler({$event: evt});\n        };\n      }]\n    };\n  }];\n});\n\n","\ndefine('text!scripts/tasklist/directives/cam-tasklist-tasks.html',[],function () { return '<div ng-show=\"!state.$loaded && !state.$error\"\\n     class=\"loader\">\\n  <span class=\"animate-spin glyphicon glyphicon-refresh\"></span>\\n  {{ \\'LOADING\\' | translate }}\\n</div>\\n\\n<div ng-show=\"state.$error\" class=\"alert alert-danger\" role=\"alert\">\\n  <span class=\"glyphicon glyphicon-exclamation-sign\"></span>\\n  <strong class=\"status\">{{ \\'FAILURE\\' | translate }}:</strong>\\n  <span class=\"message\">{{ \\'TASK_LIST_LOADING_FAILURE\\' | translate }}</span>\\n</div>\\n\\n<div ng-show=\"state.$loaded && !state.$error\">\\n\\n  <div ng-hide=\"totalItems\"\\n       class=\"well\">\\n    <span class=\"glyphicon glyphicon-info-sign\"></span>\\n    {{ \\'NO_MATCHING_TASK\\' | translate }}\\n  </div>\\n\\n  <div ng-show=\"totalItems && !tasks\" class=\"well\">\\n    <span class=\"glyphicon glyphicon-info-sign\"></span>\\n    {{ \\'RESTRICTION_NOTICE\\' | translate }}\\n    <a ng-click=\"resetPage()\">{{ \\'RESET_PAGE\\' | translate }}</a>\\n  </div>\\n\\n  <div ng-show=\"totalItems\"\\n       tabindex=\"0\"\\n       ng-keydown=\"handleKeydown($event)\">\\n    <ol class=\"tasks-list list-unstyled\">\\n      <li class=\"task\"\\n          ng-repeat=\"(delta, task) in tasks\"\\n          ng-class=\"{active: currentTaskId === task.id}\">\\n\\n        <div class=\"priority\"\\n             tooltip-placement=\"right\"\\n             tooltip=\"{{ \\'PRIORITY\\' | translate }}\">\\n          {{ task.priority }}\\n        </div>\\n\\n        <div class=\"clickable\"\\n             ng-click=\"focus($event, task)\">\\n          <div class=\"names\">\\n            <h4 class=\"task\">\\n              <a ng-href=\"{{ getHrefUrl(task) }}\"\\n                 ng-click=\"focus($event, task)\">\\n                {{ task.name || task.taskDefinitionKey || task.id }}\\n              </a>\\n            </h4>\\n\\n            <h6 class=\"process-definition\"\\n                ng-if=\"task.processDefinitionId\">\\n              {{ task._embedded.processDefinition[0].name || task._embedded.processDefinition[0].key }}\\n            </h6>\\n\\n            <h6 class=\"case-definition\"\\n                ng-if=\"task.caseDefinitionId\">\\n              {{ task._embedded.caseDefinition[0].name || task._embedded.caseDefinition[0].key }}\\n            </h6>\\n          </div>\\n\\n\\n          <div class=\"row\"\\n               ng-click=\"focus($event, task)\">\\n            <ul class=\"col-sm-12 col-md-6 dates list-inline\">\\n              <li class=\"creation-date\">\\n                <span tooltip-placement=\"top\"\\n                      tooltip=\"{{ \\'CREATION_DATE\\' | translate }}\"\\n                      class=\"glyphicon glyphicon-bookmark\"></span>\\n                <span tooltip-placement=\"top\"\\n                      tooltip=\"{{ task.created | camDate:\\'long\\' }}\"\\n                      am-time-ago=\"task.created\">{{ task.created }}</span>\\n              </li>\\n\\n              <li class=\"followup-date\"\\n                  ng-if=\"!!task.followUp\"\\n                  ng-class=\"{overdue: task.followUp && (task.followUp < now) }\">\\n                <span tooltip-placement=\"top\"\\n                      tooltip=\"{{ \\'FOLLOW_UP_DATE\\' | translate }}\"\\n                      class=\"glyphicon glyphicon-calendar\"></span>\\n                <span tooltip-placement=\"top\"\\n                      tooltip=\"{{ task.followUp | camDate:\\'long\\' }}\"\\n                      am-time-ago=\"task.followUp\">{{ task.followUp }}</span>\\n              </li>\\n\\n              <li class=\"due-date\"\\n                  ng-if=\"!!task.due\"\\n                  ng-class=\"{overdue: task.due && (task.due < now) }\">\\n                <span tooltip-placement=\"top\"\\n                      tooltip=\"{{ \\'DUE_DATE\\' | translate }}\"\\n                      class=\"glyphicon glyphicon-bell\"></span>\\n                <span tooltip-placement=\"top\"\\n                      tooltip=\"{{ task.due | camDate:\\'long\\' }}\"\\n                      am-time-ago=\"task.due\">{{ task.due }}</span>\\n              </li>\\n            </ul>\\n\\n            <ul class=\"col-sm-12 col-md-6 actors list-inline\"\\n                ng-if=\"!!task.assignee\">\\n              <li class=\"assignee\">\\n                <span tooltip-placement=\"top\"\\n                      tooltip=\"{{ \\'ASSIGNEE\\' | translate }}\"\\n                      class=\"glyphicon glyphicon-user\"></span>\\n                <span ng-if=\"assignees[task.assignee] && ( assignees[task.assignee].firstName || assignees[task.assignee].lastName )\">\\n                  <span tooltip-placement=\"top\"\\n                        tooltip=\"{{ assignees[task.assignee].firstName }} {{ assignees[task.assignee].lastName }} ({{ task.assignee }})\">\\n                    {{ assignees[task.assignee].firstName }} {{ assignees[task.assignee].lastName }}\\n                  </span>\\n                </span>\\n                <span ng-if=\"!(assignees[task.assignee] && ( assignees[task.assignee].firstName || assignees[task.assignee].lastName ))\">\\n                  <span tooltip-placement=\"top\"\\n                        tooltip=\"{{ task.assignee }}\">\\n                    {{ task.assignee }}\\n                  </span>\\n                </span>\\n              </li>\\n            </ul>\\n          </div>\\n\\n          <div cam-tasklist-variables\\n               filter-properties=\"filterProperties\"\\n               variables=\"task._embedded.variable\"\\n               class=\"row variables\" />\\n       </div>\\n      </li>\\n    </ol>\\n  </div>\\n</div>\\n\\n<pagination ng-show=\"state.$loaded && totalItems > pageSize\"\\n            total-items=\"totalItems\"\\n            items-per-page=\"pageSize\"\\n            max-size=\"5\"\\n            class=\"pagination-sm\"\\n            boundary-links=\"true\"\\n            ng-model=\"pageNum\"\\n            ng-change=\"pageChange()\"\\n            next-text=\"&rsaquo;\"\\n            last-text=\"&raquo;\"\\n            previous-text=\"&lsaquo;\"\\n            first-text=\"&laquo;\"></pagination>\\n';});\n\n","define('scripts/tasklist/directives/cam-tasklist-tasks',[\n  'angular',\n  'moment',\n  'text!./cam-tasklist-tasks.html'\n], function(\n  angular,\n  moment,\n  template\n) {\n  'use strict';\n  var $ = angular.element;\n\n  return [function(){\n\n    return {\n\n      restrict: 'A',\n      scope: {\n        tasklistData: '='\n      },\n\n      template: template,\n\n      controller: [\n        '$scope',\n        '$location',\n        'search',\n        '$timeout',\n        '$element',\n      function(\n        $scope,\n        $location,\n        search,\n        $timeout,\n        $element\n      ) {\n\n        function updateSilently(params) {\n          search.updateSilently(params);\n        }\n\n        var forceFocus = false;\n\n        $scope.pageNum = 1;\n        $scope.pageSize = null;\n        $scope.totalItems = 0;\n        $scope.now = (new Date()).toJSON();\n\n        $scope.filterProperties = null;\n\n        var tasksData = $scope.tasklistData.newChild($scope);\n\n        $scope.query = {};\n\n        $scope.assignees = {};\n        var parseAssignees = function(assigneeList) {\n          for(var i = 0; i < assigneeList.length; i++) {\n            $scope.assignees[assigneeList[i].id] = assigneeList[i];\n          }\n        };\n\n        /**\n         * observe the list of tasks\n         */\n        $scope.state = tasksData.observe('taskList', function (taskList) {\n          $scope.totalItems = taskList.count;\n          $scope.tasks = taskList._embedded.task;\n          if(taskList._embedded.assignee) {\n            parseAssignees(taskList._embedded.assignee);\n          }\n          if(forceFocus) {\n            $scope.focus(null, $scope.tasks[forceFocus === 'first' ? 0 : $scope.pageSize - 1]);\n            $timeout(function(){\n              $element\n                .find('div[ng-keydown]')\n                .trigger('focus')\n                  .find('li.active')[0]\n                  .scrollIntoView(false);\n            }, 0);\n            forceFocus = false;\n          }\n        });\n\n        /**\n         * observe the task list query\n         */\n        tasksData.observe('taskListQuery', function(taskListQuery) {\n          if (taskListQuery) {\n            // parse pagination properties from query\n            $scope.query = angular.copy(taskListQuery);\n            $scope.pageSize = $scope.query.maxResults;\n            // Sachbearbeiter starts counting at '1'\n            $scope.pageNum = ($scope.query.firstResult / $scope.pageSize) + 1;\n          }\n        });\n\n        tasksData.observe('taskId', function(taskId) {\n          $scope.currentTaskId = taskId.taskId;\n        });\n\n        /**\n         * Observes the properties of the current filter.\n         * Used to retrieve information about variables displayed on a task.\n         */\n        tasksData.observe(['currentFilter', function(currentFilter) {\n          if (currentFilter) {\n            $scope.filterProperties = currentFilter !== null ? currentFilter.properties : null;\n          }\n        }]);\n\n        $scope.focus = function ($event, task) {\n          if ($event) {\n            $event.preventDefault();\n          }\n\n          var taskId = task.id;\n          tasksData.set('taskId', { 'taskId' : taskId });\n          $scope.currentTaskId = taskId;\n\n          var searchParams = $location.search() || {};\n          searchParams.task = taskId;\n          updateSilently(searchParams);\n        };\n\n        var selectNextTask = function() {\n          for(var i = 0; i < $scope.tasks.length - 1; i++) {\n            if($scope.tasks[i].id === $scope.currentTaskId) {\n              return $scope.focus(null, $scope.tasks[i+1]);\n            }\n          }\n          if($scope.pageNum < Math.ceil($scope.totalItems / $scope.pageSize)) {\n            $scope.pageNum++;\n            forceFocus = 'first';\n            $scope.pageChange();\n          }\n        };\n\n        var selectPreviousTask = function() {\n          for(var i = 1; i < $scope.tasks.length; i++) {\n            if($scope.tasks[i].id === $scope.currentTaskId) {\n              return $scope.focus(null, $scope.tasks[i-1]);\n            }\n          }\n          if($scope.pageNum > 1) {\n            $scope.pageNum--;\n            forceFocus = 'last';\n            $scope.pageChange();\n          }\n        };\n\n        $scope.handleKeydown = function($event) {\n          if($event.keyCode === 40) {\n            $event.preventDefault();\n            selectNextTask($event);\n          }\n          else if($event.keyCode === 38) {\n            $event.preventDefault();\n            selectPreviousTask();\n          }\n          // wait for angular to update the classes and scroll to the newly selected task\n          $timeout(function(){\n            var $el = $($event.target).find('li.active')[0];\n            if ($el) {\n              $el.scrollIntoView(false);\n            }\n          });\n        };\n\n        $scope.getHrefUrl = function (task) {\n          var href = '#/?task=' + task.id;\n          var detailsTab = $location.search().detailsTab;\n          if (detailsTab) {\n            href = href + '&detailsTab=' + detailsTab;\n          }\n\n          return href;\n        };\n\n        /**\n         * invoked when pagination is changed\n         */\n        $scope.pageChange = function() {\n          // update query\n          updateSilently({\n            page:  $scope.pageNum\n          });\n          tasksData.changed('taskListQuery');\n        };\n\n         $scope.resetPage = function() {\n           updateSilently({\n             page: 1\n           });\n           tasksData.changed('taskListQuery');\n         };\n\n      }]\n    };\n  }];\n});\n\n","define('scripts/tasklist/filters/cam-query-component',[\n  'angular',\n  'moment'\n], function(\n  angular,\n  moment\n) {\n  'use strict';\n\n  return [\n    '$filter',\n  function($filter) {\n\n    var dateRegex = /(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)T(\\d\\d):(\\d\\d):(\\d\\d)(?:.(\\d\\d\\d)| )?$/;\n\n    function isDateValue(value) {\n       return value.match(dateRegex);\n    }\n\n    var camDate = $filter('camDate');\n\n    return function(input) {\n      if(input && isDateValue(input)) {\n        return camDate(input, 'abbr');\n      }\n      return input ? input : '??';\n    };\n\n  }];\n});\n\n","\ndefine('text!scripts/tasklist/plugins/cam-tasklist-search-plugin.html',[],function () { return '<div cam-widget-search\\n     cam-widget-search-valid-searches=\"searches\"\\n     cam-widget-search-translations=\"translations\"\\n     cam-widget-search-types=\"types\"\\n     cam-widget-search-operators=\"operators\"\\n/>\\n';});\n\n","\ndefine('text!scripts/tasklist/plugins/cam-tasklist-search-plugin-config.json',[],function () { return '{\\n  \"types\": [\\n    {\\n      \"id\": {\\n        \"key\": \"processVariables\",\\n        \"value\": \"PROCESS_VARIABLE\"\\n      },\\n      \"extended\": true,\\n      \"allowDates\": true\\n    },\\n    {\\n      \"id\": {\\n        \"key\": \"taskVariables\",\\n        \"value\": \"TASK_VARIABLE\"\\n      },\\n      \"extended\": true,\\n      \"allowDates\": true\\n    },\\n    {\\n      \"id\": {\\n        \"key\": \"caseInstanceVariables\",\\n        \"value\": \"CASE_VARIABLE\"\\n      },\\n      \"extended\": true,\\n      \"allowDates\": true\\n    },\\n    {\\n      \"id\": {\\n        \"key\": \"processInstanceId\",\\n        \"value\": \"PROCESS_INSTANCE_ID\"\\n      },\\n      \"operators\": [\\n        {\\n          \"key\": \"eq\",\\n          \"value\": \"=\"\\n        }\\n      ]\\n    },    {\\n      \"id\": {\\n        \"key\": \"processInstanceBusinessKey\",\\n        \"value\": \"PROCESS_INSTANCE_BUSINESS_KEY\"\\n      },\\n      \"operators\": [\\n        {\\n          \"key\": \"Like\",\\n          \"value\": \"LIKE\"\\n        },{\\n          \"key\": \"eq\",\\n          \"value\": \"=\"\\n        }\\n\\n      ]\\n    },    {\\n      \"id\": {\\n        \"key\": \"processDefinitionId\",\\n        \"value\": \"PROCESS_DEFINITION_ID\"\\n      },\\n      \"operators\": [\\n        {\\n          \"key\": \"eq\",\\n          \"value\": \"=\"\\n        }\\n      ]\\n    },    {\\n      \"id\": {\\n        \"key\": \"processDefinitionKey\",\\n        \"value\": \"PROCESS_DEFINITION_KEY\"\\n      },\\n      \"operators\": [\\n        {\\n          \"key\": \"eq\",\\n          \"value\": \"=\"\\n        }\\n      ]\\n    },    {\\n      \"id\": {\\n        \"key\": \"processDefinitionName\",\\n        \"value\": \"PROCESS_DEFINITION_NAME\"\\n      },\\n      \"operators\": [\\n        {\\n          \"key\": \"Like\",\\n          \"value\": \"LIKE\"\\n        },{\\n          \"key\": \"eq\",\\n          \"value\": \"=\"\\n        }\\n\\n      ]\\n    },    {\\n      \"id\": {\\n        \"key\": \"executionId\",\\n        \"value\": \"EXECUTION_ID\"\\n      },\\n      \"operators\": [\\n        {\\n          \"key\": \"eq\",\\n          \"value\": \"=\"\\n        }\\n      ]\\n    },    {\\n      \"id\": {\\n        \"key\": \"caseInstanceId\",\\n        \"value\": \"CASE_INSTANCE_ID\"\\n      },\\n      \"operators\": [\\n        {\\n          \"key\": \"eq\",\\n          \"value\": \"=\"\\n        }\\n      ]\\n    },    {\\n      \"id\": {\\n        \"key\": \"caseInstanceBusinessKey\",\\n        \"value\": \"CASE_INSTANCE_BUSINESS_KEY\"\\n      },\\n      \"operators\": [\\n        {\\n          \"key\": \"Like\",\\n          \"value\": \"LIKE\"\\n        },{\\n          \"key\": \"eq\",\\n          \"value\": \"=\"\\n        }\\n\\n      ]\\n    },    {\\n      \"id\": {\\n        \"key\": \"caseDefinitionId\",\\n        \"value\": \"CASE_DEFINITION_ID\"\\n      },\\n      \"operators\": [\\n        {\\n          \"key\": \"eq\",\\n          \"value\": \"=\"\\n        }\\n      ]\\n    },    {\\n      \"id\": {\\n        \"key\": \"caseDefinitionKey\",\\n        \"value\": \"CASE_DEFINITION_KEY\"\\n      },\\n      \"operators\": [\\n        {\\n          \"key\": \"eq\",\\n          \"value\": \"=\"\\n        }\\n      ]\\n    },    {\\n      \"id\": {\\n        \"key\": \"caseDefinitionName\",\\n        \"value\": \"CASE_DEFINITION_NAME\"\\n      },\\n      \"operators\": [\\n        {\\n          \"key\": \"Like\",\\n          \"value\": \"LIKE\"\\n        },{\\n          \"key\": \"eq\",\\n          \"value\": \"=\"\\n        }\\n\\n      ]\\n    },    {\\n      \"id\": {\\n        \"key\": \"caseExecutionId\",\\n        \"value\": \"CASE_EXECUTION_ID\"\\n      },\\n      \"operators\": [\\n        {\\n          \"key\": \"eq\",\\n          \"value\": \"=\"\\n        }\\n      ]\\n    },    {\\n      \"id\": {\\n        \"key\": \"assignee\",\\n        \"value\": \"ASSIGNEE\"\\n      },\\n      \"operators\": [\\n        {\\n          \"key\": \"Like\",\\n          \"value\": \"LIKE\"\\n        },{\\n          \"key\": \"eq\",\\n          \"value\": \"=\"\\n        }\\n      ]\\n    },    {\\n      \"id\": {\\n        \"key\": \"owner\",\\n        \"value\": \"OWNER\"\\n      },\\n      \"operators\": [\\n        {\\n          \"key\": \"eq\",\\n          \"value\": \"=\"\\n        }\\n      ]\\n    },    {\\n      \"id\": {\\n        \"key\": \"candidateGroup\",\\n        \"value\": \"CANDIDATE_GROUP\"\\n      },\\n      \"operators\": [\\n        {\\n          \"key\": \"eq\",\\n          \"value\": \"=\"\\n        }\\n      ]\\n    },    {\\n      \"id\": {\\n        \"key\": \"candidateUser\",\\n        \"value\": \"CANDIDATE_USER\"\\n      },\\n      \"operators\": [\\n        {\\n          \"key\": \"eq\",\\n          \"value\": \"=\"\\n        }\\n      ]\\n    },    {\\n      \"id\": {\\n        \"key\": \"involvedUser\",\\n        \"value\": \"INVOLVED_USER\"\\n      },\\n      \"operators\": [\\n        {\\n          \"key\": \"eq\",\\n          \"value\": \"=\"\\n        }\\n      ]\\n    },    {\\n      \"id\": {\\n        \"key\": \"taskDefinitionKey\",\\n        \"value\": \"TASK_DEFINITION_KEY\"\\n      },\\n      \"operators\": [\\n        {\\n          \"key\": \"Like\",\\n          \"value\": \"LIKE\"\\n        },{\\n          \"key\": \"eq\",\\n          \"value\": \"=\"\\n        }\\n      ]\\n    },    {\\n      \"id\": {\\n        \"key\": \"name\",\\n        \"value\": \"NAME\"\\n      },\\n      \"operators\": [\\n        {\\n          \"key\": \"Like\",\\n          \"value\": \"LIKE\"\\n        },{\\n          \"key\": \"eq\",\\n          \"value\": \"=\"\\n        }\\n\\n      ],\\n      \"default\": true\\n    },    {\\n      \"id\": {\\n        \"key\": \"description\",\\n        \"value\": \"DESCRIPTION\"\\n      },\\n      \"operators\": [\\n        {\\n          \"key\": \"Like\",\\n          \"value\": \"LIKE\"\\n        },{\\n          \"key\": \"eq\",\\n          \"value\": \"=\"\\n        }\\n\\n      ]\\n    },    {\\n      \"id\": {\\n        \"key\": \"priority\",\\n        \"value\": \"PRIORITY\"\\n      },\\n      \"operators\": [\\n        {\\n          \"key\": \"eq\",\\n          \"value\": \"=\"\\n        },\\n        {\\n          \"key\": \"max\",\\n          \"value\": \"<=\"\\n        },\\n        {\\n          \"key\": \"min\",\\n          \"value\": \">=\"\\n        }\\n      ]\\n    },    {\\n      \"id\": {\\n        \"key\": \"due\",\\n        \"value\": \"DUE_DATE\"\\n      },\\n      \"operators\": [\\n        {\\n          \"key\": \"Before\",\\n          \"value\": \"BEFORE\"\\n        },\\n        {\\n          \"key\": \"After\",\\n          \"value\": \"AFTER\"\\n        }\\n      ],\\n      \"allowDates\": true,\\n      \"enforceDates\": true\\n    },    {\\n      \"id\": {\\n        \"key\": \"followUp\",\\n        \"value\": \"FOLLOW_UP_DATE\"\\n      },\\n      \"operators\": [\\n        {\\n          \"key\": \"Before\",\\n          \"value\": \"BEFORE\"\\n        },\\n        {\\n          \"key\": \"After\",\\n          \"value\": \"AFTER\"\\n        }\\n      ],\\n      \"allowDates\": true,\\n      \"enforceDates\": true\\n    },    {\\n      \"id\": {\\n        \"key\": \"created\",\\n        \"value\": \"CREATION_DATE\"\\n      },\\n      \"operators\": [\\n        {\\n          \"key\": \"Before\",\\n          \"value\": \"BEFORE\"\\n        },\\n        {\\n          \"key\": \"After\",\\n          \"value\": \"AFTER\"\\n        }\\n      ],\\n      \"allowDates\": true,\\n      \"enforceDates\": true\\n    },    {\\n      \"id\": {\\n        \"key\": \"delegationState\",\\n        \"value\": \"DELEGATION_STATE\"\\n      },\\n      \"operators\": [\\n        {\\n          \"key\": \"eq\",\\n          \"value\": \"=\"\\n        }\\n      ]\\n    }\\n  ],\\n  \"operators\": {\\n    \"date\": [\\n      {\\n        \"key\": \"lteq\",\\n        \"value\": \"BEFORE\"\\n      },\\n      {\\n        \"key\": \"gteq\",\\n        \"value\": \"AFTER\"\\n      }\\n    ],\\n    \"boolean\": [\\n      {\\n        \"key\": \"eq\",\\n        \"value\": \"=\"\\n      },\\n      {\\n        \"key\": \"neq\",\\n        \"value\": \"!=\"\\n      }\\n    ],\\n    \"object\": [\\n      {\\n        \"key\": \"eq\",\\n        \"value\": \"=\"\\n      },\\n      {\\n        \"key\": \"neq\",\\n        \"value\": \"!=\"\\n      }\\n    ],\\n    \"number\": [\\n      {\\n        \"key\": \"eq\",\\n        \"value\": \"=\"\\n      },\\n      {\\n        \"key\": \"neq\",\\n        \"value\": \"!=\"\\n      },\\n      {\\n        \"key\": \"gt\",\\n        \"value\": \">\"\\n      },\\n      {\\n        \"key\": \"gteq\",\\n        \"value\": \">=\"\\n      },\\n      {\\n        \"key\": \"lt\",\\n        \"value\": \"<\"\\n      },\\n      {\\n        \"key\": \"lteq\",\\n        \"value\": \"<=\"\\n      }\\n    ],\\n    \"string\": [\\n      {\\n        \"key\": \"eq\",\\n        \"value\": \"=\"\\n      },\\n      {\\n        \"key\": \"neq\",\\n        \"value\": \"!=\"\\n      },\\n      {\\n        \"key\": \"gt\",\\n        \"value\": \">\"\\n      },\\n      {\\n        \"key\": \"gteq\",\\n        \"value\": \">=\"\\n      },\\n      {\\n        \"key\": \"lt\",\\n        \"value\": \"<\"\\n      },\\n      {\\n        \"key\": \"lteq\",\\n        \"value\": \"<=\"\\n      },\\n      {\\n        \"key\": \"like\",\\n        \"value\": \"like\"\\n      }\\n    ],\\n    \"undefined\": [\\n      {\\n        \"key\": \"eq\",\\n        \"value\": \"=\"\\n      },\\n      {\\n        \"key\": \"neq\",\\n        \"value\": \"!=\"\\n      },\\n      {\\n        \"key\": \"gt\",\\n        \"value\": \">\"\\n      },\\n      {\\n        \"key\": \"gteq\",\\n        \"value\": \">=\"\\n      },\\n      {\\n        \"key\": \"lt\",\\n        \"value\": \"<\"\\n      },\\n      {\\n        \"key\": \"lteq\",\\n        \"value\": \"<=\"\\n      },\\n      {\\n        \"key\": \"like\",\\n        \"value\": \"like\"\\n      }\\n    ]\\n  },\\n  \"tooltips\": {\\n    \"inputPlaceholder\": \"SEARCH_PLACEHOLDER\",\\n    \"invalid\": \"INVALID_SEARCH\",\\n    \"deleteSearch\": \"DELETE_SEARCH\",\\n    \"type\": \"TYPE\",\\n    \"name\": \"PROPERTY\",\\n    \"operator\": \"OPERATOR\",\\n    \"value\": \"VALUE\"\\n  }\\n}\\n';});\n\n","define('scripts/tasklist/plugins/cam-tasklist-search-plugin',[\n  'angular',\n  'text!./cam-tasklist-search-plugin.html',\n  'text!./cam-tasklist-search-plugin-config.json'\n], function(\n  angular,\n  template,\n  searchConfigJSON\n) {\n  'use strict';\n\n  var expressionsRegex = /^[\\s]*(\\#|\\$)\\{/;\n\n  var searchConfig = JSON.parse(searchConfigJSON);\n\n  var parseValue = function(value) {\n    if(!isNaN(value) && value.trim() !== '') {\n      // value must be transformed to number\n      return +value;\n    }\n    if(value === 'true') {\n      return true;\n    }\n    if(value === 'false') {\n      return false;\n    }\n    if(value === 'NULL') {\n      return null;\n    }\n    if(value.indexOf('\\'') === 0 && value.lastIndexOf('\\'') === value.length - 1) {\n      return value.substr(1, value.length - 2);\n    }\n    return value;\n  };\n\n  var sanitizeValue = function(value, operator) {\n    if(operator === 'Like' || operator === 'like') {\n      return '%'+value+'%';\n    }\n    return value;\n  };\n\n  var sanitizeProperty = function(search, type, operator, value) {\n    var out = type;\n    if(['Like', 'Before', 'After'].indexOf(operator) !== -1) {\n      out += operator;\n    }\n    if(expressionsRegex.test(value) &&\n       ['assignee', 'owner', 'candidateGroup', 'candidateUser', 'involvedUser'].indexOf(type) !== -1) {\n      out += 'Expression';\n    }\n    return out;\n  };\n\n  var Controller = [\n   '$scope',\n   '$translate',\n  function (\n    $scope,\n    $translate\n  ) {\n\n    $scope.searches = [];\n    $scope.translations = {};\n\n    angular.forEach(searchConfig.tooltips, function(value, key) {\n      $scope.translations[key] = $translate.instant(value);\n    });\n\n    $scope.types = searchConfig.types.map(function(el) {\n      el.id.value = $translate.instant(el.id.value);\n      if(el.operators) {\n        el.operators = el.operators.map(function(op) {\n          op.value = $translate.instant(op.value);\n          return op;\n        });\n      }\n      return el;\n    });\n\n    $scope.operators = searchConfig.operators;\n    angular.forEach($scope.operators.date, function(el) {\n      el.value = $translate.instant(el.value);\n    });\n\n    var searchData = $scope.tasklistData.newChild($scope);\n    $scope.$watch('searches', function() {\n      var query = {};\n\n      query.processVariables = [];\n      query.taskVariables = [];\n      query.caseInstanceVariables = [];\n\n      angular.forEach($scope.searches, function(search) {\n        if(typeof query[search.type.value.key] === 'object') {\n          query[search.type.value.key].push({\n            name: typeof search.name.value === 'object' ? search.name.value.key : search.name.value,\n            operator: search.operator.value.key,\n            value: sanitizeValue(parseValue(search.value.value), search.operator.value.key)\n          });\n        } else {\n          query[sanitizeProperty(search, search.type.value.key, search.operator.value.key, search.value.value)] = sanitizeValue(parseValue(search.value.value), search.operator.value.key);\n        }\n      });\n\n      searchData.set('searchQuery', query);\n    }, true);\n\n    searchData.observe('currentFilter', function(filter) {\n      angular.forEach($scope.types, function(ea) {\n        ea.potentialNames = [];\n        for(var i = 0; i < (filter.properties.variables && filter.properties.variables.length) || 0; i++) {\n          var v = filter.properties.variables[i];\n          ea.potentialNames.push({\n            key: v.name,\n            value: v.label+' ('+v.name+')'\n          });\n        }\n      });\n\n      angular.forEach($scope.searches, function(ea) {\n        ea.potentialNames = $scope.types.filter(function(type) {\n          return type.id.key === ea.type.value.key;\n        })[0].potentialNames;\n      });\n    });\n\n  }];\n\n  var Configuration = function PluginConfiguration(ViewsProvider) {\n\n    ViewsProvider.registerDefaultView('tasklist.list', {\n      id: 'task-search',\n      template: template,\n      controller: Controller,\n      priority: 100\n    });\n  };\n\n  Configuration.$inject = ['ViewsProvider'];\n\n  return Configuration;\n\n});\n\n","define('scripts/tasklist/index',[\n  'angular',\n\n  /* controller */\n  './controller/cam-tasklist-list-ctrl',\n\n  /* directives */\n  './directives/cam-tasklist-sorting-choices',\n  './directives/cam-tasklist-sorting-dropdown',\n  './directives/cam-tasklist-sorting-inputs',\n  './directives/cam-tasklist-tasks',\n\n  /* filters */\n  './filters/cam-query-component',\n\n  /* plugins */\n  './plugins/cam-tasklist-search-plugin'\n\n], function(\n  angular,\n\n  /* controller */\n  camTasklistListCtrl,\n\n  /* directives */\n  camTasklistSortingChoices,\n  camTasklistSortingDropdown,\n  camTasklistSortingInputs,\n  camTasklistTasks,\n\n  /* filters */\n  camQueryComponent,\n\n  /* plugins */\n  camTasklistSearchPlugin\n\n) {\n  'use strict';\n\n  var module = angular.module('cam.tasklist.tasklist', [\n    'ui.bootstrap'\n  ]);\n\n  /* controller */\n  module.controller('camListCtrl', camTasklistListCtrl);\n\n  /* directives */\n  module.directive('camSortingChoices', camTasklistSortingChoices);\n  module.directive('camSortingDropdown', camTasklistSortingDropdown);\n  module.directive('camSortingInputs', camTasklistSortingInputs);\n  module.directive('camTasks', camTasklistTasks);\n\n  /* filters */\n  module.filter('camQueryComponent', camQueryComponent);\n\n  /* plugins */\n  module.config(camTasklistSearchPlugin);\n\n  return module;\n\n});\n\n","\ndefine('text!scripts/task/directives/cam-tasklist-task.html',[],function () { return '<div ng-show=\"!taskState.$loaded\"\\n     class=\"loader\">\\n  <span class=\"animate-spin glyphicon glyphicon-refresh\"></span>\\n  {{ \\'LOADING\\' | translate }}\\n</div>\\n\\n<div ng-show=\"taskState.$loaded\">\\n  <div ng-hide=\"task\">\\n    <div class=\"no-task well\">\\n      <span class=\"glyphicon glyphicon-info-sign\"></span>\\n      {{ \\'SELECT_TASK_IN_LIST\\' | translate }}\\n    </div>\\n  </div>\\n\\n  <section ng-if=\"task\" class=\"task-card\">\\n    <header class=\"row\">\\n      <div class=\"col-xs-12\">\\n        <div class=\"names\">\\n          <h2 class=\"task\">{{ task.name || task.taskDefinitionKey || task.id }}</h2>\\n          <h4 class=\"process-definition\"\\n              ng-if=\"task.processDefinitionId\">\\n            {{ task._embedded.processDefinition[0].name || task._embedded.processDefinition[0].key }}\\n          </h4>\\n          <h4 class=\"case-definition\"\\n              ng-if=\"task.caseDefinitionId\">\\n            {{ task._embedded.caseDefinition[0].name || task._embedded.caseDefinition[0].key }}\\n          </h4>\\n        </div>\\n\\n        <div cam-tasklist-task-meta\\n             task-data=\"taskData\"\\n             error-handler=\"errorHandler\"></div>\\n      </div>\\n    </header>\\n\\n    <div class=\"row tabbed-content\">\\n\\n      <div ng-show=\"taskDetailTabs.length\" class=\"col-xs-12\">\\n        <ul class=\"nav nav-tabs\">\\n          <li ng-class=\"{ active: selectedTaskDetailTab == taskDetailTab }\" ng-repeat=\"taskDetailTab in taskDetailTabs\">\\n            <a href ng-click=\"selectTaskDetailTab(taskDetailTab)\">{{ taskDetailTab.label | translate }}</a>\\n          </li>\\n        </ul>\\n\\n        <div class=\"tab-content\">\\n          <view provider=\"selectedTaskDetailTab\" vars=\"taskVars\" />\\n        </div>\\n\\n      </div>\\n    </div>\\n\\n  </section>\\n\\n</div>\\n\\n\\n';});\n\n","define('scripts/task/directives/cam-tasklist-task',[\n  'angular',\n  'text!./cam-tasklist-task.html',\n  'jquery'\n], function(\n  angular,\n  template,\n  jquery\n) {\n  'use strict';\n\n  var TaskErrorManager = (function() {\n\n    function TaskErrorManager() {\n\n      this.errorProvider = null;\n\n    }\n\n    return TaskErrorManager;\n\n  })();\n\n  return [ function() {\n\n    return {\n      restrict: 'A',\n      scope: {\n        tasklistData: '='\n      },\n\n      template: template,\n\n      controller : [\n        '$scope',\n        '$q',\n        '$location',\n        '$translate',\n        'Notifications',\n        'camAPI',\n        'Views',\n        'search',\n      function(\n        $scope,\n        $q,\n        $location,\n        $translate,\n        Notifications,\n        camAPI,\n        Views,\n        search\n      ) {\n\n        // setup /////////////////////////////////////////////////////////////////////\n\n        var Task = camAPI.resource('task');\n\n        var taskData = $scope.taskData = $scope.tasklistData.newChild($scope);\n\n        // error handling //////////////////////////////////////////////////////////////\n\n        function errorNotification(src, err) {\n          $translate(src).then(function(translated) {\n            Notifications.addError({\n              status: translated,\n              message: (err ? err.message : ''),\n              exclusive: true,\n              scope: $scope\n            });\n          });\n        }\n\n        $scope.errorHandler = function (status, err) {\n          var _status = enhanceErrorMessage(err.message);\n\n          if(_status === 'TASK_NOT_EXIST' || _status === 'INSTANCE_SUSPENDED') {\n            return $translate(_status).then(function(translated) {\n              err.message = translated;\n              errorNotification(status, err);\n              clearTask(true);\n            });\n\n          }\n          else {\n            errorNotification(status, err);\n          }\n\n        };\n\n        function enhanceErrorMessage(msg) {\n          if (msg) {\n            if(msg.indexOf('task is null') !== -1 || msg.indexOf('No matching task') !== -1) {\n              // task does not exist (e.g. completed by someone else)\n              return 'TASK_NOT_EXIST';\n            }\n            else if(msg.indexOf('is suspended') !== -1) {\n              // process instance is suspended\n              return 'INSTANCE_SUSPENDED';\n            }\n          }\n          return msg;\n        }\n\n        function clearTask(updateLocation) {\n\n          if (updateLocation) {\n            var search = $location.search() || {};\n\n            delete search.task;\n            delete search.detailsTab;\n\n            // reseting the location leads that\n            // the taskId will set to null and\n            // the current selected task will\n            // also be set to null, so that the\n            // view gets clear\n            $location.search(angular.copy(search));\n\n          }\n          else {\n            // reset current select taskId to null\n            taskData.set('taskId', { 'taskId' : null });\n          }\n\n          // list of tasks must be reloaded as\n          // well: changed properties on this\n          // task may cause the list to change\n          taskData.changed('taskList');\n        }\n\n        $scope.$watch('taskState.$error', function (err) {\n          if (err) {\n            var src = enhanceErrorMessage(err.message);\n            errorNotification(src, err);\n            // pass false to not reset the search params!\n            // in that case the history works properly.\n            clearTask(false);\n          }\n        });\n\n        // provider ///////////////////////////////////////////////////////////////////\n\n        taskData.provide('assignee', ['task', function(task) {\n          if (task && task._embedded) {\n            if(task._embedded.identityLink) {\n              for(var i = 0; i < task._embedded.identityLink.length; i++) {\n                if(task._embedded.identityLink[i].type === 'assignee') {\n                  if(task._embedded.identityLink[i]._embedded.user) {\n                    return task._embedded.identityLink[i]._embedded.user[0];\n                  } else {\n                    return {id: task._embedded.identityLink[i].userId};\n                  }\n\n                }\n              }\n            }\n          }\n          return null;\n        }]);\n\n        taskData.provide('groups', ['task', function(task) {\n          var groups = [];\n          if (task && task._embedded) {\n            if(task._embedded.identityLink) {\n              for(var i = 0; i < task._embedded.identityLink.length; i++) {\n                if(task._embedded.identityLink[i].type === 'candidate' && task._embedded.identityLink[i].groupId !== null) {\n                  if(task._embedded.identityLink[i]._embedded.group) {\n                    groups.push(task._embedded.identityLink[i]._embedded.group[0]);\n                  } else {\n                    groups.push({id: task._embedded.identityLink[i].groupId});\n                  }\n                }\n              }\n            }\n          }\n          return groups;\n        }]);\n\n        taskData.provide('isAssignee', ['assignee', function(assignee) {\n          return !!assignee && assignee.id === $scope.$root.authentication.name;\n        }]);\n\n        taskData.provide('processDefinition', ['task', function (task) {\n          if (!task || !task._embedded || !task._embedded.processDefinition) {\n            return null;\n          }\n          return task._embedded.processDefinition[0];\n        }]);\n\n        taskData.provide('caseDefinition', ['task', function (task) {\n          if (!task || !task._embedded || !task._embedded.caseDefinition) {\n            return null;\n          }\n          return task._embedded.caseDefinition[0];\n        }]);\n\n        // observer ////////////////////////////////////////////////////////////////////////\n\n        /**\n         * expose current task as scope variable\n         */\n        $scope.taskState = taskData.observe('task', function(task) {\n          $scope.task = task;\n        });\n\n        taskData.observe('isAssignee', function (isAssignee) {\n          $scope.isAssignee = isAssignee;\n        });\n\n        // plugins //////////////////////////////////////////////////////////////\n\n        $scope.taskVars = { read: [ 'task', 'taskData', 'errorHandler' ] };\n        $scope.taskDetailTabs = Views.getProviders({ component: 'tasklist.task.detail' });\n\n        $scope.selectedTaskDetailTab = $scope.taskDetailTabs[0];\n\n        $scope.selectTaskDetailTab = function(tab) {\n          $scope.selectedTaskDetailTab = tab;\n\n          search.updateSilently({\n            detailsTab: tab.id\n          });\n        };\n\n        function setDefaultTaskDetailTab(tabs) {\n          var selectedTabId = search().detailsTab;\n\n          if (!tabs || !tabs.length) {\n            return;\n          }\n\n          if (selectedTabId) {\n            var provider = Views.getProvider({ component: 'tasklist.task.detail', id: selectedTabId });\n            if (provider && tabs.indexOf(provider) != -1) {\n              $scope.selectedTaskDetailTab = provider;\n              return;\n            }\n          }\n\n          search.updateSilently({\n            detailsTab: null\n          });\n\n          $scope.selectedTaskDetailTab = tabs[0];\n        }\n\n        setDefaultTaskDetailTab($scope.taskDetailTabs);\n\n        $scope.$on('$routeChanged', function() {\n          setDefaultTaskDetailTab($scope.taskDetailTabs);\n        });\n\n      }]\n    };\n  }];\n});\n\n\n","\ndefine('text!scripts/task/directives/cam-tasklist-task-meta.html',[],function () { return '<ul class=\"meta list-inline dates times\">\\n\\n  <li>\\n\\n    <span cam-widget-inline-field\\n          class=\"followup-date\"\\n          ng-class=\"{overdue: task.followUp && (task.followUp < now) }\"\\n          type=\"datetime\"\\n          change=\"saveFollowUpDate(this)\"\\n          on-start-editing=\"startEditingFollowUpDate(this)\"\\n          on-cancel-editing=\"cancelEditingFollowUpDate(this)\"\\n          value=\"task.followUp\">\\n      <span tooltip-placement=\"top\"\\n            tooltip=\"{{ \\'FOLLOW_UP_DATE\\' | translate }}\"\\n            class=\"glyphicon glyphicon-calendar\"></span>\\n\\n      <span ng-if=\"task.followUp\"\\n            tooltip-placement=\"top\"\\n            tooltip=\"{{ task.followUp | camDate:\\'long\\' }}\"\\n            am-time-ago=\"task.followUp\">{{ task.followUp }}</span>\\n      <a href\\n         ng-if=\"!task.followUp\"\\n         translate=\"SET_FOLLOW_UP_DATE\">Set follow up</a>\\n    </span>\\n\\n    <a href\\n       ng-if=\"task.followUp && !editingState.followUp\"\\n       tooltip-placement=\"top\"\\n       tooltip=\"{{ \\'RESET_FOLLOW_UP_DATE\\' | translate }}\"\\n       ng-click=\"resetFollowUpDate()\"\\n       class=\"reset-follow-up-date glyphicon glyphicon-remove\">\\n    </a>\\n\\n  </li>\\n\\n  <li>\\n\\n    <span cam-widget-inline-field\\n          class=\"due-date\"\\n          ng-class=\"{overdue: task.due && (task.due < now) }\"\\n          type=\"datetime\"\\n          change=\"saveDueDate(this)\"\\n          on-start-editing=\"startEditingDueDate(this)\"\\n          on-cancel-editing=\"cancelEditingDueDate(this)\"\\n          value=\"task.due\">\\n\\n      <span tooltip-placement=\"top\"\\n            tooltip=\"{{ \\'DUE_DATE\\' | translate }}\"\\n            class=\"glyphicon glyphicon-bell\"></span>\\n\\n      <span ng-if=\"task.due\"\\n            tooltip-placement=\"top\"\\n            tooltip=\"{{ task.due | camDate:\\'long\\' }}\"\\n            am-time-ago=\"task.due\">{{ task.due }}</span>\\n\\n      <a href\\n         ng-if=\"!task.due\"\\n         translate=\"SET_DUE_DATE\">Set due date</a>\\n    </span>\\n\\n    <a href\\n       ng-if=\"task.due && !editingState.due\"\\n       tooltip-placement=\"top\"\\n       tooltip=\"{{ \\'RESET_DUE_DATE\\' | translate }}\"\\n       ng-click=\"resetDueDate()\"\\n       class=\"reset-due-date glyphicon glyphicon-remove\">\\n    </a>\\n  </li>\\n</ul>\\n\\n\\n<ul class=\"meta list-inline actors\">\\n  <li class=\"groups\">\\n    <span ng-click=\"editGroups()\">\\n      <span tooltip-placement=\"top\"\\n            tooltip=\"{{ \\'GROUPS\\' | translate }}\"\\n            class=\"glyphicon glyphicon-th\"></span>\\n\\n      <a href ng-if=\"groupNames.length > 0\">\\n        {{ groupNames.join(\\', \\') }}\\n      </a>\\n\\n      <a href ng-if=\"groupNames.length === 0\"\\n         translate=\"ADD_GROUPS\">\\n        Add groups\\n      </a>\\n    </span>\\n  </li>\\n\\n  <li class=\"assignee set-value\"\\n      ng-if=\"!task.assignee\">\\n    <span tooltip-placement=\"top\"\\n          tooltip=\"{{ \\'ASSIGNEE\\' | translate }}\"\\n          class=\"glyphicon glyphicon-user\"></span>\\n\\n    <a href\\n       class=\"claim\"\\n       ng-click=\"claim()\"\\n       translate=\"CLAIM_TASK\">Claim</a>\\n  </li>\\n\\n  <li class=\"assignee\"\\n      ng-if=\"task.assignee\">\\n    <span cam-widget-inline-field\\n          class=\"set-value\"\\n          type=\"text\"\\n          validate=\"validateUser(this)\"\\n          change=\"assign(this)\"\\n          on-start-editing=\"startEditingAssignee(this)\"\\n          on-cancel-editing=\"cancelEditingAssignee(this)\"\\n          value=\"assignee.id\">\\n\\n      <span tooltip-placement=\"top\"\\n            tooltip=\"{{ \\'ASSIGNEE\\' | translate }}\"\\n            class=\"glyphicon glyphicon-user\"></span>\\n      <span ng-if=\"assignee.firstName || assignee.lastName\">{{ assignee.firstName }} {{ assignee.lastName }}</span>\\n      <span ng-if=\"!(assignee.firstName || assignee.lastName)\">{{ assignee.id }}</span>\\n    </span>\\n\\n    <a href\\n       ng-if=\"isAssignee && !editingState.assignee\"\\n       tooltip-placement=\"top\"\\n       tooltip=\"{{ \\'UNCLAIM_TASK\\' | translate }}\"\\n       ng-click=\"unclaim()\"\\n       class=\"unclaim glyphicon glyphicon-remove\">\\n    </a>\\n\\n    <a href\\n       ng-if=\"!isAssignee && !editingState.assignee\"\\n       tooltip-placement=\"top\"\\n       tooltip=\"{{ \\'RESET_TASK_ASSIGNEE\\' | translate }}\"\\n       ng-click=\"resetAssignee()\"\\n       class=\"reset-assignee glyphicon glyphicon-remove\">\\n    </a>\\n\\n  </li>\\n\\n</ul>\\n';});\n\n","\ndefine('text!scripts/task/modals/cam-tasklist-groups-modal.html',[],function () { return '<div class=\"modal-header\">\\n  <h3 class=\"modal-title\">\\n    {{ \\'MANAGE_GROUPS\\' | translate }}\\n  </h3>\\n</div>\\n\\n<div class=\"modal-body groups-modal\">\\n\\n  <div notifications-panel></div>\\n\\n  <form name=\"taskGroupForm\"\\n        class=\"form-horizontal\"\\n        ng-controller=\"camTaskGroupsCtrl\"\\n        ng-hide=\"!modalGroupsState.$loaded || modalGroupsState.$error\"\\n        ng-submit=\"(isValid() && addGroup())\">\\n\\n  <div ng-show=\"!modalGroupsState.$loaded && !modalGroupsState.$error\"\\n       class=\"loader\">\\n    <span class=\"animate-spin glyphicon glyphicon-refresh\"></span>\\n    {{ \\'LOADING\\' | translate }}\\n  </div>\\n\\n  <div class=\"text-help\">\\n    <span class=\"glyphicon glyphicon-info-sign\"></span>\\n    {{ \\'USE_ADD_GROUP\\' | translate }}\\n  </div>\\n\\n    <div class=\"form-group\">\\n      <div class=\"col-xs-4 align-right\">\\n        <button class=\"btn btn-link\"\\n                ng-click=\"addGroup()\"\\n                type=\"button\"\\n                ng-disabled=\"!isValid()\">\\n          <span class=\"hidden-sm hidden-xs\">{{ \\'GROUP_ADD\\' | translate }}</span>\\n          <span class=\"glyphicon glyphicon-plus-sign\"></span>\\n        </button>\\n      </div>\\n\\n      <div class=\"col-xs-8\"\\n           ng-class=\"{\\'has-error\\': newGroup.error }\">\\n        <input type=\"text\"\\n               name=\"newGroup\"\\n               required\\n               placeholder=\"{{ \\'GROUP_ID\\' | translate }}\"\\n               class=\"form-control\"\\n               ng-model=\"newGroup.groupId\"\\n               ng-change=\"validateNewGroup()\"/>\\n\\n        <span ng-if=\"newGroup.error\"\\n              class=\"help-block\">\\n          {{ newGroup.error.message | translate }}\\n        </span>\\n      </div>\\n    </div>\\n\\n    <div class=\"form-group values\"\\n         ng-repeat=\"group in _groups\">\\n      <div class=\"col-xs-4 row-action\">\\n        <a href\\n           ng-click=\"removeGroup(group, $index)\"\\n           class=\"glyphicon glyphicon-minus-sign\"></a>\\n      </div>\\n\\n      <div class=\"col-xs-8 value\">\\n        {{ group.id }}\\n      </div>\\n    </div>\\n\\n  </form>\\n\\n</div>\\n\\n<div class=\"modal-footer\">\\n  <div class=\"row row-action\">\\n    <div class=\"col-xs-12\">\\n      <button class=\"btn btn-xs btn-link\"\\n              type=\"button\"\\n              ng-click=\"$dismiss()\"\\n              translate=\"CLOSE\">Close</button>\\n    </div>\\n  </div>\\n</div>\\n';});\n\n","define('scripts/task/directives/cam-tasklist-task-meta',[\n  'angular',\n  'text!./cam-tasklist-task-meta.html',\n  'text!../modals/cam-tasklist-groups-modal.html',\n], function(\n  angular,\n  template,\n  editGroupsFormTemplate\n) {\n  'use strict';\n\n  var $ = angular.element;\n\n  return [\n    '$modal',\n    'camAPI',\n  function(\n    $modal,\n    camAPI\n  ) {\n    var Task = camAPI.resource('task');\n\n    return {\n      scope: {\n        taskData: '=',\n        successHandler: '&',\n        errorHandler: '&'\n      },\n\n      template: template,\n\n      controller: [\n        '$scope',\n      function(\n        $scope\n      ){\n\n        var taskMetaData = $scope.taskData.newChild($scope);\n\n        var successHandler = $scope.successHandler() || function () {};\n        var errorHandler = $scope.errorHandler() || function () {};\n\n        /**\n         * observe task changes\n         */\n        taskMetaData.observe('task', function(task) {\n          $scope.task = angular.copy(task);\n        });\n\n        taskMetaData.observe('assignee', function(assignee) {\n          $scope.assignee = angular.copy(assignee);\n        });\n\n\n        /**\n         * observe task changes\n         */\n        taskMetaData.observe('isAssignee', function(isAssignee) {\n          $scope.isAssignee = isAssignee;\n        });\n\n        taskMetaData.observe('groups', function(groups) {\n          groups = groups || [];\n          var groupNames = [];\n          for (var i = 0, group; !!(group = groups[i]); i++) {\n            groupNames.push(group.name || group.id);\n          }\n          $scope.groupNames = groupNames;\n        });\n\n        /**\n         * reload data after the task has been updated\n         */\n        function reload() {\n\n          // we always refresh the state from the backend after we made a change.\n          // this has advantages:\n          // - limits the risk that our copy gets corrupted\n          // - we see changes made by other users faster\n          taskMetaData.changed('task');\n\n          // list of tasks must be reloaded as well:\n          // changed properties on this task may cause the list to change\n          taskMetaData.changed('taskList');\n        }\n\n        function saveDate(propName) {\n          return function(inlineFieldScope) {\n            setEditingState(propName, false);\n            $scope.task[propName] = inlineFieldScope.varValue;\n\n            updateTask();\n          };\n        }\n\n        function resetProperty(propName) {\n          return function() {\n            $scope.task[propName] = null;\n            updateTask();\n          };\n        }\n\n        function updateTask() {\n          var toSend = $scope.task;\n\n          delete toSend._embedded;\n          delete toSend._links;\n\n          Task.update(toSend, function(err, result) {\n            reload();\n            if (err) {\n              return errorHandler('TASK_UPDATE_ERROR', err);\n            }\n          });\n        }\n\n        function notifyOnStartEditing(property) {\n          return function (inlineFieldScope) {\n            setEditingState(property, true);\n          };\n        }\n\n        function notifyOnCancelEditing(property) {\n          return function (inlineFieldScope) {\n            setEditingState(property, false);\n          };\n        }\n\n        function setEditingState(property, state) {\n          $scope.editingState[property] = state;\n        }\n\n        $scope.saveFollowUpDate = saveDate('followUp');\n        $scope.resetFollowUpDate = resetProperty('followUp');\n        $scope.startEditingFollowUpDate = notifyOnStartEditing('followUp');\n        $scope.cancelEditingFollowUpDate = notifyOnCancelEditing('followUp');\n\n        $scope.saveDueDate = saveDate('due');\n        $scope.resetDueDate = resetProperty('due');\n        $scope.startEditingDueDate = notifyOnStartEditing('due');\n        $scope.cancelEditingDueDate = notifyOnCancelEditing('due');\n\n        // initially set each control to false\n        $scope.editingState = {\n          followUp: false,\n          due: false,\n          assignee: false\n        };\n\n        $scope.now = (new Date()).toJSON();\n\n        var notifications = {\n\n          assigned: {\n            error: 'ASSIGNED_ERROR'\n          },\n\n          assigneeReseted: {\n            error: 'ASSIGNEE_RESET_ERROR'\n          },\n\n          claimed: {\n            error: 'CLAIM_ERROR'\n          },\n\n          unclaimed: {\n            error: 'UNCLAIM_ERROR'\n          }\n\n        };\n\n        $scope.startEditingAssignee = notifyOnStartEditing('assignee');\n        $scope.cancelEditingAssignee = notifyOnCancelEditing('assignee');\n\n        $scope.assign = function(inlineFieldScope) {\n          setEditingState('assignee', false);\n\n          var newAssignee = inlineFieldScope.varValue.trim();\n\n          if (!newAssignee) {\n\n            if ($scope.isAssignee) {\n              unclaim();\n            }\n            else {\n              resetAssignee();\n            }\n\n          }\n          else {\n            setAssignee(newAssignee);\n          }\n\n        };\n\n        var claim = $scope.claim = function() {\n          var assignee = $scope.$root.authentication.name;\n          Task.claim($scope.task.id, assignee, notify('claimed'));\n        };\n\n        var unclaim = $scope.unclaim = function() {\n          Task.unclaim($scope.task.id, notify('unclaimed'));\n        };\n\n        var setAssignee = $scope.setAssignee = function(newAssignee) {\n          Task.assignee($scope.task.id, newAssignee, notify('assigned'));\n        };\n\n        var resetAssignee = $scope.resetAssignee = function() {\n          Task.assignee($scope.task.id, null, notify('assigneeReseted'));\n        };\n\n        $scope.editGroups = function() {\n          var groupsChanged;\n\n          $modal.open({\n            // creates a child scope of a provided scope\n            scope: $scope,\n            //TODO: extract filter edit modal class to super style sheet\n            windowClass: 'filter-edit-modal',\n            // size: 'md',\n            template: editGroupsFormTemplate,\n            controller: 'camGroupEditModalCtrl',\n            resolve: {\n              taskMetaData: function() { return taskMetaData; },\n              groupsChanged: function() {\n                return function () {\n                  groupsChanged = true;\n                };\n              },\n              errorHandler: function () { return $scope.errorHandler; }\n            }\n          }).result.then(dialogClosed, dialogClosed);\n\n          function dialogClosed() {\n            if (groupsChanged) {\n              taskMetaData.set('taskId', { taskId: $scope.task.id });\n              taskMetaData.changed('taskList');\n            }\n          }\n\n        };\n\n        function notify(action) {\n          var messages = notifications[action];\n\n          return function (err) {\n            if (err) {\n              return errorHandler(messages.error, err);\n            }\n\n            reload();\n          };\n        }\n\n      }\n    ]};\n  }];\n});\n\n","define('scripts/task/controller/cam-tasklist-task-action-ctrl',[\n], function(\n) {\n  'use strict';\n\n  return [\n    '$scope',\n    'Views',\n    'CamForm',\n  function(\n    $scope,\n    Views,\n    CamForm\n  ) {\n\n    var taskData = $scope.taskData = $scope.tasklistData.newChild($scope);\n\n    /**\n     * expose current task as scope variable\n     */\n    taskData.observe('task', function(task) {\n      $scope.task = task;\n    });\n\n    /**\n     * remove outdated saved forms\n     */\n    CamForm.cleanLocalStorage(Date.now() - 7 * 24 * 60 * 60 * 1000);\n\n    // plugins //////////////////////////////////////////////////////////////\n\n    $scope.taskVars = { read: [ 'task', 'taskData' ] };\n    $scope.taskActions = Views.getProviders({ component: 'tasklist.task.action' });\n\n  }];\n\n});\n\n","define('scripts/task/controller/cam-tasklist-task-groups-ctrl',[\n  'angular'\n], function(\n  angular\n) {\n  'use strict';\n\n  var GROUP_TYPE = 'candidate';\n\n  return [\n    '$scope',\n    '$translate',\n    '$q',\n    'Notifications',\n    'camAPI',\n  function(\n    $scope,\n    $translate,\n    $q,\n    Notifications,\n    camAPI\n  ) {\n    // setup //////////////////////////////////////////////\n\n    var Task = camAPI.resource('task');\n\n    var task = null;\n\n    var NEW_GROUP = { groupId : null, type: GROUP_TYPE };\n\n    var newGroup = $scope.newGroup =  angular.copy(NEW_GROUP);\n\n    var taskGroupsData = $scope.taskGroupsData;\n\n    var groupsChanged = $scope.groupsChanged;\n\n    var errorHandler = $scope.errorHandler();\n\n    $scope._groups = [];\n\n    var messages = {};\n    $translate([\n      'FAILURE',\n      'INIT_GROUPS_FAILURE',\n      'ADD_GROUP_FAILED',\n      'REMOVE_GROUP_FAILED'\n    ])\n    .then(function(result) {\n      messages.failure            = result.FAILURE;\n      messages.initGroupsFailed   = result.INIT_GROUPS_FAILURE;\n      messages.addGroupFailed     = result.ADD_GROUP_FAILED;\n      messages.removeGroupFailed  = result.REMOVE_GROUP_FAILED;\n    });\n\n    // observe ////////////////////////////////////////////////////////\n\n    $scope.modalGroupsState = taskGroupsData.observe('groups', function(groups) {\n      $scope._groups = angular.copy(groups) || [];\n      $scope.validateNewGroup();\n    });\n\n    taskGroupsData.observe('task', function (_task) {\n      task = _task;\n    });\n\n    // actions ///////////////////////////////////////////////////////\n\n    $scope.$watch('modalGroupsState.$error', function (error){\n      if (error) {\n        Notifications.addError({\n          status: messages.failure,\n          message: messages.initGroupsFailed,\n          exclusive: true,\n          scope: $scope\n        });\n      }\n    });\n\n    $scope.addGroup = function () {\n      var taskId = task.id;\n\n      groupsChanged();\n\n      delete newGroup.error;\n      Task.identityLinksAdd(taskId, newGroup, function(err) {\n        if (err) {\n          return errorHandler('TASK_UPDATE_ERROR', err);\n        }\n\n        $scope.taskGroupForm.$setPristine();\n\n        $scope._groups.push({id: newGroup.groupId});\n\n        newGroup = $scope.newGroup = angular.copy(NEW_GROUP);\n\n      });\n    };\n\n    $scope.removeGroup = function(group, index) {\n      var taskId = task.id;\n\n      groupsChanged();\n\n      Task.identityLinksDelete(taskId, {type: GROUP_TYPE, groupId: group.id}, function(err) {\n        if (err) {\n          return Notifications.addError({\n            status: messages.failure,\n            message: messages.removeGroupFailed,\n            exclusive: true,\n            scope: $scope\n          });\n        }\n\n        $scope._groups.splice(index, 1);\n      });\n    };\n\n    $scope.validateNewGroup = function () {\n      delete newGroup.error;\n\n      if ($scope.taskGroupForm && $scope.taskGroupForm.newGroup) {\n\n        $scope.taskGroupForm.newGroup.$setValidity('duplicate', true);\n\n        var newGroupId = newGroup.groupId;\n\n        if (newGroupId) {\n          for(var i = 0, currentGroup; !!(currentGroup = $scope._groups[i]); i++) {\n            if (newGroupId === currentGroup.id) {\n              newGroup.error = { message: 'DUPLICATE_GROUP' };\n\n              $scope.taskGroupForm.newGroup.$setValidity('duplicate', false);\n            }\n          }\n        }\n      }\n\n    };\n\n    $scope.isValid = function () {\n      if (!newGroup.groupId || newGroup.error) {\n        return false;\n      }\n\n      return true;\n    };\n\n  }];\n\n});\n\n","\ndefine('text!scripts/task/plugins/detail/cam-tasklist-task-detail-form-plugin.html',[],function () { return '<div class=\"form-pane\">\\n\\n  <div ng-if=\"taskFormState.$error\" class=\"alert alert-danger\" role=\"alert\">\\n    <span class=\"glyphicon glyphicon-exclamation-sign\"></span>\\n    <strong class=\"status\">{{ \\'FORM_FAILURE\\' | translate }}</strong>\\n    <span class=\"message\">{{ taskFormState.$error.message }}</span>\\n  </div>\\n\\n  <div ng-if=\"taskFormState.$loaded && !taskFormState.$error\"\\n       cam-tasklist-form\\n       tasklist-form=\"taskForm\"\\n       on-form-completion-callback=\"completionCallback\"\\n       options=\"options\"\\n       params=\"params\" >\\n  </div>\\n\\n</div>';});\n\n","define('scripts/task/plugins/detail/cam-tasklist-task-detail-form-plugin',[\n  'angular',\n  'text!./cam-tasklist-task-detail-form-plugin.html',\n], function(\n  angular,\n  template\n) {\n  'use strict';\n\n  var Controller = [\n   '$scope',\n   '$location',\n   '$q',\n   'camAPI',\n   'assignNotification',\n  function (\n    $scope,\n    $location,\n    $q,\n    camAPI,\n    assignNotification\n  ) {\n\n    // setup ///////////////////////////////////////////////////////////\n\n    var Task = camAPI.resource('task');\n\n    var errorHandler = $scope.errorHandler;\n\n    var DEFAULT_OPTIONS = $scope.options = {\n      hideCompleteButton: false,\n      hideLoadVariablesButton: false,\n      disableCompleteButton: false,\n      disableForm: false,\n      disableAddVariableButton: false\n    };\n\n    var taskFormData = $scope.taskData.newChild($scope);\n\n    taskFormData.provide('taskForm', ['task', function(task) {\n      var deferred = $q.defer();\n\n      if (!task || !task.id) {\n        return deferred.resolve(null);\n      }\n\n      Task.form(task.id, function(err, res) {\n\n        if(err) {\n          deferred.reject(err);\n        }\n        else {\n          deferred.resolve(res);\n        }\n      });\n\n      return deferred.promise;\n    }]);\n\n    // observer ///////////////////////////////////////////////////////////\n\n    taskFormData.observe(['task', 'isAssignee', function(task, isAssignee) {\n      $scope.options = angular.copy(DEFAULT_OPTIONS);\n\n      if (task && task.id) {\n        $scope.params = { taskId : task.id };\n      }\n      else {\n        $scope.params = null;\n      }\n\n      $scope.options.disableCompleteButton = !isAssignee;\n      $scope.options.disableForm = !isAssignee;\n      $scope.options.disableAddVariableButton = !isAssignee;\n    }]);\n\n    $scope.taskFormState = taskFormData.observe('taskForm', function(taskForm) {\n      $scope.taskForm = angular.copy(taskForm);\n    });\n\n    // task form /////////////////////////////////////////////////////////////////////////\n\n    function clearTask() {\n      // reseting the location leads that\n      // the taskId will set to null and\n      // the current selected task will\n      // also be set to null, so that the\n      // view gets clear\n      var searchParams = $location.search();\n      delete searchParams.task;\n      delete searchParams.detailsTab;\n      $location.search(searchParams);\n\n      // list of tasks must be reloaded as\n      // well: changed properties on this\n      // task may cause the list to change\n      taskFormData.changed('taskList');\n    }\n\n    // will be called when the form has been submitted\n    $scope.completionCallback = function(err) {\n      if (err) {\n        return errorHandler('COMPLETE_ERROR', err);\n      }\n\n      if($scope.task.processInstanceId) {\n        assignNotification({\n          assignee: $scope.task.assignee,\n          processInstanceId: $scope.task.processInstanceId\n        });\n      } else if($scope.task.caseInstanceId) {\n        assignNotification({\n          assignee: $scope.task.assignee,\n          caseInstanceId: $scope.task.caseInstanceId\n        });\n      }\n\n      clearTask();\n    };\n  }];\n\n  var Configuration = function PluginConfiguration(ViewsProvider) {\n\n    ViewsProvider.registerDefaultView('tasklist.task.detail', {\n      id: 'task-detail-form',\n      label: 'FORM',\n      template: template,\n      controller: Controller,\n      priority: 1000\n    });\n  };\n\n  Configuration.$inject = ['ViewsProvider'];\n\n  return Configuration;\n\n});\n\n","\ndefine('text!scripts/task/plugins/detail/cam-tasklist-task-detail-history-plugin.html',[],function () { return '<div class=\"history-pane\">\\n\\n  <div ng-show=\"!state.$loaded\"\\n       class=\"loader\">\\n    <span class=\"animate-spin glyphicon glyphicon-refresh\"></span>\\n    {{ \\'LOADING\\' | translate }}\\n  </div>\\n\\n  <div ng-hide=\"!state.$loaded\">\\n    <div ng-if=\"!days.length\">\\n      <div class=\"well\">\\n        <span class=\"glyphicon glyphicon-info-sign\"></span>\\n        {{ \\'NO_HISTORY\\' | translate }}\\n      </div>\\n    </div>\\n\\n    <div ng-if=\"days.length\"\\n         class=\"day row\"\\n         ng-repeat=\"day in days | orderBy:\\'-date\\'\">\\n      <div class=\"col-xs-2\">\\n        <div class=\"date-badge\">\\n          <div>\\n            <span class=\"day\">{{ day.date | camDate:\\'day\\' }}</span>\\n            <span class=\"month\">{{ day.date | camDate:\\'monthName\\' }}</span>\\n            <span class=\"year\">{{ day.date | date:\\'yyyy\\' }}</span>\\n          </div>\\n        </div>\\n      </div>\\n\\n      <div class=\"col-xs-10\">\\n        <div class=\"instant row\"\\n             ng-repeat=\"event in day.events | orderBy:\\'-time\\'\">\\n          <div class=\"col-xs-2 operation-meta\">\\n            <div class=\"operation-time\"\\n                 tooltip-placement=\"left\"\\n                 tooltip=\"{{ event.time | camDate:\\'long\\' }}\">{{ event.time | date:\\'HH:mm\\' }}</div>\\n            <div class=\"operation-user\">{{ event.userId }}</div>\\n          </div>\\n\\n          <div class=\"col-xs-10 operation-detail\">\\n            <div class=\"row\">\\n              <h4 class=\"col-xs-12\">{{ event.type | translate }}</h4>\\n            </div>\\n\\n            <div class=\"row event-body\">\\n              <div class=\"line\"\\n                   ng-repeat=\"subEvent in event.subEvents\"\\n                   ng-if=\"event.type !== \\'Comment\\'\">\\n                <h5 class=\"col-sm-12 col-md-3 event-property\">{{ subEvent.property | translate }}</h5>\\n\\n                <div class=\"col-sm-12 col-md-9\">\\n                  <div class=\"new-value\" ng-if=\"subEvent.newValue\">\\n                    <span ng-if=\"subEvent.propertyIsDate\">{{ subEvent.newValue | camDate }}</span>\\n                    <span ng-if=\"!subEvent.propertyIsDate\">{{ subEvent.newValue }}</span>\\n                  </div>\\n\\n                  <div class=\"original-value\"\\n                       ng-if=\"subEvent.orgValue\">\\n                    <span ng-if=\"subEvent.propertyIsDate\">{{ subEvent.orgValue | camDate }}</span>\\n                    <span ng-if=\"!subEvent.propertyIsDate\">{{ subEvent.orgValue }}</span>\\n                  </div>\\n                </div>\\n              </div>\\n              <div class=\"col-xs-12\"\\n                   ng-if=\"event.type === \\'Comment\\'\"\\n                   nl2br=\"event.message\" />\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n';});\n\n","define('scripts/task/plugins/detail/cam-tasklist-task-detail-history-plugin',[\n  'jquery',\n  'moment',\n  'text!./cam-tasklist-task-detail-history-plugin.html',\n], function(\n  jquery,\n  moment,\n  template\n) {\n  'use strict';\n\n  var findOrCreateDay = function(days, timestamp) {\n    var day = jquery.grep(days, function(elem) {\n      return moment(elem.date).format('YYYY-MM-DD') === moment(timestamp).format('YYYY-MM-DD');\n    });\n    if(day.length > 0) {\n      return day[0];\n    } else {\n      day = {\n        date: timestamp,\n        events: []\n      };\n      days.push(day);\n      return day;\n    }\n  };\n\n  var findOrCreateParentEvent = function(events, event) {\n    var parentEvent = jquery.grep(events, function(elem) {\n      return elem.operationId === event.operationId;\n    });\n    if(parentEvent.length > 0) {\n      return parentEvent[0];\n    } else {\n      parentEvent = {\n        time: event.timestamp,\n        type: event.operationType,\n        operationId: event.operationId,\n        userId: event.userId,\n        subEvents: []\n      };\n      events.push(parentEvent);\n      return parentEvent;\n    }\n  };\n\n  function isTimestampProperty(propertyName) {\n    return ['dueDate', 'followUpDate'].indexOf(propertyName) !== -1;\n  }\n\n  var Controller = [\n   '$scope',\n   'camAPI',\n   '$q',\n  function (\n    $scope,\n    camAPI,\n    $q\n  ) {\n\n    var History = camAPI.resource('history');\n    var Task = camAPI.resource('task');\n\n    var historyData = $scope.taskData.newChild($scope);\n\n    historyData.provide('history', ['task', function (task) {\n      var deferred = $q.defer();\n\n      if (!task) {\n        return deferred.resolve(null);\n      }\n\n      History.userOperation({taskId : task.id}, function(err, res) {\n        if(err) {\n          deferred.reject(err);\n        }\n        else {\n          deferred.resolve(res);\n        }\n      });\n\n      return deferred.promise;\n    }]);\n\n    historyData.provide('comments', ['task', function (task) {\n      var deferred = $q.defer();\n\n      if (!task) {\n        return deferred.resolve(null);\n      }\n\n      Task.comments(task.id, function(err, res) {\n        if(err) {\n          deferred.reject(err);\n        }\n        else {\n          deferred.resolve(res);\n        }\n      });\n\n      return deferred.promise;\n    }]);\n\n    historyData.provide('orderedHistoryAndCommentsByDay', ['history', 'comments', function (history, comments) {\n      history = history || {};\n      comments = comments || {};\n\n      var days = [],\n          i = 0,\n          day;\n\n      for (var historyEvent; !!(historyEvent = history[i]); i++) {\n        // create object for each day, containing the events for this day\n        day = findOrCreateDay(days, historyEvent.timestamp);\n\n        // create historyEvent object for each operationId\n        var parentEvent = findOrCreateParentEvent(day.events, historyEvent);\n\n        // preprocess the dates to avoid function calls from the template\n        if (isTimestampProperty(historyEvent.property)) {\n          historyEvent.propertyIsDate = true;\n          historyEvent.newValue = historyEvent.newValue ? parseInt(historyEvent.newValue, 10) : null;\n          historyEvent.orgValue = historyEvent.orgValue ? parseInt(historyEvent.orgValue, 10) : null;\n        }\n\n        parentEvent.subEvents.push(historyEvent);\n\n      }\n\n      // reset values\n      i = 0;\n      day = null;\n\n      for (var comment; !!(comment = comments[i]); i++) {\n        day = findOrCreateDay(days, comment.time);\n        comment.type = 'Comment';\n        day.events.push(comment);\n      }\n\n      return days;\n    }]);\n\n    $scope.state = historyData.observe('orderedHistoryAndCommentsByDay', function(days) {\n      $scope.days = days;\n    });\n\n  }];\n\n  var Configuration = function PluginConfiguration(ViewsProvider) {\n    \n    ViewsProvider.registerDefaultView('tasklist.task.detail', {\n      id: 'task-detail-history',\n      label: 'HISTORY',\n      template: template,\n      controller: Controller,\n      priority: 800\n    });\n  };\n\n  Configuration.$inject = ['ViewsProvider'];\n\n  return Configuration;\n\n});\n\n","\ndefine('text!scripts/task/plugins/detail/cam-tasklist-task-detail-diagram-plugin.html',[],function () { return '<div ng-show=\"!processDiagramState.$loaded\"\\n     class=\"loader\">\\n  <span class=\"animate-spin glyphicon glyphicon-refresh\"></span>\\n  {{ \\'LOADING\\' | translate }}\\n</div>\\n\\n<div ng-if=\"processDiagramState.$loaded\">\\n\\n  <div ng-show=\"!processDefinition || !processDiagram.bpmn20xml\"\\n       class=\"well\">\\n    <span class=\"glyphicon glyphicon-info-sign\"></span>\\n    {{ \\'NO_DIAGRAM\\' | translate }}\\n  </div>\\n\\n  <div ng-hide=\"!processDefinition || !processDiagram.bpmn20xml\">\\n    <div class=\"diagram-pane\"\\n         cam-widget-bpmn-viewer\\n         diagram-data=\"processDiagram.bpmn20xml\"\\n         on-load=\"highlightTask()\"\\n         control=\"control\">\\n    </div>\\n  </div>\\n\\n</div>\\n';});\n\n","define('scripts/task/plugins/detail/cam-tasklist-task-detail-diagram-plugin',[\n  'text!./cam-tasklist-task-detail-diagram-plugin.html',\n], function(\n  template\n) {\n  'use strict';\n\n  var Controller = [\n   '$scope',\n   '$q',\n   'camAPI',\n  function (\n    $scope,\n    $q,\n    camAPI\n  ) {\n\n    // setup ///////////////////////////////////////////////////////////\n\n    var ProcessDefinition = camAPI.resource('process-definition');\n    var diagramData = $scope.taskData.newChild($scope);\n\n    // provider ////////////////////////////////////////////////////////\n\n    diagramData.provide('bpmn20xml', ['processDefinition', function (processDefinition) {\n      var deferred = $q.defer();\n\n      if (!processDefinition) {\n        return deferred.resolve(null);\n      }\n\n      ProcessDefinition.xml(processDefinition, function(err, res) {\n        if(err) {\n          deferred.reject(err);\n        }\n        else {\n          deferred.resolve(res);\n        }\n      });\n\n      return deferred.promise;\n    }]);\n\n    diagramData.provide('processDiagram', ['bpmn20xml', 'processDefinition', 'task', function (bpmn20xml, processDefinition, task) {\n      var processDiagram = {};\n\n      processDiagram.processDefinition = processDefinition;\n      processDiagram.task = task;\n      processDiagram.bpmn20xml = (bpmn20xml || {}).bpmn20Xml;\n\n      return processDiagram;\n    }]);\n\n    // observer /////////////////////////////////////////////////////////\n\n    diagramData.observe('processDefinition', function (processDefinition) {\n      $scope.processDefinition = processDefinition;\n    });\n\n    $scope.processDiagramState = diagramData.observe('processDiagram', function (processDiagram) {\n      $scope.processDiagram = processDiagram;\n    });\n\n    $scope.control = {};\n\n    $scope.highlightTask = function() {\n      $scope.control.highlight($scope.processDiagram.task.taskDefinitionKey);\n    };\n\n  }];\n\n  var Configuration = function PluginConfiguration(ViewsProvider) {\n\n    ViewsProvider.registerDefaultView('tasklist.task.detail', {\n      id: 'task-detail-diagram',\n      label: 'DIAGRAM',\n      template: template,\n      controller: Controller,\n      priority: 600\n    });\n  };\n\n  Configuration.$inject = ['ViewsProvider'];\n\n  return Configuration;\n\n});\n\n","\ndefine('text!scripts/task/plugins/detail/cam-tasklist-task-detail-description-plugin.html',[],function () { return '<div class=\"description-pane\">\\n  <div ng-hide=\"task.description\"\\n       class=\"well\">\\n    <span class=\"glyphicon glyphicon-info-sign\"></span>\\n    {{ \\'NO_DESCRIPTION\\' | translate }}\\n  </div>\\n  <div ng-show=\"task.description\">\\n    {{ task.description }}\\n  </div>\\n</div>\\n';});\n\n","define('scripts/task/plugins/detail/cam-tasklist-task-detail-description-plugin',[\n  'text!./cam-tasklist-task-detail-description-plugin.html',\n], function(\n  template\n) {\n  'use strict';\n\n  var Controller = [\n   '$scope',\n  function ($scope) {\n\n  }];\n\n  var Configuration = function PluginConfiguration(ViewsProvider) {\n\n    ViewsProvider.registerDefaultView('tasklist.task.detail', {\n      id: 'task-detail-description',\n      label: 'DESCRIPTION',\n      template: template,\n      controller: Controller,\n      priority: 100\n    });\n  };\n\n  Configuration.$inject = ['ViewsProvider'];\n\n  return Configuration;\n\n});\n\n","\ndefine('text!scripts/task/plugins/action/cam-tasklist-task-action-comment-plugin.html',[],function () { return '<a href\\n   ng-click=\"createComment()\">\\n  {{ \\'COMMENT_CREATE\\' | translate }}\\n  <span class=\"glyphicon glyphicon-plus-sign\"></span>\\n</a>';});\n\n","\ndefine('text!scripts/task/plugins/action/modals/cam-tasklist-comment-form.html',[],function () { return '<form class=\"form form-horizontal\"\\n      name=\"newComment\"\\n      role=\"form\">\\n\\n  <div class=\"modal-header\">\\n    <h3 class=\"modal-title\">\\n      {{ \\'COMMENT_CREATE\\' | translate }}\\n    </h3>\\n  </div>\\n\\n  <div class=\"modal-body\">\\n      <textarea class=\"form-control\"\\n             id=\"comment-form-message\"\\n             ng-model=\"comment.message\"\\n             placeholder=\"{{ \\'COMMENT_MESSAGE_PLACEHOLDER\\' | translate }}\">\\n      </textarea>\\n  </div>\\n\\n  <div class=\"modal-footer\">\\n    <div class=\"row row-action\">\\n      <div class=\"col-xs-12\">\\n        <button class=\"btn btn-xs btn-link\"\\n                type=\"button\"\\n                ng-click=\"$dismiss()\"\\n                translate=\"CLOSE\">Close</button>\\n\\n        <button class=\"btn btn-primary\"\\n                type=\"submit\"\\n                ng-disabled=\"!comment.message\"\\n                ng-click=\"submit()\"\\n                translate=\"SAVE\">Save</button>\\n\\n      </div>\\n    </div>\\n  </div>\\n</form>\\n';});\n\n","define('scripts/task/plugins/action/cam-tasklist-task-action-comment-plugin',[\n  'text!./cam-tasklist-task-action-comment-plugin.html',\n  'text!./modals/cam-tasklist-comment-form.html'\n], function(\n  addCommentTemplate,\n  addCommentFormTemplate\n) {\n  'use strict';\n\n  var Controller = [\n   '$scope',\n   '$modal',\n  function (\n    $scope,\n    $modal\n  ) {\n\n    var commentData = $scope.taskData.newChild($scope);\n\n    commentData.observe('task', function(task) {\n      $scope.task = task;\n    });\n\n    $scope.createComment = function() {\n      $modal.open({\n        // creates a child scope of a provided scope\n        scope: $scope,\n        //TODO: extract filter edit modal class to super style sheet\n        windowClass: 'filter-edit-modal',\n        size: 'lg',\n        template: addCommentFormTemplate,\n        controller: 'camCommentCreateModalCtrl',\n        resolve: {\n          task: function() { return $scope.task; }\n        }\n      }).result.then(function() {\n        commentData.changed('task');\n      });\n\n    };\n\n  }];\n\n  var Configuration = function PluginConfiguration(ViewsProvider) {\n\n    ViewsProvider.registerDefaultView('tasklist.task.action', {\n      id: 'task-action-comment',\n      template: addCommentTemplate,\n      controller: Controller,\n      priority: 100\n    });\n  };\n\n  Configuration.$inject = ['ViewsProvider'];\n\n  return Configuration;\n\n});\n\n","define('scripts/task/plugins/action/modals/cam-tasklist-comment-form',[\n\n], function() {\n  'use strict';\n\n  return [\n    '$scope',\n    '$translate',\n    'Notifications',\n    'camAPI',\n    'task',\n  function(\n    $scope,\n    $translate,\n    Notifications,\n    camAPI,\n    task\n  ) {\n\n    var Task = camAPI.resource('task');\n\n    $scope.comment = { message: '' };\n\n    $scope.$on('$locationChangeSuccess', function() {\n      $scope.$dismiss();\n    });\n\n    function errorNotification(src, err) {\n      $translate(src).then(function(translated) {\n        Notifications.addError({\n          status: translated,\n          message: (err ? err.message : ''),\n          exclusive: true,\n          scope: $scope\n        });\n      });\n    }\n\n    $scope.submit = function() {\n      Task.createComment(task.id, $scope.comment.message, function(err) {\n        if (err) {\n          return errorNotification('COMMENT_SAVE_ERROR', err);\n        }\n\n        $scope.$close();\n      });\n    };\n  }];\n\n});\n\n","define('scripts/task/modals/cam-tasklist-groups-modal',[\n], function(\n) {\n  'use strict';\n\n  return [\n    '$scope',\n    'taskMetaData',\n    'groupsChanged',\n  function(\n    $scope,\n    taskMetaData,\n    groupsChanged\n  ) {\n    // setup //////////////////////////////////////////////\n\n    $scope.taskGroupsData = taskMetaData.newChild($scope);\n\n    $scope.groupsChanged = groupsChanged || function () {};\n\n    $scope.$on('$locationChangeSuccess', function() {\n      $scope.$dismiss();\n    });\n\n  }];\n\n});\n\n","define('scripts/task/index',[\n  'angular',\n  'moment',\n\n  './directives/cam-tasklist-task',\n  './directives/cam-tasklist-task-meta',\n\n  './controller/cam-tasklist-task-action-ctrl',\n  './controller/cam-tasklist-task-groups-ctrl',\n\n  /* detail plugins */\n  './plugins/detail/cam-tasklist-task-detail-form-plugin',\n  './plugins/detail/cam-tasklist-task-detail-history-plugin',\n  './plugins/detail/cam-tasklist-task-detail-diagram-plugin',\n  './plugins/detail/cam-tasklist-task-detail-description-plugin',\n\n  /* action plugins */\n  './plugins/action/cam-tasklist-task-action-comment-plugin',\n\n  /* action plugin controller */\n  './plugins/action/modals/cam-tasklist-comment-form',\n\n  /* modals */\n  './modals/cam-tasklist-groups-modal',\n\n  '../api/index',\n  'angular-bootstrap'\n\n], function(\n  angular,\n  moment,\n\n  taskDirective,\n  taskMetaDirective,\n\n  camTaskActionCtrl,\n  camTaskGroupsCtrl,\n\n  /* detail plugins */\n  camTaskDetailFormPlugin,\n  camTaskDetailHistoryPlugin,\n  camTaskDetailDiagramPlugin,\n  camTaskDetailDescriptionPlugin,\n\n  /* action plugins */\n  camTaskActionCommentPlugin,\n\n  /* action plugin controller */\n  camCommentCreateModalCtrl,\n\n  /* modals */\n  camGroupEditModalCtrl,\n\n  /* API */\n  apiClient\n) {\n  'use strict';\n\n  var taskModule = angular.module('cam.tasklist.task', [\n    apiClient.name,\n    'ui.bootstrap',\n    'cam.tasklist.form',\n    'angularMoment'\n  ]);\n\n  /**\n   * @module cam.tasklist.task\n   */\n\n  /**\n   * @memberof cam.tasklist\n   */\n\n  taskModule.directive('camTasklistTask', taskDirective);\n\n  taskModule.directive('camTasklistTaskMeta', taskMetaDirective);\n\n  taskModule.controller('camTaskActionCtrl', camTaskActionCtrl);\n  taskModule.controller('camTaskGroupsCtrl', camTaskGroupsCtrl);\n\n  /* detail plugins */\n  taskModule.config(camTaskDetailFormPlugin);\n  taskModule.config(camTaskDetailHistoryPlugin);\n  taskModule.config(camTaskDetailDiagramPlugin);\n  taskModule.config(camTaskDetailDescriptionPlugin);\n\n    /* action plugins */\n  taskModule.config(camTaskActionCommentPlugin);\n\n  /* action plugin controller */\n  taskModule.controller('camCommentCreateModalCtrl', camCommentCreateModalCtrl);\n\n  taskModule.controller('camGroupEditModalCtrl', camGroupEditModalCtrl);\n\n  return taskModule;\n});\n\n","\ndefine('text!scripts/process/plugins/action/cam-tasklist-navbar-action-start-process-plugin.html',[],function () { return '<a ng-click=\"open()\"\\n   href>\\n  <span class=\"glyphicon glyphicon-list-alt\"></span>\\n  {{ \\'START_PROCESS\\' | translate }}\\n</a>\\n';});\n\n","\ndefine('text!scripts/process/plugins/action/modals/cam-tasklist-process-start-modal.html',[],function () { return '<div class=\"modal-header\">\\n  <div class=\"row\">\\n    <div class=\"col-xs-6\">\\n      <h3 class=\"modal-title\">{{ \\'START_PROCESS\\' | translate }}</h3>\\n    </div>\\n\\n    <div class=\"col-xs-6\">\\n      <form>\\n        <div class=\"form-group has-feedback\"\\n             ng-show=\"!PROCESS_TO_START_SELECTED\">\\n          <input type=\"text\"\\n                 ng-model=\"page.searchValue\"\\n                 placeholder=\"{{ \\'SEARCH_PROCESS_BY_NAME\\' | translate }}\"\\n                 ng-change=\"lookupProcessDefinitionByName()\"\\n                 class=\"form-control\">\\n        </div>\\n      </form>\\n    </div>\\n  </div>\\n</div>\\n\\n<div class=\"modal-body\">\\n\\n  <div notifications-panel />\\n\\n  <div ng-show=\"!PROCESS_TO_START_SELECTED\">\\n\\n    <div ng-show=\"!processDefinitionState.$loaded || lookupProcessDefinitionByName.$loading\"\\n       class=\"loader\">\\n      <span class=\"animate-spin glyphicon glyphicon-refresh\"></span>\\n      {{ \\'LOADING\\' | translate }}\\n    </div>\\n\\n    <div ng-hide=\"!processDefinitionState.$loaded || lookupProcessDefinitionByName.$loading\">\\n\\n      <div ng-hide=\"page.total\"\\n           class=\"well\">\\n        <span class=\"glyphicon glyphicon-info-sign\"></span>\\n        {{ \\'NO_PROCESS_DEFINITION_AVAILABLE\\' | translate }}\\n      </div>\\n\\n      <div ng-show=\"page.total\" class=\"available-processes\">\\n\\n        <div class=\"text-help\">\\n          <span class=\"glyphicon glyphicon-info-sign\"></span>\\n          {{ \\'CLICK_PROCESS_TO_START\\' | translate }}\\n        </div>\\n\\n        <ul class=\"processes\">\\n          <li ng-repeat=\"processDefinition in processDefinitions\">\\n            <a href ng-click=\"selectProcessDefinition(processDefinition)\">\\n              {{ processDefinition.name || processDefinition.key }}\\n            </a>\\n          </li>\\n        </ul>\\n\\n      </div>\\n\\n      <pagination ng-show=\"page.total > page.size\"\\n                  total-items=\"page.total\"\\n                  items-per-page=\"page.size\"\\n                  max-size=\"5\"\\n                  class=\"pagination-sm\"\\n                  boundary-links=\"true\"\\n                  ng-model=\"page.current\"\\n                  ng-change=\"pageChange()\"\\n                  next-text=\"&rsaquo;\"\\n                  last-text=\"&raquo;\"\\n                  previous-text=\"&lsaquo;\"\\n                  first-text=\"&laquo;\"></pagination>\\n    </div>\\n  </div>\\n\\n  <div ng-if=\"PROCESS_TO_START_SELECTED\">\\n\\n    <div ng-if=\"startFormState.$error\" class=\"alert alert-danger\" role=\"alert\">\\n      <span class=\"glyphicon glyphicon-exclamation-sign\"></span>\\n      <strong class=\"status\">{{ \\'FORM_FAILURE\\' | translate }}</strong>\\n      <span class=\"message\">{{ startFormState.$error.message }}</span>\\n    </div>\\n\\n    <div ng-if=\"startFormState.$loaded && !startFormState.$error\"\\n         cam-tasklist-form\\n         tasklist-form=\"startForm\"\\n         on-form-completion-callback=\"completionCallback\"\\n         on-form-completion=\"registerCompletionHandler\"\\n         on-form-validation=\"notifyFormValidation\"\\n         options=\"options\"\\n         params=\"params\" >\\n    </div>\\n  </div>\\n\\n</div>\\n\\n<div class=\"modal-footer\">\\n  <div ng-if=\"!PROCESS_TO_START_SELECTED\"\\n       class=\"row row-action\">\\n\\n    <div class=\"col-xs-12\">\\n      <button class=\"btn btn-xs btn-link\"\\n              type=\"button\"\\n              ng-click=\"$dismiss()\">\\n        {{ \\'CLOSE\\' | translate }}\\n      </button>\\n    </div>\\n  </div>\\n\\n  <div ng-if=\"PROCESS_TO_START_SELECTED\"\\n       class=\"row\">\\n\\n    <div class=\"col-xs-4 align-left\">\\n      <button class=\"btn btn-xs btn-link\"\\n              type=\"button\"\\n              ng-click=\"back()\">\\n        {{ \\'BACK\\' | translate }}\\n      </button>\\n    </div>\\n\\n    <div class=\"col-xs-8\">\\n      <button class=\"btn btn-xs btn-link\"\\n              type=\"button\"\\n              ng-click=\"$dismiss()\">\\n        {{ \\'CLOSE\\' | translate }}\\n      </button>\\n\\n      <button class=\"btn btn-primary\"\\n              type=\"submit\"\\n              ng-disabled=\"$invalid\"\\n              ng-click=\"startProcessInstance()\">\\n        {{ \\'START\\' | translate }}\\n      </button>\\n    </div>\\n\\n  </div>\\n\\n</div>\\n';});\n\n","define('scripts/process/plugins/action/cam-tasklist-navbar-action-start-process-plugin',[\n  'text!./cam-tasklist-navbar-action-start-process-plugin.html',\n  'text!./modals/cam-tasklist-process-start-modal.html'\n], function(\n  startProcessActionTemplate,\n  template\n) {\n  'use strict';\n\n  var Controller = [\n    '$scope',\n    '$modal',\n    '$q',\n    'camAPI',\n    'dataDepend',\n  function(\n    $scope,\n    $modal,\n    $q,\n    camAPI,\n    dataDepend\n  ) {\n\n    var ProcessDefinition = camAPI.resource('process-definition');\n\n    var processData = $scope.processData = dataDepend.create($scope);\n\n    var DEFAULT_PROCESS_DEFINITION_QUERY = {\n      latest: true,\n      active: true,\n      firstResult: 0,\n      maxResults: 15\n    };\n\n    processData.provide('processDefinitionQuery', DEFAULT_PROCESS_DEFINITION_QUERY);\n\n    processData.provide('processDefinitions', ['processDefinitionQuery', function(processDefinitionQuery) {\n      var deferred = $q.defer();\n\n      ProcessDefinition.list(processDefinitionQuery, function (err, res) {\n        if(err) {\n          deferred.reject(err);\n        }\n        else {\n          deferred.resolve(res);\n        }\n      });\n\n      return deferred.promise;\n\n    }]);\n\n    processData.provide('currentProcessDefinitionId', { id: null });\n\n    processData.provide('startForm', ['currentProcessDefinitionId', function (currentProcessDefinitionId) {\n      var deferred = $q.defer();\n\n      if (!currentProcessDefinitionId.id) {\n        deferred.resolve(null);\n      }\n      else {\n        ProcessDefinition.startForm(currentProcessDefinitionId, function (err, res) {\n          if(err) {\n            deferred.reject(err);\n          }\n          else {\n            deferred.resolve(res);\n          }\n        });\n      }\n\n      return deferred.promise;\n    }]);\n\n    $scope.open = function() {\n      processData.set('processDefinitionQuery', angular.copy(DEFAULT_PROCESS_DEFINITION_QUERY));\n      $modal.open({\n        size: 'lg',\n        controller: 'camProcessStartModalCtrl',\n        template: template,\n        resolve: {\n          processData: function () { return processData; }\n        }\n      }).result.then(function(result) {\n        if ($scope.tasklistApp && $scope.tasklistApp.refreshProvider) {\n          $scope.tasklistApp.refreshProvider.refreshTaskList();\n        }\n      });\n    };\n\n  }];\n\n  var Configuration = function PluginConfiguration(ViewsProvider) {\n\n    ViewsProvider.registerDefaultView('tasklist.navbar.action', {\n      id: 'start-process-action',\n      template: startProcessActionTemplate,\n      controller: Controller,\n      priority: 100\n    });\n  };\n\n  Configuration.$inject = ['ViewsProvider'];\n\n  return Configuration;\n\n});\n\n","define('scripts/process/plugins/action/modals/cam-tasklist-process-start-modal',[\n  'angular'\n], function(\n  angular\n) {\n\n  'use strict';\n\n  return [\n    '$rootScope',\n    '$scope',\n    '$translate',\n    'debounce',\n    'Notifications',\n    'processData',\n    'assignNotification',\n  function(\n    $rootScope,\n    $scope,\n    $translate,\n    debounce,\n    Notifications,\n    processData,\n    assignNotification\n  ) {\n    function errorNotification(src, err) {\n      $translate(src).then(function(translated) {\n        Notifications.addError({\n          status: translated,\n          message: (err ? err.message : ''),\n          scope: $scope\n        });\n      });\n    }\n\n    function successNotification(src) {\n      $translate(src).then(function(translated) {\n        Notifications.addMessage({\n          duration: 3000,\n          status: translated\n        });\n      });\n    }\n\n    // setup ////////////////////////////////////////////////////////////////////////\n\n    $scope.$on('$locationChangeSuccess', function() {\n      $scope.$dismiss();\n    });\n\n    var processStartData = processData.newChild($scope);\n\n    // initially always reset the current selected process definition id to null\n    processStartData.set('currentProcessDefinitionId', { id: null });\n\n    var DEFAULT_OPTIONS = $scope.options = {\n      hideCompleteButton : true,\n      hideLoadVariablesButton: true,\n      disableForm : false,\n      disableAddVariableButton: false\n    };\n\n    $scope.PROCESS_TO_START_SELECTED = false;\n\n    var query = null;\n\n    var page = $scope.page = {\n      total: 0,\n      current: 1,\n      searchValue: null\n    };\n\n    $scope.triggerOnStart = function () {};\n\n    // observe /////////////////////////////////////////////////////////////////////////////////////\n\n    processStartData.observe('processDefinitionQuery', function(_query) {\n      query = angular.copy(_query);\n\n      page.size = _query.maxResults;\n      page.current = (_query.firstResult / page.size) + 1;\n    });\n\n    $scope.startFormState = processStartData.observe('startForm', function (startForm) {\n      $scope.startForm = angular.copy(startForm);\n    });\n\n    $scope.processDefinitionState = processStartData.observe('processDefinitions', function (processDefinitions) {\n\n      page.total = processDefinitions.count;\n\n      $scope.processDefinitions = processDefinitions.items.sort(function(a, b) {\n        var aName = (a.name || a.key).toLowerCase();\n        var bName = (b.name || b.key).toLowerCase();\n        if (aName < bName)\n           return -1;\n        if (aName > bName)\n          return 1;\n        return 0;\n      });\n\n    });\n\n    // select process definition view //////////////////////////////////////////////////////\n\n    $scope.pageChange = function() {\n      query.firstResult = page.size * (page.current - 1);\n      processStartData.set('processDefinitionQuery', query);\n    };\n\n    $scope.lookupProcessDefinitionByName = debounce(function() {\n      var nameLike = page.searchValue;\n\n      if (!nameLike) {\n        delete query.nameLike;\n      }\n      else {\n        query.nameLike = '%' + nameLike + '%';\n      }\n\n      // reset first result of query\n      query.firstResult = 0;\n\n      processStartData.set('processDefinitionQuery', query);\n\n\n    }, 2000);\n\n    $scope.selectProcessDefinition = function(processDefinition) {\n      $scope.PROCESS_TO_START_SELECTED = true;\n\n      var processDefinitionId = processDefinition.id;\n      var processDefinitionKey = processDefinition.key;\n\n      $scope.options = angular.copy(DEFAULT_OPTIONS);\n\n      $scope.params = {\n        processDefinitionId : processDefinitionId,\n        processDefinitionKey : processDefinitionKey\n      };\n\n      processStartData.set('currentProcessDefinitionId', {\n        id: processDefinitionId\n      });\n\n    };\n\n    // start a process view /////////////////////////////////////////////////////////////////\n\n    $scope.$invalid = true;\n\n    $scope.back = function() {\n      $scope.$invalid = true;\n      $scope.PROCESS_TO_START_SELECTED = false;\n      $scope.options = DEFAULT_OPTIONS;\n      processStartData.set('currentProcessDefinitionId', { id: null });\n    };\n\n    var executeAfterDestroy = [];\n    $scope.$on('$destroy', function() {\n      var job;\n      while(!!(job = executeAfterDestroy.pop())) {\n        if(typeof job === \"function\") {\n          job();\n        }\n      }\n    });\n\n    // will be called when the form has been submitted\n    $scope.completionCallback = function(err, result) {\n      if (err) {\n        return errorNotification('PROCESS_START_ERROR', err);\n      }\n\n      executeAfterDestroy.push(function() {\n        successNotification('PROCESS_START_OK');\n        assignNotification({\n          assignee: $rootScope.authentication.name,\n          processInstanceId: result.id\n        });\n      });\n      $scope.$close();\n    };\n\n    // will be called on initialization of the 'form'-directive\n    $scope.registerCompletionHandler = function (fn) {\n      // register a handler when a process should be started\n      $scope.triggerOnStart = fn || function () {};\n    };\n\n    // will be triggered when the user select on 'Start'\n    $scope.startProcessInstance = function () {\n      $scope.triggerOnStart();\n    };\n\n    // will be called the validation state has been changed\n    $scope.notifyFormValidation = function (invalid) {\n      $scope.$invalid = invalid;\n    };\n\n  }];\n\n});\n\n","define('scripts/process/index',[\n  'angular',\n\n    /* action plugins */\n  './plugins/action/cam-tasklist-navbar-action-start-process-plugin',\n\n    /* action plugin controller */\n  './plugins/action/modals/cam-tasklist-process-start-modal'\n\n], function(\n  angular,\n\n  /* action plugins */\n  camNavbarActionStartProcessPlugin,\n\n  /* action plugin controller */\n  camProcessStartModalCtrl\n\n\n) {\n\n  'use strict';\n\n  var processModule = angular.module('cam.tasklist.process', [\n    'cam.tasklist.client',\n    'cam.tasklist.form',\n    'ui.bootstrap'\n  ]);\n\n\n  /* action plugins */\n  processModule.config(camNavbarActionStartProcessPlugin);\n\n  /* action plugin controller */\n  processModule.controller('camProcessStartModalCtrl', camProcessStartModalCtrl);\n\n  return processModule;\n\n});\n\n","\ndefine('text!scripts/navigation/directives/cam-tasklist-navigation.html',[],function () { return '<div class=\"container-fluid\">\\n  <!-- Brand and toggle get grouped for better mobile display -->\\n  <div class=\"navbar-header\">\\n    <button type=\"button\"\\n            class=\"navbar-toggle\"\\n            data-toggle=\"collapse\"\\n            data-target=\".navbar-collapse\">\\n      <span class=\"sr-only\"\\n            translate=\"TOGGLE_NAVIGATION\">Toggle navigation</span>\\n      <span class=\"icon-bar\"></span>\\n      <span class=\"icon-bar\"></span>\\n      <span class=\"icon-bar\"></span>\\n    </button>\\n\\n    <a class=\"navbar-brand\"\\n       title=\"{{ \\'APP_VENDOR\\' | translate }} {{ \\'TASKLIST_APP\\' | translate }}\"\\n       ng-href=\"{{ \\'tasklistbase://\\' | uri }}\">\\n       {{ \\'APP_VENDOR\\' | translate }} {{ \\'TASKLIST_APP\\' | translate }}\\n    </a>\\n  </div>\\n\\n  <!-- Collect the nav links, forms, and other content for toggling -->\\n  <div class=\"collapse navbar-collapse\"\\n       id=\"cam-tasklist-navigation\">\\n    <ul class=\"nav navbar-nav navbar-right\">\\n\\n      <li ng-repeat=\"actionProvider in navbarActions\"\\n          ng-class=\"actionProvider.id\">\\n        <view cam-if-logged-in\\n              ng-cloak\\n              provider=\"actionProvider\"\\n              vars=\"navbarVars\">\\n        </view>\\n      </li>\\n\\n\\n      <li class=\"divider-vertical\"\\n          cam-if-logged-in\\n          ng-cloak></li>\\n\\n\\n      <li engine-select></li>\\n\\n\\n      <li class=\"user-account dropdown\"\\n          cam-if-logged-in\\n          ng-cloak>\\n        <a tooltip-placement=\"left\"\\n           tooltip=\"{{ \\'MANAGE_ACCOUNT\\' | translate }}\"\\n           href\\n           class=\"dropdown-toggle\"\\n           data-toggle=\"dropdown\">\\n          <span class=\"glyphicon glyphicon-user\"></span>\\n          {{ authentication.name }}\\n        </a>\\n        <ul class=\"dropdown-menu\">\\n          <li class=\"user-profile\">\\n            <a ng-href=\"{{ \\'adminbase://:engine\\' | uri }}/#/users/{{ authentication.name }}?tab=profile\"\\n               translate=\"MY_PROFILE\">\\n              My Profile\\n            </a>\\n          </li>\\n\\n          <li class=\"divider\"></li>\\n\\n          <li class=\"sign-out\">\\n            <a href=\"#/logout\"\\n               translate=\"SIGN_OUT_ACTION\">\\n              Sign out\\n            </a>\\n          </li>\\n        </ul>\\n      </li>\\n\\n\\n      <li class=\"divider-vertical\"\\n          cam-if-logged-in\\n          ng-cloak></li>\\n\\n\\n      <li class=\"app-switch dropdown\">\\n        <a href\\n           class=\"dropdown-toggle\"\\n           data-toggle=\"dropdown\">\\n          <span class=\"glyphicon glyphicon-home\"></span>\\n          <span class=\"caret\"></span>\\n        </a>\\n\\n        <ul class=\"dropdown-menu\">\\n          <li ng-if=\"!authentication || authentication.canAccess(\\'admin\\')\">\\n            <a ng-href=\"{{ \\'../../admin/:engine/\\' | uri }}\"\\n               translate=\"ADMIN_APP\">Admin</a>\\n          </li>\\n\\n          <li ng-if=\"!authentication || authentication.canAccess(\\'cockpit\\')\">\\n            <a ng-href=\"{{ \\'../../cockpit/:engine/\\' | uri }}\"\\n               translate=\"COCKPIT_APP\">Cockpit</a>\\n          </li>\\n        </ul>\\n      </li>\\n    </ul>\\n  </div><!-- /.navbar-collapse -->\\n</div><!-- /.container-fluid -->\\n';});\n\n","define('scripts/navigation/directives/cam-tasklist-navigation',[\n  'text!./cam-tasklist-navigation.html'\n], function(\n  template\n) {\n  'use strict';\n  return function() {\n    return {\n\n      template: template,\n\n      controller: [\n        '$scope',\n        'Views',\n      function($scope, Views) {\n\n        $scope.navbarVars = { read: [ 'tasklistApp' ] };\n        $scope.navbarActions = Views.getProviders({ component: 'tasklist.navbar.action' });\n\n      }]\n    };\n  };\n});\n\n","define('scripts/navigation/controllers/cam-layout-ctrl',[\n  'angular'\n], function(\n  angular\n) {\n  'use strict';\n  var $ = angular.element;\n  var $bdy = $('body');\n\n  return [\n    '$scope',\n    '$timeout',\n  function(\n    $scope,\n    $timeout\n  ) {\n    $scope.toggleVariableSearch = function($event) {\n      if ($event && $event.preventDefault) {\n        $event.preventDefault();\n      }\n\n      $('.tasks-list').toggleClass('show-search');\n    };\n\n\n\n    function region($event) {\n      return $($event.currentTarget).attr('data-region');\n    }\n\n    function isClosed(target) {\n      return $bdy.hasClass(target +'-column-close');\n    }\n\n    function open(target) {\n      return $bdy.removeClass(target +'-column-close');\n    }\n\n    function close(target) {\n      return $bdy.addClass(target +'-column-close');\n    }\n\n    $scope.toggleRegion = function($event) {\n      if ($event && $event.preventDefault) {\n        $event.preventDefault();\n      }\n\n      var target = region($event);\n\n      // list-column-close is not allowed when task-column-close\n      if (target === 'task') {\n        if(isClosed('list') && !isClosed('task')) {\n          open('list');\n        }\n      }\n\n\n      else if (target === 'list') {\n        if(isClosed('task') && !isClosed('list')) {\n          open('task');\n        }\n      }\n\n      $bdy.toggleClass(target +'-column-close');\n      $timeout(function () {\n        $scope.$root.$broadcast('layout:change');\n      }, 600);\n    };\n\n    $scope.maximizeRegion = function($event) {\n      if ($event && $event.preventDefault) {\n        $event.preventDefault();\n      }\n\n      close('filters');\n      close('list');\n      open('task');\n    };\n\n    $scope.resetRegions = function($event) {\n      if ($event && $event.preventDefault) {\n        $event.preventDefault();\n      }\n\n      open('filters');\n      open('list');\n      open('task');\n    };\n  }];\n});\n\n","define('scripts/navigation/index',[\n  'angular',\n  './directives/cam-tasklist-navigation',\n  './controllers/cam-layout-ctrl',\n  'camunda-commons-ui/util/index'\n], function(\n  angular,\n  camTasklistNavigation,\n  camLayoutCtrl\n) {\n  'use strict';\n\n  var navigationModule = angular.module('cam.tasklist.navigation', [\n    require('camunda-commons-ui/util/index').name,\n    'ui.bootstrap',\n    'cam.tasklist.user'\n  ]);\n\n  navigationModule.controller('camLayoutCtrl', camLayoutCtrl);\n  navigationModule.directive('camTasklistNavigation', camTasklistNavigation);\n\n  return navigationModule;\n});\n\n","\ndefine('text!scripts/form/directives/cam-tasklist-form.html',[],function () { return '<div ng-show=\"tasklistForm && !$loaded\"\\n     class=\"loader\">\\n  <span class=\"animate-spin glyphicon glyphicon-refresh\"></span>\\n  {{ \\'LOADING\\' | translate }}\\n</div>\\n\\n<div ng-if=\"tasklistForm.type\" ng-show=\"tasklistForm && $loaded\" ng-class=\"{ \\'disabled-form\\' : options.disableForm}\">\\n\\n  <div ng-show=\"tasklistForm.$error\" class=\"alert alert-danger\" role=\"alert\">\\n    <span class=\"glyphicon glyphicon-exclamation-sign\"></span>\\n    <strong class=\"status\">{{ \\'FORM_FAILURE\\' | translate }}</strong>\\n    <span class=\"message\">{{ tasklistForm.$error.message | translate }}</span>\\n  </div>\\n\\n  <div ng-switch=\"tasklistForm.type\" ng-show=\"!tasklistForm.$error\">\\n\\n    <div ng-switch-when=\"embedded\">\\n      <div cam-tasklist-form-embedded>\\n      </div>\\n    </div>\\n\\n    <div ng-switch-when=\"external\">\\n      <div cam-tasklist-form-external>\\n      </div>\\n    </div>\\n\\n    <div ng-switch-default>\\n      <div cam-tasklist-form-generic>\\n      </div>\\n    </div>\\n\\n  </div>\\n\\n  <div class=\"form-actions\" ng-show=\"showCompleteButton()\">\\n    <button class=\"btn btn-primary\"\\n            type=\"submit\"\\n            ng-click=\"save($event)\"\\n            ng-hide=\"tasklistForm.type === \\'generic\\'\"\\n            tooltip-placement=\"top\"\\n            tooltip=\"{{ \\'SAVE_HINT\\' | translate }}\"\\n            ng-disabled=\"!$dirty\">\\n      {{ \\'SAVE\\' | translate }}\\n    </button>\\n    <button class=\"btn btn-primary\"\\n            type=\"submit\"\\n            ng-click=\"complete()\"\\n            ng-disabled=\"disableCompleteButton()\">\\n      {{ \\'COMPLETE\\' | translate }}\\n    </button>\\n  </div>\\n\\n</div>\\n';});\n\n","define('scripts/form/directives/cam-tasklist-form',[\n  'angular',\n  'text!./cam-tasklist-form.html'\n], function(\n  angular,\n  template\n) {\n  'use strict';\n\n  var EMBEDDED_KEY = 'embedded:',\n      APP_KEY = 'app:',\n      ENGINE_KEY = 'engine:';\n\n  function compact(arr) {\n    var a = [];\n    for (var ay in arr) {\n      if (arr[ay]) {\n        a.push(arr[ay]);\n      }\n    }\n    return a;\n  }\n\n  var noop = function () {};\n\n  return [function(){\n\n    return {\n\n      restrict: 'A',\n\n      scope: {\n        tasklistForm : '=',\n\n        /*\n         * current options are:\n         * - hideCompleteButton: to hide the complete button inside the form directive\n         * - disableCompleteButton: to disable or enable the complete button inside\n         *   the form directive\n         * - disableForm: to disable or enable the form\n         * - disableAddVariableButton: to disable or enable the 'Add Variable' button\n         *   inside a generic form\n         */\n        options: '=',\n\n        /*\n         * contains parameter like taskId, processDefinitionId, processDefinitionKey etc.\n         */\n        params: '=',\n\n        /* will be used to make a callback when the form will be completed */\n        onFormCompletionCallback: '&',\n\n        /*\n         * will be used to register a completion handler, when the completion\n         * will be trigger from the outside of a form\n         */\n        onFormCompletion: '&',\n\n        /*\n         * is a callback which will called when the validation state of the\n         * form changes (pass the flag '$invalid').\n         */\n        onFormValidation: '&'\n      },\n\n      template: template,\n\n      controller: [\n        '$scope',\n        'Uri',\n      function(\n        $scope,\n        Uri\n      ) {\n\n        // setup //////////////////////////////////////////////////////////////////\n\n        $scope.onFormCompletionCallback = $scope.onFormCompletionCallback() || noop;\n        $scope.onFormCompletion = $scope.onFormCompletion() || noop;\n        $scope.onFormValidation = $scope.onFormValidation() || noop;\n        $scope.completionHandler = noop;\n        $scope.saveHandler = noop;\n\n        $scope.$loaded = false;\n\n        // handle tasklist form ///////////////////////////////////////////////////\n\n        $scope.$watch('tasklistForm', function(value) {\n          $scope.$loaded = false;\n          if (value) {\n            parseForm(value);\n          }\n        });\n\n        function parseForm(form) {\n          var key = form.key,\n              applicationContextPath = form.contextPath;\n\n          // structure may be [embedded:][app:]formKey\n\n          if (!key) {\n            form.type = 'generic';\n            return;\n          }\n\n          if (key.indexOf(EMBEDDED_KEY) === 0) {\n            key = key.substring(EMBEDDED_KEY.length);\n            form.type = 'embedded';\n          } else {\n            form.type = 'external';\n          }\n\n          if (key.indexOf(APP_KEY) === 0) {\n            if (applicationContextPath) {\n              key = compact([applicationContextPath, key.substring(APP_KEY.length)])\n                .join('/')\n                // prevents multiple \"/\" in the URI\n                .replace(/\\/([\\/]+)/, '/');\n            }\n          }\n\n          if(key.indexOf(ENGINE_KEY) === 0) {\n            // resolve relative prefix\n            key = Uri.appUri(key);\n          }\n\n          form.key = key;\n        }\n\n        // completion /////////////////////////////////////////////\n\n        var completionCallback = function (err, result)  {\n          $scope.onFormCompletionCallback(err, result);\n        };\n\n        var complete = $scope.complete = function () {\n          $scope.completionHandler(completionCallback);\n        };\n\n        $scope.onFormCompletion(complete);\n\n        $scope.showCompleteButton = function () {\n          return $scope.options &&\n                 !$scope.options.hideCompleteButton &&\n                 $scope.$loaded;\n        };\n\n        $scope.disableCompleteButton = function () {\n          return $scope.$invalid || ($scope.options && $scope.options.disableCompleteButton);\n        };\n\n        // save ///////////////////////////////////////////////////\n\n        var save = $scope.save = function (evt) {\n          $scope.saveHandler(evt);\n        };\n\n        // API ////////////////////////////////////////////////////\n\n        this.notifyFormInitialized = function () {\n          $scope.$loaded = true;\n        };\n\n        this.notifyFormInitializationFailed = function (error) {\n          $scope.tasklistForm.$error = error;\n          // mark the form as initialized\n          this.notifyFormInitialized();\n          // set the '$invalid' flag to true to\n          // not be able to complete a task (or start\n          // a process)\n          this.notifyFormValidated(true);\n        };\n\n        this.notifyFormCompleted = function (err) {\n          $scope.onFormCompletion(err);\n        };\n\n        this.notifyFormValidated = function (invalid) {\n          $scope.$invalid = invalid;\n          $scope.onFormValidation(invalid);\n        };\n\n        this.notifyFormDirty = function (dirty) {\n          $scope.$dirty = dirty;\n        };\n\n\n        this.getOptions = function () {\n          return $scope.options || {};\n        };\n\n        this.getTasklistForm = function () {\n          return $scope.tasklistForm;\n        };\n\n        this.getParams = function () {\n          return $scope.params || {};\n        };\n\n        this.registerCompletionHandler = function(fn) {\n          $scope.completionHandler = fn ||  noop;\n        };\n\n        this.registerSaveHandler = function(fn) {\n          $scope.saveHandler = fn ||  noop;\n        };\n\n\n      }]\n    };\n  }];\n});\n\n","\ndefine('text!scripts/form/directives/cam-tasklist-form-generic.html',[],function () { return '<div class=\"generic-form-fields\">\\n\\n  <div class=\"text-help\">\\n    <span class=\"glyphicon glyphicon-info-sign\"></span>\\n    {{ \\'USE_GENERIC_FORM\\' | translate }}\\n  </div>\\n\\n  <div cam-tasklist-form-generic-variables>\\n  </div>\\n\\n</div>\\n';});\n\n","define('scripts/form/directives/cam-tasklist-form-generic',[\n  'angular',\n  'text!./cam-tasklist-form-generic.html'\n], function(\n  angular,\n  template\n) {\n  'use strict';\n\n  function noop () {}\n\n  return [\n    'CamForm',\n    'camAPI',\n  function(\n    CamForm,\n    camAPI\n  ){\n\n    return {\n\n      restrict: 'A',\n\n      require: '^camTasklistForm',\n\n      scope: true,\n\n      template: template,\n\n      link: function($scope, $element, attrs, formController) {\n        $scope.showBusinessKeyField = !!formController.getParams().processDefinitionId;\n\n        var formElement = $element.find('form');\n        var camForm = null;\n        var form = {\n          '$valid': false,\n          '$invalid': true\n        };\n\n        var $update = false;\n\n        $scope.$watch(function () {\n          return $update;\n        }, function (value) {\n          if (value) {\n            showForm(value, formController.getParams());\n            $update = false;\n          }\n        });\n\n        $scope.$watch(function () {\n          return formController.getTasklistForm();\n        }, function (value) {\n          if (value) {\n            $update = true;\n            $scope.variables = [];\n          }\n        });\n\n        $scope.$watch(function() {\n          return form && form.$valid;\n        }, function(value) {\n          formController.notifyFormValidated(!value);\n        });\n\n        function showForm(tasklistForm, params) {\n          params = angular.copy(params);\n\n          delete params.processDefinitionKey;\n\n          angular.extend(params, {\n            client: camAPI,\n            formElement: formElement,\n            done: done\n          });\n\n          camForm = new CamForm(params);\n        }\n\n        var done = function (err, _camForm) {\n          if (err) {\n            return formController.notifyFormInitializationFailed(err);\n          }\n          camForm = _camForm;\n\n          var formName = _camForm.formElement.attr('name');\n          var camFormScope = _camForm.formElement.scope();\n\n          if (!camFormScope) {\n            return;\n          }\n\n          form = camFormScope[formName];\n          formController.notifyFormInitialized();\n        };\n\n        function clearVariableManager() {\n          var variables = camForm.variableManager.variables;\n          for (var v in variables) {\n            camForm.variableManager.destroyVariable(v);\n          }\n        }\n\n        function clearFields() {\n          camForm.fields = [];\n        }\n\n        var complete = function (callback) {\n\n          function localCallback(error, result) {\n            clearVariableManager();\n            clearFields();\n            return callback(error, result);\n          }\n\n          try {\n            camForm.initializeFieldHandlers();\n          } catch (error) {\n            return localCallback(error);\n          }\n\n          var variables = camForm.variableManager.variables;\n          for (var v in variables) {\n            variables[v].value = null;\n          }\n          camForm.submit(localCallback);\n        };\n\n        formController.registerCompletionHandler(complete);\n\n      }\n    };\n  }];\n});\n\n","\ndefine('text!scripts/form/directives/cam-tasklist-form-generic-variables.html',[],function () { return '<form name=\"generic-form\"\\n      class=\"form-horizontal\">\\n\\n  <div ng-if=\"showBusinessKeyField\"\\n       class=\"form-group\">\\n    <label for=\"business-key-field\"\\n           translate=\"BUSINESS_KEY\"\\n           class=\"control-label col-xs-2\">Business key</label>\\n    <div class=\"col-xs-10\">\\n      <input type=\"text\"\\n             id=\"business-key-field\"\\n             cam-business-key\\n             class=\"form-control\" />\\n    </div>\\n  </div>\\n\\n\\n  <div class=\"form-group labels-left\">\\n    <div class=\"col-xs-2 row-action\">\\n      <a ng-click=\"addVariable()\"\\n         ng-disabled=\"options.disableAddVariableButton\">\\n        <span class=\"hidden-xs hidden-sm\"\\n              translate=\"ADD_VARIABLE\">Add variable</span>\\n        <span class=\"glyphicon glyphicon-plus-sign\"></span>\\n      </a>\\n    </div>\\n\\n\\n\\n    <div class=\"col-xs-10\"\\n         ng-if=\"variables.length\">\\n      <div class=\"row\">\\n        <label class=\"control-label col-xs-4\"\\n               translate=\"NAME\">Name</label>\\n\\n\\n\\n        <label class=\"control-label col-xs-4\"\\n               translate=\"TYPE\">Type</label>\\n\\n\\n\\n        <label class=\"control-label col-xs-4\"\\n               translate=\"VALUE\">Value</label>\\n      </div>\\n    </div>\\n  </div>\\n\\n\\n\\n  <div ng-if=\"variables.length\"\\n       ng-repeat=\"(delta, variable) in variables\"\\n       class=\"form-group\"\\n       ng-form=\"repeatForm\">\\n\\n    <div class=\"col-xs-2 row-action\">\\n      <a ng-click=\"removeVariable(delta)\"\\n         ng-if=\"!variable.fixedName\">\\n        <span class=\"hidden-sm hidden-xs\"\\n              translate=\"REMOVE\">Remove</span>\\n        <span class=\"glyphicon glyphicon-minus-sign\"></span>\\n      </a>\\n    </div>\\n\\n\\n\\n    <div class=\"col-xs-10\">\\n      <div class=\"row\">\\n        <div class=\"col-xs-4\">\\n          <input required\\n                 type=\"text\"\\n                 class=\"form-control\"\\n                 placeholder=\"{{ \\'VARIABLE_NAME\\' | translate }}\"\\n                 ng-model=\"variable.name\"\\n                 name=\"name\"\\n                 cam-unique-value=\"{{ getVariableNames() }}\"\\n                 ng-readonly=\"variable.fixedName\" />\\n          <span ng-if=\"repeatForm.name.$invalid && repeatForm.name.$dirty\" class=\"has-error\">\\n            <span ng-if=\"repeatForm.name.$error.required\"\\n                  class=\"help-block\">\\n              {{ \\'REQUIRED_FIELD\\' | translate }}\\n            </span>\\n            <span ng-if=\"repeatForm.name.$error.camUniqueValue\"\\n                  class=\"help-block\">\\n              {{ \\'REQUIRE_UNIQUE_NAME\\' | translate }}\\n            </span>\\n          </span>\\n        </div>\\n\\n\\n\\n        <div class=\"col-xs-4\">\\n          <select required\\n                  ng-disabled=\"!variable.name\"\\n                  class=\"form-control\"\\n                  ng-model=\"variable.type\">\\n\\n            <option disabled\\n                    value=\"\"\\n                    translate=\"VARIABLE_TYPE\">Type</option>\\n\\n            <option value=\"Boolean\">Boolean</option>\\n            <option value=\"Short\">Short</option>\\n            <option value=\"Integer\">Integer</option>\\n            <option value=\"Long\">Long</option>\\n            <option value=\"Double\">Double</option>\\n            <option value=\"String\">String</option>\\n            <option value=\"Date\">Date</option>\\n          </select>\\n        </div>\\n\\n\\n\\n        <div class=\"col-xs-4\"\\n             ng-switch=\"variable.type\">\\n          <input ng-switch-when=\"\"\\n                 readonly\\n                 type=\"text\"\\n                 class=\"form-control\"\\n                 placeholder=\"{{ \\'VARIABLE_VALUE\\' | translate }}\" />\\n\\n\\n          <input ng-switch-when=\"Boolean\"\\n                 class=\"form-control\"\\n                 type=\"checkbox\"\\n                 ng-model=\"variable.value\"\\n                 ng-checked=\"variable.value\"\\n                 cam-variable-name=\"{{ variable.name }}\"\\n                 cam-variable-type=\"{{ variable.type }}\" />\\n\\n\\n          <input ng-switch-default\\n                 class=\"form-control\"\\n                 type=\"{{ variableTypes[variable.type] }}\"\\n                 required\\n                 ng-model=\"variable.value\"\\n                 name=\"value\"\\n                 cam-variable-name=\"{{ variable.name }}\"\\n                 cam-variable-type=\"{{ variable.type }}\"\\n                 placeholder=\"{{ \\'VARIABLE_VALUE\\' | translate }}\" />\\n\\n          <span ng-if=\"repeatForm.value.$invalid && repeatForm.value.$dirty\" class=\"has-error\">\\n            <span ng-if=\"repeatForm.value.$error.required\"\\n                  class=\"help-block\">\\n              {{ \\'REQUIRED_FIELD\\' | translate }}\\n            </span>\\n            <span ng-if=\"repeatForm.value.$error.camVariableType\"\\n                  class=\"help-block\">\\n              Only a {{ variable.type }} value is allowed\\n            </span>\\n          </span>\\n\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n  <div class=\"form-group\"\\n       ng-if=\"!options.hideLoadVariablesButton && !variablesLoaded\">\\n    <div class=\"col-xs-2 row-action\">\\n      <a ng-click=\"loadVariables()\">\\n        <span class=\"hidden-sm hidden-xs\"\\n              translate=\"LOAD_VARIABLES\">Load Variables</span>\\n        <span class=\"glyphicon glyphicon-download\"></span>\\n      </a>\\n    </div>\\n  </div>\\n\\n</form>\\n';});\n\n","define('scripts/form/directives/cam-tasklist-form-generic-variables',[\n  'angular',\n  'text!./cam-tasklist-form-generic-variables.html'\n], function(\n  angular,\n  template\n) {\n  'use strict';\n\n  return ['camAPI', 'Notifications', '$translate', function(camAPI, Notifications, $translate){\n\n    return {\n\n      restrict: 'A',\n\n      require: '^camTasklistForm',\n\n      template: template,\n\n      link: function($scope, $element, attrs, formController) {\n\n        var Task = camAPI.resource('task');\n\n        $scope.$watch('tasklistForm', function(value) {\n          $scope.variablesLoaded = false;\n        });\n\n        var emptyVariable = {\n          name:   '',\n          value:  '',\n          type:   ''\n        };\n\n        var variableTypes = $scope.variableTypes = {\n          'Boolean':  'checkbox', // handled via switch in HTML template\n          'Integer':  'text',\n          'Long':     'text',\n          'Short':    'text',\n          'Double':   'text',\n          'String':   'text',\n          'Date':     'text'\n        };\n\n        $scope.addVariable = function() {\n          var newVariable = angular.copy(emptyVariable);\n          $scope.variables.push(newVariable);\n        };\n\n        $scope.removeVariable = function(delta) {\n          var vars = [];\n\n          angular.forEach($scope.variables, function(variable, d) {\n            if (d != delta) {\n              vars.push(variable);\n            }\n          });\n\n          $scope.variables = vars;\n        };\n\n        $scope.getVariableNames = function() {\n          return $scope.variables.map(function(variable) {\n            return variable.name;\n          });\n        };\n\n        $scope.loadVariables = function() {\n          $scope.variablesLoaded = true;\n          Task.formVariables({\n            id: formController.getParams().taskId,\n            deserializeValues: false\n          }, function(err, result) {\n            if(err) {\n              $scope.variablesLoaded = false;\n              return $translate('LOAD_VARIABLES_FAILURE').then(function(translated) {\n                Notifications.addError({\n                  status: translated,\n                  message: err.message,\n                  scope: $scope\n                });\n              });\n            }\n\n            var variableAdded = false;\n            angular.forEach(result, function(value, name) {\n              if(variableTypes[value.type]) {\n                $scope.variables.push({\n                  name : name,\n                  value: value.value,\n                  type:  value.type,\n                  fixedName : true\n                });\n                variableAdded = true;\n              }\n            });\n            if(!variableAdded) {\n              $translate('NO_TASK_VARIABLES').then(function(translated) {\n                Notifications.addMessage({\n                  duration: 5000,\n                  status: translated,\n                  scope: $scope\n                });\n              });\n            }\n          });\n        };\n      }\n    };\n  }];\n});\n\n","\ndefine('text!scripts/form/directives/cam-tasklist-form-embedded.html',[],function () { return '<div class=\"form-container\">\\n</div>';});\n\n","define('scripts/form/directives/cam-tasklist-form-embedded',[\n  'angular',\n  'text!./cam-tasklist-form-embedded.html'\n], function(\n  angular,\n  template\n) {\n  'use strict';\n\n\n  return [\n    'CamForm',\n    'camAPI',\n    '$timeout',\n  function(\n    CamForm,\n    camAPI,\n    $timeout\n  ){\n\n    return {\n\n      restrict: 'A',\n\n      require: '^camTasklistForm',\n\n      scope: true,\n\n      template: template,\n\n      link : function($scope, $element, attrs, formController) {\n\n        var container = $element.find('.form-container');\n        var camForm = null;\n        var form = $scope.form = {\n          '$valid': false,\n          '$invalid': true\n        };\n\n        $scope.$watch('tasklistForm', function (value) {\n          if (value) {\n            showForm(container, value, formController.getParams());\n          }\n        });\n\n        $scope.$watch(function() {\n          return form && form.$valid;\n        }, function(value) {\n          formController.notifyFormValidated(!value);\n        });\n\n        // watch for changes in the form\n        $scope.$watch(function() {\n          return form && form.$dirty;\n        }, function(value) {\n          formController.notifyFormDirty(value);\n        });\n\n        function showForm(container, tasklistForm, params) {\n          var formUrl = tasklistForm.key;\n\n          params = angular.copy(params);\n\n          delete params.processDefinitionKey;\n\n          angular.extend(params, {\n            containerElement: container,\n            client: camAPI,\n            formUrl: formUrl,\n            done: done\n          });\n\n          camForm = new CamForm(params);\n\n        }\n\n        var done = function (err, _camForm) {\n          if (err) {\n            return formController.notifyFormInitializationFailed(err);\n          }\n          camForm = _camForm;\n\n          var formName = _camForm.formElement.attr('name');\n          var camFormScope = _camForm.formElement.scope();\n\n          if (!camFormScope) {\n            return;\n          }\n\n          form = camFormScope[formName];\n          form.$setPristine();\n          formController.notifyFormInitialized();\n        };\n\n        var complete = function (callback) {\n          camForm.submit(callback);\n        };\n\n        var save = function(evt) {\n          form.$setPristine();\n          camForm.store();\n\n          // manually trigger a mouseleave event to make the tooltip disappear\n          $timeout(function(){\n            angular.element(evt.target).triggerHandler($.Event('mouseleave'));\n          });\n        };\n\n        formController.registerCompletionHandler(complete);\n        formController.registerSaveHandler(save);\n\n        $scope.$on('authentication.login.required', function() {\n          save();\n        });\n\n      }\n\n    };\n\n  }];\n\n});\n\n","\ndefine('text!scripts/form/directives/cam-tasklist-form-external.html',[],function () { return '<div class=\"text-help\">\\n  <span class=\"glyphicon glyphicon-info-sign\"></span>\\n  {{ EXTERNAL_FORM_NOTE | translate }}\\n</div>\\n\\n<a ng-href=\"{{ externalFormUrl  }}\"\\n   class=\"external-form\">\\n  {{ \\'EXTERNAL_FORM_LINK\\' |translate }}\\n  <span class=\"glyphicon glyphicon-folder-open\"></span>\\n</a>\\n';});\n\n","define('scripts/form/directives/cam-tasklist-form-external',[\n  'angular',\n  'text!./cam-tasklist-form-external.html'\n], function(\n  angular,\n  template\n) {\n  'use strict';\n\n\n  return [\n    '$location',\n  function($location) {\n\n    return {\n\n      restrict: 'A',\n\n      require: '^camTasklistForm',\n\n      scope: true,\n\n      template: template,\n\n      link : function($scope, $elment, attrs, formController) {\n\n        formController.notifyFormValidated(true);\n\n        $scope.externalFormUrl  = null;\n        $scope.EXTERNAL_FORM_NOTE = null;\n\n        $scope.$watch(function () {\n          return formController.getTasklistForm() && formController.getParams();\n        }, function (value) {\n\n          if (value) {\n\n            var tasklistForm = formController.getTasklistForm();\n            var params = formController.getParams();\n\n            var key = tasklistForm.key;\n\n            var taskId = params.taskId;\n            var processDefinitionKey = params.processDefinitionKey;\n\n            var queryParam = null;\n\n            if (taskId) {\n              queryParam = 'taskId=' + taskId;\n              $scope.EXTERNAL_FORM_NOTE = 'TASK_EXTERNAL_FORM_NOTE';\n\n            } else if (processDefinitionKey) {\n              queryParam = 'processDefinitionKey=' + processDefinitionKey;\n              $scope.EXTERNAL_FORM_NOTE = 'PROCESS_EXTERNAL_FORM_NOTE';\n\n            } else {\n              return formController.notifyFormInitializationFailed({\n                message: 'INIT_EXTERNAL_FORM_FAILED'\n              });\n            }\n\n            var absoluteUrl = $location.absUrl();\n            var url = $location.url();\n\n            // remove everthing after '#/', e.g.:\n            // '.../#/?task=abc&...' ---> '.../#/'\n            absoluteUrl = absoluteUrl.replace(url, '/');\n\n            $scope.externalFormUrl  = encodeURI(key + '?' + queryParam + '&callbackUrl=' + absoluteUrl);\n\n            formController.notifyFormInitialized();\n          }\n\n        });\n\n        $scope.$watch(function () {\n          return formController.getOptions();\n        }, function (options) {\n\n          if (options) {\n            options.hideCompleteButton = true;\n          }\n\n        });\n\n      }\n\n    };\n\n  }];\n\n});\n\n","define('scripts/form/directives/cam-tasklist-unique-value',[], function() {\n  'use strict';\n\n  return [function() {\n\n    return {\n\n      require: 'ngModel',\n\n      link: function($scope, $element, $attrs, ctrl) {\n\n        var validate = function(viewValue) {\n\n          var names = JSON.parse($attrs.camUniqueValue);\n\n          ctrl.$setValidity('camUniqueValue', true );\n\n          if (viewValue) {\n\n            if (ctrl.$pristine) {\n              ctrl.$pristine = false;\n              ctrl.$dirty = true;\n              $element.addClass('ng-dirty');\n              $element.removeClass('ng-pristine');\n            }\n\n            var nameFound = false;\n            for(var i = 0; i < names.length; i++) {\n              if(names[i] === viewValue) {\n                if(nameFound) {\n                  ctrl.$setValidity('camUniqueValue', false );\n                  break;\n                }\n                nameFound = true;\n              }\n            }\n          }\n          return viewValue;\n        };\n\n        ctrl.$parsers.unshift(validate);\n        ctrl.$formatters.push(validate);\n\n        $attrs.$observe('camUniqueValue', function(comparisonModel){\n          return validate(ctrl.$viewValue);\n        });\n      }\n    };\n  }];\n});\n","define('scripts/form/index',[\n  'angular',\n  './directives/cam-tasklist-form',\n  './directives/cam-tasklist-form-generic',\n  './directives/cam-tasklist-form-generic-variables',\n  './directives/cam-tasklist-form-embedded',\n  './directives/cam-tasklist-form-external',\n\n  './directives/cam-tasklist-unique-value'\n], function(\n  angular,\n  camTasklistForm,\n  camTasklistFormGeneric,\n  camTasklistFormGenericVariables,\n  camTasklistFormEmbedded,\n  camTasklistFormExternal,\n  camTasklistUniqueValue\n) {\n  'use strict';\n\n  var formModule = angular.module('cam.tasklist.form', [\n    'ui.bootstrap'\n  ]);\n\n  formModule.directive('camTasklistForm', camTasklistForm);\n  formModule.directive('camTasklistFormGeneric', camTasklistFormGeneric);\n  formModule.directive('camTasklistFormGenericVariables', camTasklistFormGenericVariables);\n  formModule.directive('camTasklistFormEmbedded', camTasklistFormEmbedded);\n  formModule.directive('camTasklistFormExternal', camTasklistFormExternal);\n  formModule.directive('camUniqueValue', camTasklistUniqueValue);\n\n  return formModule;\n});\n\n","\ndefine('text!scripts/filter/directives/cam-tasklist-filters.html',[],function () { return '<div ng-show=\"!state.$loaded && !state.$error\"\\n     class=\"loader\">\\n  <span class=\"animate-spin glyphicon glyphicon-refresh\"></span>\\n  {{ \\'LOADING\\' | translate }}\\n</div>\\n\\n<div ng-show=\"state.$error\" class=\"alert alert-danger\" role=\"alert\">\\n  <span class=\"glyphicon glyphicon-exclamation-sign\"></span>\\n  <strong class=\"status\">{{ \\'FAILURE\\' | translate }}:</strong>\\n  <span class=\"message\">{{ \\'FILTERS_LOADING_FAILURE\\' | translate }}</span>\\n</div>\\n\\n<div ng-show=\"state.$loaded && !state.$error\">\\n\\n  <div ng-hide=\"totalItems\"\\n       class=\"well\">\\n    <span class=\"glyphicon glyphicon-info-sign\"></span>\\n    {{ \\'NO_AVAILABLE_FILTER\\' | translate }}\\n  </div>\\n\\n  <div ng-show=\"totalItems\"\\n       ng-repeat=\"(delta, filter) in filters | orderBy:\\'properties.priority\\'\"\\n       class=\"task-filter-wrapper\"\\n       ng-class=\"{active: isFocused(filter)}\"\\n       ng-style=\"{\\'z-index\\': ((filters.length + 10) - delta) }\">\\n\\n    <div class=\"task-filter\"\\n         ng-style=\"filter.style\"\\n         ng-click=\"focus(filter)\">\\n\\n      <div ng-if=\"isFocused(filter)\"\\n           class=\"counter\">{{ filterCount }}</div>\\n\\n      <a ng-click=\"openModal($event, filter)\"\\n         class=\"edit-filter\">\\n        <span class=\"glyphicon glyphicon-pencil\"></span>\\n        <span class=\"hidden-sm hidden-xs hidden-md\"\\n              translate=\"FILTER_DETAILS\">Filter details</span>\\n      </a>\\n\\n      <h4 class=\"name\"\\n          tooltip=\"{{ filter.properties.description }}\"\\n          tooltip-placement=\"top\">{{ filter.name }}</h4>\\n    </div>\\n  </div>\\n</div>\\n';});\n\n","define('scripts/filter/directives/cam-tasklist-filters',[\n  'text!./cam-tasklist-filters.html',\n  'angular'\n], function(\n  template,\n  angular\n) {\n  'use strict';\n\n  var $ = angular.element;\n  var each = angular.forEach;\n\n  var noop = function () {};\n\n  return [function() {\n\n    return {\n\n      restrict: 'A',\n      scope: {\n        filtersData: '=',\n        openModal: '&'\n      },\n\n      template: template,\n\n      controller: [\n        '$scope',\n        'search',\n      function (\n        $scope,\n        search\n      ) {\n\n        var filtersData = $scope.filtersData = $scope.filtersData.newChild($scope);\n\n        $scope.openModal = $scope.openModal() || noop;\n\n        // observe ////////////////////////////////////////////////////////////////////////////////\n\n        /**\n         * observe the count for the current filter\n         */\n        filtersData.observe('taskList', function(taskList) {\n          $scope.filterCount = taskList.count;\n        });\n\n        /**\n         * observe list of filters to set the background-color on a filter\n         */\n        $scope.state = filtersData.observe('filters', function(filters) {\n\n          $scope.totalItems = filters.length;\n\n          for (var i = 0, filter; !!(filter = filters[i]); i++) {\n            // read background color from properties\n            filter.style = {\n              'border-color': filter.properties.color,\n              'background-color': filter.properties.color\n            };\n\n          }\n\n          $scope.filters = filters;\n\n        });\n\n        filtersData.observe('currentFilter', function (currentFilter) {\n          $scope.currentFilter = currentFilter;\n        });\n\n        // selection ////////////////////////////////////////////////////////////////\n\n        /**\n         * select a filter\n         */\n        $scope.focus = function(filter) {\n          $scope.filterCount = undefined;\n\n          search.updateSilently({\n            filter: filter.id\n          });\n\n          filtersData.changed('currentFilter');\n        };\n\n        /**\n         * returns true if the provided filter is the focused filter\n         */\n        $scope.isFocused = function(filter) {\n          return filter.id === $scope.currentFilter.id;\n        };\n\n      }]\n    };\n  }];\n});\n\n","\ndefine('text!scripts/filter/directives/cam-tasklist-filter-modal-form.html',[],function () { return '<form name=\"filterForm\" role=\"form\">\\n\\n  <accordion close-others=\"true\">\\n\\n    <accordion-group is-open=\"accordion.general\">\\n\\n      <accordion-heading>\\n        {{ \\'FILTER_FORM_BASICS\\' | translate }}\\n        <span class=\"glyphicon glyphicon-exclamation-sign\"\\n              ng-show=\"showHint(\\'filterGeneralForm\\')\"></span>\\n      </accordion-heading>\\n\\n      <div class=\"task-filter-hint text-help\">\\n        <span class=\"glyphicon glyphicon-info-sign\"></span>\\n        {{ \\'FILTER_FORM_BASICS_HINT\\' | translate }}\\n      </div>\\n\\n      <div cam-tasklist-filter-modal-form-general\\n           filter=\"filter\"\\n           accesses=\"accesses\">\\n      </div>\\n\\n    </accordion-group>\\n\\n    <accordion-group is-open=\"accordion.criteria\">\\n      <accordion-heading>\\n        {{ \\'FILTER_FORM_CRITERIA\\' | translate }}\\n        <span class=\"glyphicon glyphicon-exclamation-sign\"\\n              ng-show=\"showHint(\\'filterCriteriaForm\\')\"></span>\\n      </accordion-heading>\\n\\n      <div class=\"task-filter-hint text-help\">\\n        <span class=\"glyphicon glyphicon-info-sign\"></span>\\n        {{ \\'FILTER_FORM_CRITERIA_HINT\\' | translate }}\\n      </div>\\n\\n      <div cam-tasklist-filter-modal-form-criteria\\n           filter=\"filter\"\\n           accesses=\"accesses\">\\n      </div>\\n\\n    </accordion-group>\\n\\n    <accordion-group is-open=\"accordion.permission\">\\n      <accordion-heading>\\n        {{ \\'FILTER_FORM_PERMISSIONS\\' | translate }}\\n        <span class=\"glyphicon glyphicon-exclamation-sign\"\\n              ng-show=\"showHint(\\'filterPermissionForm\\')\"></span>\\n      </accordion-heading>\\n\\n      <div class=\"task-filter-hint text-help\">\\n        <span class=\"glyphicon glyphicon-info-sign\"></span>\\n        {{ \\'FILTER_FORM_PERMISSIONS_HINT\\' | translate }}\\n      </div>\\n\\n      <div cam-tasklist-filter-modal-form-permission\\n           filter=\"filter\"\\n           accesses=\"accesses\"\\n           filter-modal-form-data=\"filterModalFormData\"\\n           is-open=\"accordion.permission\">\\n      </div>\\n\\n    </accordion-group>\\n\\n    <accordion-group is-open=\"accordion.variable\">\\n      <accordion-heading>\\n        {{ \\'FILTER_FORM_VARIABLES\\' | translate }}\\n        <span class=\"glyphicon glyphicon-exclamation-sign\"\\n              ng-show=\"showHint(\\'filterVariableForm\\')\"></span>\\n      </accordion-heading>\\n\\n      <div class=\"task-filter-hint text-help\">\\n        <span class=\"glyphicon glyphicon-info-sign\"></span>\\n        {{ \\'FILTER_FORM_VARIABLES_HINT\\' | translate }}\\n      </div>\\n\\n      <div cam-tasklist-filter-modal-form-variable\\n           filter=\"filter\"\\n           accesses=\"accesses\">\\n      </div>\\n\\n    </accordion-group>\\n\\n  </accordion>\\n\\n</form>\\n\\n';});\n\n","define('scripts/filter/directives/cam-tasklist-filter-modal-form',[\n  'angular',\n  'text!./cam-tasklist-filter-modal-form.html'\n], function(\n  angular,\n  template\n) {\n  'use strict';\n\n  var isArray = angular.isArray;\n\n  var noop = function () {};\n\n  var GENERAL_ACCORDION =       'general',\n      PERMISSION_ACCORDION =    'permission',\n      CRITERIA_ACCORDION =      'criteria',\n      VARIABLE_ACCORDION =      'variable';\n\n  return [function() {\n\n    return {\n\n      restrict: 'A',\n      scope: {\n        filter: '=',\n        filterModalData: '=',\n        registerIsValidProvider: '&',\n        registerPostFilterSavedProvider: '&'\n      },\n\n      template: template,\n\n      controller: [\n        '$scope',\n      function (\n        $scope\n      ) {\n\n        // init ////////////////////////////////////////////////////////////////////////\n\n        var filterModalFormData = $scope.filterModalFormData = $scope.filterModalData.newChild($scope);\n\n        $scope.registerIsValidProvider = $scope.registerIsValidProvider() || noop;\n        $scope.registerPostFilterSavedProvider = $scope.registerPostFilterSavedProvider() || noop;\n\n        var opened = GENERAL_ACCORDION;\n        $scope.accordion = {\n          general       : opened === GENERAL_ACCORDION,\n          permission    : opened === PERMISSION_ACCORDION,\n          criteria      : opened === CRITERIA_ACCORDION,\n          variable      : opened === VARIABLE_ACCORDION\n        };\n\n        // observe //////////////////////////////////////////////////////////////////////\n\n        filterModalFormData.observe('accesses', function(accesses) {\n          $scope.accesses = accesses;\n        });\n\n        // init isValidProvider ////////////////////////////////////////////////////////\n\n        var isValidProvider = function () {\n          return $scope.filterForm.$valid;\n        };\n\n        $scope.registerIsValidProvider(isValidProvider);\n\n        // handle hints ////////////////////////////////////////////////////////////////\n\n        var hintProvider = {};\n        this.registerHintProvider = function (formName, fn) {\n          fn = fn || noop;\n          hintProvider[formName] = fn;\n        };\n\n        $scope.showHint = function (formName) {\n          var provider = hintProvider[formName];\n          return provider && provider();\n        };\n\n        // handle submit after filter has been saved succesfully //////////////////////\n\n        var postFilterSavedProviders = [];\n        this.registerPostFilterSavedProvider = function (provider) {\n          postFilterSavedProviders.push(provider || function (filter, callback) { return callback(); } );\n        };\n\n        var postFilterSavedProvider = function (filter, callback) {\n\n          var count = postFilterSavedProviders.length;\n\n          if (count === 0) {\n            return callback();\n          }\n\n          var errors = [];\n          var localCallback = function (err) {\n            count = count - 1;\n\n            if (err) {\n              if (isArray(err)) {\n                if (err.length) {\n                  errors = errors.concat(err);\n                }\n              }\n              else {\n                errors.push(err);\n              }\n            }\n\n            if (count === 0) {\n              if (errors.length === 1) {\n                return callback(errors[0]);\n              }\n              else if (errors.length) {\n                return callback(errors);\n              }\n              else {\n                callback();\n              }\n            }\n\n          };\n\n          for (var i = 0, provider; !!(provider = postFilterSavedProviders[i]); i++) {\n            provider(filter, localCallback);\n          }\n\n        };\n\n        $scope.registerPostFilterSavedProvider(postFilterSavedProvider);\n\n        // helper ///////////////////////////////////////////////////////////////////////\n\n        this.removeArrayItem = function(arr, delta) {\n          var newArr = [];\n          for (var key in arr) {\n            if (key != delta) {\n              newArr.push(arr[key]);\n            }\n          }\n          return newArr;\n        };\n\n      }]\n\n    };\n\n  }];\n\n});\n\n","\ndefine('text!scripts/filter/directives/cam-tasklist-filter-modal-form-general.html',[],function () { return '<div ng-form class=\"form-horizontal\" role=\"form\" name=\"filterGeneralForm\">\\n\\n  <div class=\"row\">\\n    <div class=\"col-xs-8\">\\n      <div class=\"form-group\">\\n\\n        <label for=\"filterName\"\\n               class=\"col-xs-3 control-label\"\\n               translate=\"FILTER_NAME_LABEL\">Name</label>\\n\\n        <div class=\"col-xs-9\">\\n          <input class=\"form-control\"\\n                 name=\"filterName\"\\n                 ng-model=\"filter.name\"\\n                 type=\"text\"\\n                 required\\n                 placeholder=\"{{ \\'FILTER_NAME_PLACEHOLDER\\' | translate }}\"\\n                 ng-readonly=\"filter.id && !accesses.update\"\\n                 ng-disabled=\"filter.id && !accesses.update\" />\\n\\n          <span ng-if=\"this.filterGeneralForm.filterName.$invalid && this.filterGeneralForm.filterName.$dirty\"\\n                class=\"has-error\">\\n            <span ng-show=\"this.filterGeneralForm.filterName.$error.required\" class=\"help-block\">\\n              {{ \\'REQUIRED_FIELD\\' | translate }}\\n            </span>\\n          </span>\\n\\n        </div>\\n\\n      </div>\\n    </div>\\n\\n    <div class=\"col-xs-4\">\\n\\n      <div class=\"form-group\">\\n\\n        <label for=\"filter-form-color\"\\n               class=\"col-xs-6 control-label\"\\n               translate=\"FILTER_COLOR_LABEL\">Color</label>\\n\\n        <div class=\"col-xs-6\">\\n\\n          <input class=\"form-control\"\\n                 name=\"filterColor\"\\n                 ng-model=\"filter.properties.color\"\\n                 ng-pattern=\"/^#([0-9a-f]{6}|[0-9a-f]{3})$/i\"\\n                 type=\"color\"\\n                 ng-readonly=\"filter.id && !accesses.update\"\\n                 ng-disabled=\"filter.id && !accesses.update\" />\\n\\n          <span ng-if=\"this.filterGeneralForm.filterColor.$invalid && this.filterGeneralForm.filterColor.$dirty\"\\n                class=\"has-error\">\\n            <span ng-show=\"this.filterGeneralForm.filterColor.$error.pattern\" class=\"help-block\">\\n              {{ \\'REQUIRED_HEX_COLOR_FIELD\\' | translate }}\\n            </span>\\n          </span>\\n\\n        </div>\\n      </div>\\n\\n    </div>\\n  </div>\\n\\n  <div class=\"row\">\\n    <div class=\"col-xs-8\">\\n      <div class=\"form-group\">\\n\\n        <label for=\"filter-form-description\"\\n               class=\"col-xs-3 control-label\"\\n               translate=\"FILTER_DESCRIPTION_LABEL\">Description</label>\\n\\n        <div class=\"col-xs-9\">\\n          <input class=\"col-xs-9 form-control\"\\n                 name=\"filterDescription\"\\n                 ng-model=\"filter.properties.description\"\\n                 type=\"text\"\\n                 placeholder=\"{{ \\'FILTER_DESCRIPTION_PLACEHOLDER\\' | translate }}\"\\n                 ng-readonly=\"filter.id && !accesses.update\"\\n                 ng-disabled=\"filter.id && !accesses.update\" />\\n        </div>\\n\\n      </div>\\n    </div>\\n\\n    <div class=\"col-xs-4\">\\n      <div class=\"form-group\">\\n\\n        <label for=\"filter-form-priority\"\\n               class=\"col-xs-6 control-label\"\\n               translate=\"FILTER_PRIORITY_LABEL\">Priority</label>\\n\\n        <div class=\"col-xs-6\">\\n          <input class=\"form-control\"\\n                 name=\"filterPriority\"\\n                 ng-model=\"filter.properties.priority\"\\n                 ng-pattern=\"/^-?[\\\\d]+$/\"\\n                 type=\"text\"\\n                 ng-readonly=\"filter.id && !accesses.update\"\\n                 ng-disabled=\"filter.id && !accesses.update\" />\\n\\n\\n          <span ng-if=\"this.filterGeneralForm.filterPriority.$invalid && this.filterGeneralForm.filterPriority.$dirty\"\\n                class=\"has-error\">\\n            <span ng-show=\"this.filterGeneralForm.filterPriority.$error.pattern\" class=\"help-block\">\\n              {{ \\'REQUIRED_INTEGER_FIELD\\' | translate }}\\n            </span>\\n          </span>\\n\\n        </div>\\n\\n      </div>\\n    </div>\\n  </div>\\n\\n  <div class=\"row\">\\n    <div class=\"col-xs-8\">\\n    </div>\\n\\n    <div class=\"col-xs-4\">\\n      <label for=\"filter-form-refresh\"\\n             class=\"col-xs-6 control-label\">\\n        {{ \\'FILTER_REFRESH_LABEL\\' | translate }}\\n      </label>\\n\\n      <div class=\"col-xs-6\">\\n        <input class=\"form-control\"\\n               name=\"filterRefresh\"\\n               ng-model=\"filter.properties.refresh\"\\n               type=\"checkbox\"\\n               tooltip-append-to-body=\"false\"\\n               tooltip=\"{{ \\'FILTER_REFRESH_TOOLTIP\\' | translate }}\"\\n               ng-disabled=\"filter.id && !accesses.update\" />\\n      </div>\\n    </div>\\n  </div>\\n\\n</div>\\n';});\n\n","define('scripts/filter/directives/cam-tasklist-filter-modal-form-general',[\n  'angular',\n  'text!./cam-tasklist-filter-modal-form-general.html'\n], function(\n  angular,\n  template\n) {\n  'use strict';\n\n  return [function() {\n\n    return {\n\n      restrict: 'A',\n      require: '^camTasklistFilterModalForm',\n      scope: {\n        filter: '=',\n        accesses: '='\n      },\n\n      template: template,\n\n      link: function ($scope, $element, attrs, parentCtrl) {\n\n        // init //////////////////////////////////////////////////////////\n\n        var _form = $scope.filterGeneralForm;\n\n        var controls = [];\n        controls.push(_form.filterColor);\n        controls.push(_form.filterName);\n        controls.push(_form.filterPriority);\n        controls.push(_form.filterDescription);\n        controls.push(_form.filterRefresh);\n\n        // register hint provider ////////////////////////////////////////\n\n        var showHintProvider = function () {\n          for (var i = 0, control; !!(control = controls[i]); i++) {\n            if (control.$dirty && control.$invalid) {\n              return true;\n            }\n          }\n          return false;\n        };\n\n        parentCtrl.registerHintProvider('filterGeneralForm', showHintProvider);\n      }\n\n    };\n\n  }];\n\n});\n\n","\ndefine('text!scripts/filter/directives/cam-tasklist-filter-modal-form-criteria.html',[],function () { return '<div ng-form class=\"form-horizontal\" name=\"filterCriteriaForm\" role=\"form\">\\n\\n  <div class=\"row labels-left\">\\n    <div class=\"col-xs-2 row-action\" ng-show=\"!filter.id || (filter.id && accesses.update)\">\\n      <a ng-click=\"addCriterion()\"\\n         href>\\n        <span class=\"hidden-sm hidden-xs\">{{ \\'FILTER_ADD_CRITERION\\' | translate }}</span>\\n        <span class=\"glyphicon glyphicon-plus-sign\"></span>\\n      </a>\\n    </div>\\n\\n    <div ng-class=\"{ \\'col-xs-10\\': !filter.id || (filter.id && accesses.update) , \\'col-xs-12\\': !(!filter.id || (filter.id && accesses.update)) }\">\\n      <div class=\"form-group\" ng-show=\"query.length\">\\n        <label class=\"col-xs-6 control-label\"\\n               translate=\"FILTER_CRITERIA_KEY\">Key</label>\\n        <label class=\"col-xs-6 control-label\"\\n               translate=\"FILTER_CRITERIA_VALUE\">Value</label>\\n      </div>\\n    </div>\\n  </div>\\n\\n  <div ng-repeat=\"(delta, queryParam) in query\" class=\"row\">\\n\\n    <div ng-form name=\"criteriaFieldForm\">\\n      <div ng-init=\"addForm(this.criteriaFieldForm)\"></div>\\n\\n      <div class=\"col-xs-2 row-action\" ng-show=\"!filter.id || (filter.id && accesses.update)\">\\n        <a ng-click=\"removeCriterion(delta)\"\\n           href>\\n          <span class=\"hidden-sm hidden-xs\">{{ \\'FILTER_REMOVE_CRITERION\\' | translate }}</span>\\n          <span class=\"glyphicon glyphicon-minus-sign\"></span>\\n        </a>\\n      </div>\\n\\n      <div ng-class=\"{ \\'col-xs-10\\': !filter.id || (filter.id && accesses.update) , \\'col-xs-12\\': !(!filter.id || (filter.id && accesses.update)) }\">\\n        <div class=\"form-group\">\\n\\n          <div class=\"col-xs-6\">\\n\\n            <select class=\"form-control\"\\n                    ng-model=\"queryParam.key\"\\n                    name=\"queryParamKey\"\\n                    ng-change=\"valueChanged(queryParam, this.criteriaFieldForm.queryParamValue)\"\\n                    cam-unique-value=\"{{ getQueryParamKeys() }}\"\\n                    required\\n                    ng-disabled=\"filter.id && !accesses.update\">\\n              <optgroup ng-repeat=\"criteriaGroup in criteria\"\\n                        label=\"{{ criteriaGroup.group | translate }}\">\\n\\n                <option ng-repeat=\"criterion in criteriaGroup.options\"\\n                        ng-selected=\"criterion.name === getCriterionName(queryParam.key)\"\\n                        ng-value=\"criterion.name\">\\n\\n                  {{ criterion.label | translate }}\\n                  {{ (criterion.expressionSupport ? \\'*\\' : \\'\\') }}\\n\\n                </option>\\n              </optgroup>\\n\\n            </select>\\n            <div ng-if=\"this.criteriaFieldForm.queryParamKey.$invalid && this.criteriaFieldForm.queryParamKey.$dirty\"\\n                    class=\"has-error\">\\n                <span ng-show=\"this.criteriaFieldForm.queryParamKey.$error.required\" class=\"help-block\">\\n                  {{ \\'REQUIRED_FIELD\\' | translate }}\\n                </span>\\n                <span ng-show=\"this.criteriaFieldForm.queryParamKey.$error.camUniqueValue\" class=\"help-block\">\\n                  {{ \\'REQUIRE_UNIQUE_KEY\\' | translate }}\\n                </span>\\n            </div>\\n          </div>\\n\\n          <div class=\"col-xs-6\">\\n\\n            <div ng-if=\"!booleanCriterion[getCriterionName(queryParam.key)]\">\\n              <input class=\"form-control\"\\n                     name=\"queryParamValue\"\\n                     type=\"text\"\\n                     ng-model=\"queryParam.value\"\\n                     ng-change=\"valueChanged(queryParam, this.criteriaFieldForm.queryParamValue)\"\\n                     required\\n                     ng-readonly=\"filter.id && !accesses.update\"\\n                     ng-disabled=\"filter.id && !accesses.update\" />\\n              <span class=\"help-block text-help\"\\n                    ng-show=\"isCriteriaHelpAvailable(queryParam.key)\">\\n                {{ getCriteriaHelp(queryParam.key) | translate }}\\n              </span>\\n\\n              <div ng-if=\"this.criteriaFieldForm.queryParamValue.$invalid && this.criteriaFieldForm.queryParamValue.$dirty\"\\n                   class=\"has-error\">\\n                <span ng-show=\"this.criteriaFieldForm.queryParamValue.$error.required\"\\n                      class=\"help-block\">\\n                  {{ \\'REQUIRED_FIELD\\' | translate }}\\n                </span>\\n                <span ng-show=\"this.criteriaFieldForm.queryParamValue.$error.number\"\\n                      class=\"help-block\">\\n                  {{ \\'REQUIRED_INTEGER_FIELD\\' | translate }}\\n                </span>\\n                <span ng-show=\"this.criteriaFieldForm.queryParamValue.$error.date\"\\n                      class=\"help-block\">\\n                  {{ \\'INVALID_DATE\\' | translate }}\\n                </span>\\n              </div>\\n            </div>\\n\\n            <div ng-if=\"booleanCriterion[getCriterionName(queryParam.key)]\"\\n                 class=\"form-control-static\">\\n              <span class=\"glyphicon glyphicon-ok\"></span>\\n              <input type=\"hidden\"\\n                     name=\"queryParamValue\"\\n                     ng-model=\"queryParam.value\" />\\n            </div>\\n\\n          </div>\\n\\n        </div>\\n\\n      </div>\\n    </div>\\n\\n  </div>\\n\\n  <div ng-if=\"canIncludeAssignedTasks()\"\\n       class=\"row\">\\n    <div class=\"col-xs-10 col-xs-offset-2 checkbox\">\\n      <label>\\n        <input type=\"checkbox\"\\n               class=\"form-control\"\\n               ng-model=\"filter.includeAssignedTasks\" />\\n        {{ \\'FILTER_CRITERIA_INCLUDE_ASSIGNED_TASKS\\' | translate }}\\n      </label>\\n      <div class=\"help-block\"\\n           translate=\"FILTER_CRITERIA_INCLUDE_ASSIGNED_TASKS_HINT\"></div>\\n    </div>\\n  </div>\\n</div>\\n';});\n\n","define('scripts/filter/directives/cam-tasklist-filter-modal-criteria',[],function() {\n  'use strict';\n\n  var dateExpLangHelp = 'E.g.: `${ now() }`, `${ dateTime() }` or `${ dateTime().plusWeeks(2) }`';\n  var userExpLangHelp = 'E.g.: `${ currentUser() }`';\n  var commaSeparatedExps = 'List of values separated by comma or an expression which evaluates to a list. E.g.: `camunda-admin, accounting` or `${ currentUserGroups() }`';\n  var commaSeparatedValues = 'List of values seperated by comma. E.g.: `keyC, keyA, keyB`';\n\n  // yyyy-MM-dd'T'HH:mm:ss\n  var dateRegex = /^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(|\\.[0-9]{0,4})(|Z)$/;\n  var expressionsRegex = /^[\\s]*(\\#|\\$)\\{/;\n  var numberRegex = /^-?[\\d]+$/;\n\n  function isValid(regex, error, exprSupport) {\n\n    return function (value) {\n\n      if (exprSupport) {\n        if (expressionsRegex.test(value)) {\n          return { valid : true };\n        }\n      }\n\n      if (regex.test(value)) {\n        return { valid : true };\n\n      }\n      else {\n        return {\n          valid : false,\n          error: error || 'format'\n        };\n      }\n    };\n  }\n\n  var criteria = [\n    {\n      group: 'Process Instance',\n      options: [\n        {\n          name: 'processInstanceId',\n          label: 'Id'\n        },\n        {\n          name: 'processInstanceBusinessKey',\n          label: 'Business Key'\n        },\n        {\n          name: 'processInstanceBusinessKeyLike',\n          label: 'Business Key Like'\n        }\n      ]\n    },\n    {\n      group: 'Process definition',\n      options: [\n        {\n          name: 'processDefinitionId',\n          label: 'Id'\n        },\n        {\n          name: 'processDefinitionKey',\n          label: 'Key'\n        },\n        {\n          name: 'processDefinitionKeyIn',\n          label: 'Key In',\n          help: commaSeparatedValues\n        },\n        {\n          name: 'processDefinitionName',\n          label: 'Name'\n        },\n        {\n          name: 'processDefinitionNameLike',\n          label: 'Name Like'\n        }\n      ]\n    },\n    {\n      group: 'Case Instance',\n      options: [\n        {\n          name: 'caseInstanceId',\n          label: 'Id'\n        },\n        {\n          name: 'caseInstanceBusinessKey',\n          label: 'Business Key'\n        },\n        {\n          name: 'caseInstanceBusinessKeyLike',\n          label: 'Business Key Like'\n        }\n      ]\n    },\n    {\n      group: 'Case definition',\n      options: [\n        {\n          name: 'caseDefinitionId',\n          label: 'Id'\n        },\n        {\n          name: 'caseDefinitionKey',\n          label: 'Key'\n        },\n        {\n          name: 'caseDefinitionName',\n          label: 'Name'\n        },\n        {\n          name: 'caseDefinitionNameLike',\n          label: 'Name Like'\n        }\n      ]\n    },\n    {\n      group: 'Other',\n      options: [\n        {\n          name: 'active',\n          label: 'Active',\n          bool: true\n        },\n        {\n          name: 'activityInstanceIdIn',\n          label: 'Activity Instance Id In',\n          help: commaSeparatedValues\n        },\n        {\n          name: 'executionId',\n          label: 'Execution Id'\n        }\n      ]\n    },\n    {\n      group: 'User / Group',\n      options: [\n        {\n          name: 'assignee',\n          label: 'Assignee',\n          expressionSupport: true,\n          help: userExpLangHelp\n        },\n        {\n          name: 'assigneeLike',\n          label: 'Assignee Like',\n          expressionSupport: true,\n          help: userExpLangHelp\n        },\n        {\n          name: 'owner',\n          label: 'Owner',\n          expressionSupport: true,\n          help: userExpLangHelp\n        },\n        {\n          name: 'candidateGroup',\n          label: 'Candidate Group',\n          expressionSupport: true,\n          includeAssignedTasksSupport: true\n        },\n        {\n          name: 'candidateGroups',\n          label: 'Candidate Groups',\n          expressionSupport: true,\n          help: commaSeparatedExps,\n          includeAssignedTasksSupport: true\n        },\n        {\n          name: 'candidateUser',\n          label: 'Candidate User',\n          expressionSupport: true,\n          help: userExpLangHelp,\n          includeAssignedTasksSupport: true\n        },\n        {\n          name: 'involvedUser',\n          label: 'Involved User',\n          expressionSupport: true,\n          help: userExpLangHelp\n        },\n        {\n          name: 'unassigned',\n          label: 'Unassigned',\n          bool: true\n        },\n        {\n          name: 'delegationState',\n          label: 'Delegation State'\n        }\n      ]\n    },\n    {\n      group: 'Task',\n      options: [\n        {\n          name: 'taskDefinitionKey',\n          label: 'Definition Key'\n        },\n        {\n          name: 'taskDefinitionKeyIn',\n          label: 'Definition Key In',\n          help: commaSeparatedValues\n        },\n        {\n          name: 'taskDefinitionKeyLike',\n          label: 'Definition Key Like'\n        },\n        {\n          name: 'name',\n          label: 'Name'\n        },\n        {\n          name: 'nameLike',\n          label: 'Name Like'\n        },\n        {\n          name: 'description',\n          label: 'Description'\n        },\n        {\n          name: 'descriptionLike',\n          label: 'Description Like'\n        },\n        {\n          name: 'priority',\n          label: 'Priority',\n          validate: isValid(numberRegex, 'number')\n        },\n        {\n          name: 'maxPriority',\n          label: 'Priority Max',\n          validate: isValid(numberRegex, 'number')\n        },\n        {\n          name: 'minPriority',\n          label: 'Priority Min',\n          validate: isValid(numberRegex, 'number')\n        }\n      ]\n    },\n    {\n      group: 'Dates',\n      validate: isValid(dateRegex, 'date', true),\n      options: [\n        {\n          name: 'createdBefore',\n          label: 'Created Before',\n          expressionSupport: true,\n          help: dateExpLangHelp\n        },\n        {\n          name: 'createdAfter',\n          label: 'Created After',\n          expressionSupport: true,\n          help: dateExpLangHelp\n        },\n        {\n          name: 'dueBefore',\n          label: 'Due Before',\n          expressionSupport: true,\n          help: dateExpLangHelp\n        },\n        {\n          name: 'dueAfter',\n          label: 'Due After',\n          expressionSupport: true,\n          help: dateExpLangHelp\n        },\n        {\n          name: 'followUpAfter',\n          label: 'Follow Up After',\n          expressionSupport: true,\n          help: dateExpLangHelp\n        },\n        {\n          name: 'followUpBefore',\n          label: 'Follow Up Before',\n          expressionSupport: true,\n          help: dateExpLangHelp\n        },\n        {\n          name: 'followUpBeforeOrNotExistent',\n          label: 'Follow Up Before or Not Existent',\n          expressionSupport: true,\n          help: dateExpLangHelp\n        }\n      ]\n    }\n  ];\n  return criteria.map(function (item) {\n    item.name = item.group.toLowerCase().replace(/[^a-z0-9-]+/g, '-');\n    return item;\n  });\n});\n\n","define('scripts/filter/directives/cam-tasklist-filter-modal-form-criteria',[\n  'angular',\n  'text!./cam-tasklist-filter-modal-form-criteria.html',\n  './cam-tasklist-filter-modal-criteria'\n], function(\n  angular,\n  template,\n  criteria\n) {\n  'use strict';\n\n  var each = angular.forEach;\n  var copy = angular.copy;\n\n  var includeAssignedTasksSupport = {};\n  var booleanCriterion            = {};\n  var criteriaExpressionSupport   = {};\n  var criteriaHelp                = {};\n  var criteriaValidator           = {};\n\n  var defaultValidate = function () {\n    return { valid : true };\n  };\n\n  each(criteria, function(group) {\n    each(group.options, function(criterion) {\n      includeAssignedTasksSupport[criterion.name] = criterion.includeAssignedTasksSupport;\n      if (includeAssignedTasksSupport[criterion.name]) {\n        includeAssignedTasksSupport[criterion.name +'Expression'] = true;\n      }\n\n      if (criterion.bool) {\n        booleanCriterion[criterion.name] = true;\n      }\n\n      criteriaExpressionSupport[criterion.name] = criterion.expressionSupport;\n      criteriaHelp[criterion.name]              = criterion.help      || group.help;\n      criteriaValidator[criterion.name]         = criterion.validate  || group.validate || defaultValidate;\n    });\n  });\n\n  return [function() {\n\n    return {\n\n      restrict: 'A',\n      require: '^camTasklistFilterModalForm',\n      scope: {\n        filter: '=',\n        accesses: '='\n      },\n\n      template: template,\n\n      link: function ($scope, $element, attrs, parentCtrl) {\n\n        var emptyCriterion = {\n          key: '',\n          value: ''\n        };\n\n        $scope.criteria = criteria;\n        $scope.criteriaExpressionSupport = criteriaExpressionSupport;\n        $scope.criteriaHelp = criteriaHelp;\n        $scope.booleanCriterion = booleanCriterion;\n\n        $scope.query = $scope.filter.query = $scope.filter.query || [];\n\n        // a little exception to deal with\n        $scope.query = $scope.filter.query = $scope.query.filter(function (item) {\n          if (item.key === 'includeAssignedTasks') {\n            $scope.includeAssignedTasks = $scope.filter.includeAssignedTasks = item.value;\n          }\n          return item.key !== 'includeAssignedTasks';\n        });\n\n        $scope.canIncludeAssignedTasks = function () {\n          for (var q = 0; q < $scope.query.length; q++) {\n            if (includeAssignedTasksSupport[$scope.query[q].key]) {\n              return true;\n            }\n          }\n          return false;\n        };\n\n        $scope.$watch('query', function () {\n          $scope.includeAssignedTasks = $scope.filter.includeAssignedTasks = (\n            $scope.canIncludeAssignedTasks() &&\n            $scope.filter.includeAssignedTasks\n          );\n        }, true);\n\n        // register handler to show or hide the accordion hint /////////////////\n\n        var showHintProvider = function () {\n          for (var i = 0, nestedForm; !!(nestedForm = nestedForms[i]); i++) {\n            var queryParamKey = nestedForm.queryParamKey;\n            var queryParamValue = nestedForm.queryParamValue;\n\n            if (queryParamKey.$dirty && queryParamKey.$invalid) {\n              return true;\n            }\n\n            if (queryParamValue.$dirty && queryParamValue.$invalid) {\n              return true;\n            }\n          }\n\n          return false;\n        };\n\n        parentCtrl.registerHintProvider('filterCriteriaForm', showHintProvider);\n\n        // handles each nested form//////////////////////////////////////////////\n\n        var nestedForms = [];\n        $scope.addForm = function (_form) {\n          nestedForms.push(_form);\n        };\n\n        // criterion interaction ///////////////////////////////////////////////\n\n        $scope.addCriterion = function() {\n          var _emptyCriteria = copy(emptyCriterion);\n          $scope.query.push(_emptyCriteria);\n        };\n\n        $scope.removeCriterion = function(delta) {\n          $scope.filter.query = $scope.query = parentCtrl.removeArrayItem($scope.query, delta);\n          nestedForms = parentCtrl.removeArrayItem(nestedForms, delta);\n        };\n\n        $scope.valueChanged = function(queryParam, control) {\n          control.$setValidity('number', true);\n          control.$setValidity('date', true);\n\n          if (booleanCriterion[queryParam.key]) {\n            queryParam.value = true;\n          }\n\n          else if (queryParam.value) {\n            if (control.$pristine) {\n              control.$setViewValue(queryParam.value);\n            }\n            var key = getCriterionName(queryParam.key);\n            var validationResult = criteriaValidator[key](queryParam.value);\n\n            if (!validationResult.valid) {\n              control.$setValidity(validationResult.error, false);\n            }\n          }\n        };\n\n        // helper //////////////////////////////////////////////////////////////\n\n        $scope.getQueryParamKeys = function() {\n          var result = [];\n\n          for (var i = 0, entry; !!(entry = $scope.query[i]); i++) {\n            var criterionName = getCriterionName(entry.key);\n            result.push(criterionName);\n\n            if (criteriaExpressionSupport[criterionName]) {\n              result.push(criterionName + 'Expression');\n            }\n          }\n\n          return result;\n        };\n\n        var getCriterionName = $scope.getCriterionName = function(name) {\n          if (!name) { return name; }\n          var simple = name.replace('Expression', '');\n          return simple;\n        };\n\n        var getCriteriaHelp = $scope.getCriteriaHelp = function (key) {\n          key = getCriterionName(key);\n\n          return criteriaHelp[key];\n        };\n\n        $scope.isCriteriaHelpAvailable = function (key) {\n          return !!getCriteriaHelp(key);\n        };\n\n      }\n\n    };\n\n  }];\n\n});\n\n","\ndefine('text!scripts/filter/directives/cam-tasklist-filter-modal-form-variable.html',[],function () { return '<div ng-form class=\"form-horizontal\" name=\"filterVariableForm\" role=\"form\">\\n\\n  <div ng-show=\"variables.length > 5\"\\n       class=\"alert alert-warning\"\\n       role=\"alert\">\\n    <span class=\"glyphicon glyphicon-exclamation-sign\"></span>\\n    {{ \\'FILTER_VARIABLES_AMOUNT_WARNING\\' | translate }}\\n  </div>\\n\\n\\n  <div class=\"row labels-left\">\\n    <div class=\"col-xs-12\">\\n      <div class=\"undefined-variable checkbox\">\\n        <label>\\n          <input type=\"checkbox\"\\n                 class=\"form-control\"\\n                 ng-model=\"filter.properties.showUndefinedVariable\" />\\n          {{ \\'FILTER_FORM_VARIABLES_SHOW_UNDEFINED\\' | translate }}\\n        </label>\\n      </div>\\n    </div>\\n\\n    <div class=\"col-xs-2 row-action\" ng-show=\"!filter.id || (filter.id && accesses.update)\">\\n      <a ng-click=\"addVariable()\"\\n         href>\\n        <span class=\"hidden-sm hidden-xs\">{{ \\'FILTER_ADD_VARIABLE\\' | translate }}</span>\\n        <span class=\"glyphicon glyphicon-plus-sign\"></span>\\n      </a>\\n    </div>\\n\\n    <div ng-class=\"{ \\'col-xs-10\\': !filter.id || (filter.id && accesses.update) , \\'col-xs-12\\': !(!filter.id || (filter.id && accesses.update)) }\">\\n      <div class=\"form-group\" ng-show=\"variables.length\">\\n        <label class=\"col-xs-6 control-label\"\\n               translate=\"FILTER_VARIABLE_NAME\">Name</label>\\n        <label class=\"col-xs-6 control-label\"\\n               translate=\"FILTER_VARIABLE_LABEL\">Label</label>\\n      </div>\\n    </div>\\n  </div>\\n\\n  <div ng-repeat=\"(delta, variable) in variables\" class=\"row\">\\n\\n    <div ng-form name=\"variableFieldForm\">\\n      <div ng-init=\"addForm(this.variableFieldForm)\"></div>\\n\\n      <div class=\"col-xs-2 row-action\" ng-show=\"!filter.id || (filter.id && accesses.update)\">\\n        <a ng-click=\"removeVariable(delta)\"\\n           href>\\n          <span class=\"hidden-sm hidden-xs\">{{ \\'FILTER_REMOVE_VARIABLE\\' | translate }}</span>\\n          <span class=\"glyphicon glyphicon-minus-sign\"></span>\\n        </a>\\n      </div>\\n\\n\\n      <div ng-class=\"{ \\'col-xs-10\\': !filter.id || (filter.id && accesses.update) , \\'col-xs-12\\': !(!filter.id || (filter.id && accesses.update)) }\">\\n        <div class=\"form-group\">\\n\\n          <div class=\"col-xs-6\">\\n\\n            <input class=\"form-control\"\\n                   type=\"text\"\\n                   name=\"variableName\"\\n                   ng-model=\"variable.name\"\\n                   placeholder=\"{{ \\'FILTER_VARIABLE_NAME_PLACEHOLDER\\' | translate }}\"\\n                   required\\n                   ng-readonly=\"filter.id && !accesses.update\"\\n                   ng-disabled=\"filter.id && !accesses.update\" />\\n\\n              <div ng-if=\"this.variableFieldForm.variableName.$invalid && this.variableFieldForm.variableName.$dirty\"\\n                    class=\"has-error\">\\n                <span ng-show=\"this.variableFieldForm.variableName.$error.required\" class=\"help-block\">\\n                  {{ \\'REQUIRED_FIELD\\' | translate }}\\n                </span>\\n              </div>\\n\\n          </div>\\n\\n          <div class=\"col-xs-6\">\\n            <input class=\"form-control\"\\n                   type=\"text\"\\n                   name=\"variableLabel\"\\n                   ng-model=\"variable.label\"\\n                   placeholder=\"{{ \\'FILTER_VARIABLE_LABEL_PLACEHOLDER\\' | translate }}\"\\n                   required\\n                   ng-readonly=\"filter.id && !accesses.update\"\\n                   ng-disabled=\"filter.id && !accesses.update\" />\\n              <div ng-if=\"this.variableFieldForm.variableLabel.$invalid && this.variableFieldForm.variableLabel.$dirty\"\\n                    class=\"has-error\">\\n                <span ng-show=\"this.variableFieldForm.variableLabel.$error.required\" class=\"help-block\">\\n                  {{ \\'REQUIRED_FIELD\\' | translate }}\\n                </span>\\n              </div>\\n          </div>\\n\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n\\n</div>\\n';});\n\n","define('scripts/filter/directives/cam-tasklist-filter-modal-form-variable',[\n  'text!./cam-tasklist-filter-modal-form-variable.html'\n], function(\n  template\n) {\n  'use strict';\n\n  var copy = angular.copy;\n\n  return [function() {\n\n    return {\n\n      restrict: 'A',\n      require: '^camTasklistFilterModalForm',\n      scope: {\n        filter: '=',\n        accesses: '='\n      },\n\n      template: template,\n\n      link: function ($scope, $element, attrs, parentCtrl) {\n\n        var emptyVariable = {\n          name: '',\n          label: ''\n        };\n\n        $scope.filter.properties.showUndefinedVariable  = $scope.filter.properties.showUndefinedVariable || false;\n        $scope.variables = $scope.filter.properties.variables = $scope.filter.properties.variables || [];\n\n        // register handler to show or hide the accordion hint /////////////////\n\n        var showHintProvider = function () {\n          for (var i = 0, nestedForm; !!(nestedForm = nestedForms[i]); i++) {\n            var variableName = nestedForm.variableName;\n            var variableLabel = nestedForm.variableLabel;\n\n            if (variableName.$dirty && variableName.$invalid) {\n              return true;\n            }\n\n            if (variableLabel.$dirty && variableLabel.$invalid) {\n              return true;\n            }\n          }\n\n          return false;\n        };\n\n        parentCtrl.registerHintProvider('filterVariableForm', showHintProvider);\n\n        // handles each nested form //////////////////////////////////////////////\n\n        var nestedForms = [];\n        $scope.addForm = function (_form) {\n          nestedForms.push(_form);\n        };\n\n        // variables interaction /////////////////////////////////////////////////\n\n        $scope.addVariable = function() {\n          var _emptyVariable = copy(emptyVariable);\n          $scope.variables.push(_emptyVariable);\n        };\n\n        $scope.removeVariable = function(delta) {\n          $scope.filter.properties.variables = $scope.variables = parentCtrl.removeArrayItem($scope.variables, delta);\n          nestedForms = parentCtrl.removeArrayItem(nestedForms, delta);\n        };\n\n      }\n\n    };\n\n  }];\n\n});\n\n","\ndefine('text!scripts/filter/directives/cam-tasklist-filter-modal-form-permission.html',[],function () { return '<div ng-form class=\"form-horizontal\" name=\"filterPermissionForm\" role=\"form\">\\n\\n  <div ng-show=\"!authorizationState.$loaded && !authorizationState.$error\"\\n       class=\"loader\">\\n    <span class=\"animate-spin glyphicon glyphicon-refresh\"></span>\\n    {{ \\'LOADING\\' | translate }}\\n  </div>\\n\\n  <div ng-show=\"authorizationState.$error\" class=\"alert alert-danger\" role=\"alert\">\\n    <span class=\"glyphicon glyphicon-exclamation-sign\"></span>\\n    <strong class=\"status\">{{ \\'FAILURE\\' | translate }}:</strong>\\n    <span class=\"message\">{{ \\'FILTER_FORM_PERMISSIONS_LOADING_FAILURE\\' | translate }}</span>\\n  </div>\\n\\n  <div ng-show=\"authorizationState.$loaded && !authorizationState.$error\">\\n\\n    <div class=\"alert alert-warning\">\\n      <span class=\"glyphicon glyphicon-exclamation-sign\"></span>\\n      <span>{{ \\'FILTER_FORM_PERMISSIONS_EDIT_HINT\\' | translate }}</span>\\n    </div>\\n\\n    <div class=\"global-access checkbox form-control-static\"\\n         ng-show=\"!filter.id || (filter.id && accesses.update)\">\\n      <label>\\n        <input type=\"checkbox\"\\n               class=\"form-control\"\\n               ng-model=\"isGlobalReadAuthorization\"\\n               ng-change=\"globalReadAuthorizationChanged()\"\\n               ng-disabled=\"filter.id && !accesses.update\" />\\n         {{ \\'FILTER_FORM_PERMISSIONS_GLOBAL\\' | translate }}\\n      </label>\\n    </div>\\n\\n    <div class=\"user-read-permissions\"\\n         ng-show=\"(!filter.id || (filter.id && accesses.update)) && !isGlobalReadAuthorization\">\\n      <div class=\"form-group labels-left\">\\n\\n        <div class=\"col-xs-2 align-right\">\\n          <button class=\"btn btn-link\"\\n                  ng-click=\"addReadPermission()\"\\n                  type=\"button\"\\n                  ng-disabled=\"disableAddButton()\">\\n            <span class=\"hidden-sm hidden-xs\">{{ \\'ADD_PERMISSION\\' | translate }}</span>\\n            <span class=\"glyphicon glyphicon-plus-sign\"></span>\\n          </button>\\n        </div>\\n\\n        <label class=\"col-xs-2 control-label\">\\n          {{ \\'FILTER_FORM_PERMISSION_GROUP_USER\\' | translate }}\\n        </label>\\n        <label class=\"col-xs-8 control-label\">\\n          {{ \\'FILTER_FORM_PERMISSION_IDENTIFIER\\' | translate }}\\n        </label>\\n      </div>\\n\\n\\n\\n\\n\\n\\n\\n      <div class=\"form-group\"\\n           ng-repeat=\"auth in getReadAuthorizations(authorizations)\">\\n        <div class=\"col-xs-2 row-action\"\\n             ng-show=\"!filter.id || (filter.id && accesses.update)\">\\n          <button class=\"btn btn-link btn-remove\"\\n                  ng-if=\"!isGlobalReadAuthorization\"\\n                  ng-click=\"removeReadPermission(auth)\">\\n            <span class=\"hidden-sm hidden-xs\">\\n              {{ \\'FILTER_FORM_PERMISSIONS_REMOVE\\' | translate }}\\n            </span>\\n            <span class=\"glyphicon glyphicon-minus-sign\"></span>\\n          </button>\\n        </div>\\n\\n        <div class=\"col-xs-2\">\\n          <span class=\"fake-button\">\\n            <span class=\"glyphicon\"\\n                  ng-class=\"\\'glyphicon-\\' + (!!auth.userId ? \\'user\\' : \\'th\\')\"></span>\\n          </span>\\n        </div>\\n\\n        <div class=\"form-control-static\"\\n             ng-class=\"{ \\'col-xs-8\\': !filter.id || (filter.id && accesses.update) , \\'col-xs-10\\': !(!filter.id || (filter.id && accesses.update)) }\">\\n\\n          {{ (auth.userId || auth.groupId) }}\\n        </div>\\n      </div><!-- repeat auth -->\\n\\n      <div class=\"form-group new-permission\"\\n           ng-if=\"showNewPermissionFields\">\\n        <div class=\"col-xs-2 col-xs-offset-2\">\\n          <button class=\"btn btn-default\"\\n                  type=\"button\"\\n                  tooltip-append-to-body=\"false\"\\n                  tooltip=\"{{ \\'FILTER_FORM_PERMISSIONS_IDENTITY_TYPE_TOOLTIP\\' | translate }}: {{ (newPermission.type === \\'user\\' ? \\'FILTER_FORM_PERMISSIONS_IDENTITY_TYPE_USER\\' : \\'FILTER_FORM_PERMISSIONS_IDENTITY_TYPE_GROUP\\') | translate }}\"\\n                  ng-click=\"switchType()\"\\n                  ng-disabled=\"isGlobalReadAuthorization\">\\n            <span class=\"glyphicon\"\\n                  ng-class=\"newPermission.type === \\'user\\' ? \\'glyphicon-user\\' : \\'glyphicon-th\\'\"></span>\\n          </button>\\n        </div>\\n\\n        <div class=\"col-xs-8\">\\n          <input type=\"text\"\\n                 name=\"newPermission\"\\n                 placeholder=\"{{ (newPermission.type === \\'user\\' ? \\'FILTER_FORM_PERMISSIONS_USER_ID\\' : \\'FILTER_FORM_PERMISSIONS_GROUP_ID\\') | translate }}\"\\n                 class=\"form-control\"\\n                 ng-model=\"newPermission.id\"\\n                 ng-change=\"validateNewPermission()\"\\n                 ng-keydown=\"keyPressed($event)\"\\n                 ng-readonly=\"isGlobalReadAuthorization\"\\n                 ng-disabled=\"filter.id && !accesses.update\" />\\n\\n          <div ng-if=\"this.filterPermissionForm.newPermission.$invalid && this.filterPermissionForm.newPermission.$dirty\"\\n               class=\"has-error\">\\n            <span ng-show=\"this.filterPermissionForm.newPermission.$error.required\"\\n                  class=\"help-block\">\\n              {{ \\'REQUIRED_FIELD\\' | translate }}\\n            </span>\\n            <span ng-show=\"this.filterPermissionForm.newPermission.$error.duplicate && newPermission.type === \\'user\\'\"\\n                  class=\"help-block\">\\n              {{ \\'FILTER_FORM_PERMISSIONS_DUPLICATE_USER\\' | translate }}\\n            </span>\\n            <span ng-show=\"this.filterPermissionForm.newPermission.$error.duplicate && newPermission.type === \\'group\\'\"\\n                  class=\"help-block\">\\n              {{ \\'FILTER_FORM_PERMISSIONS_DUPLICATE_GROUP\\' | translate }}\\n            </span>\\n          </div>\\n        </div>\\n      </div><!-- new perm -->\\n    </div>\\n\\n  </div>\\n\\n</div>\\n';});\n\n","define('scripts/filter/directives/cam-tasklist-filter-modal-form-permission',[\n  'angular',\n  'text!./cam-tasklist-filter-modal-form-permission.html'\n], function(\n  angular,\n  template\n) {\n  'use strict';\n\n  var copy = angular.copy;\n\n  var RESOURCE_TYPE = 5;\n\n  return [\n    'camAPI',\n    '$q',\n  function(\n    camAPI,\n    $q\n  ) {\n\n    return {\n\n      restrict: 'A',\n      require: '^camTasklistFilterModalForm',\n      scope: {\n        filter: '=',\n        accesses: '=',\n        filterModalFormData: '=',\n        isOpen: '='\n      },\n\n      template: template,\n\n      link: function ($scope, $element, attrs, parentCtrl) {\n        // by default, the fields for new permission are not shown\n        $scope.showNewPermissionFields = false;\n\n        // if the fields of a new permission are filled and\n        // the \"permission\" accordion part is being closed\n        // this will add the permission\n        // (like if the \"add\" button had been clicked)\n        $scope.$watch('isOpen', function (actual, previous) {\n          if (!$scope.disableAddButton() && !actual && previous) {\n            $scope.addReadPermission();\n          }\n          // hides the new permission fields again\n          $scope.showNewPermissionFields = false;\n        });\n\n        $scope.$on('pre-submit', function () {\n          if (!$scope.disableAddButton()) {\n            $scope.addReadPermission();\n          }\n          // hides the new permission fields again\n          $scope.showNewPermissionFields = false;\n        });\n\n        // init //////////////////////////////////////////////////////////////////////////////\n\n        var Authorization = camAPI.resource('authorization');\n\n        var filterAuthorizationData = $scope.filterModalFormData.newChild($scope);\n\n        var _form = $scope.filterPermissionForm;\n\n        var authorizations = null;\n        var globalAuthorization = null;\n        var groupAuthorizationMap = null;\n        var userAuthorizationMap = null;\n\n        var NEW_DEFAULT_AUTHORIZATION = {\n          resourceType: RESOURCE_TYPE,\n          permissions: [ 'READ' ]\n        };\n\n        var NEW_PERMISSION = {\n          type: 'user',\n          id: null\n        };\n\n        var newPermission = $scope.newPermission = copy(NEW_PERMISSION);\n\n        // register handler to show or hide the accordion hint /////////////////\n\n        var showHintProvider = function () {\n          var control = getNewPermissionField();\n\n          return control && control.$error && control.$error.duplicate;\n        };\n\n        parentCtrl.registerHintProvider('filterPermissionForm', showHintProvider);\n\n        // provide ////////////////////////////////////////////////////////////////////////\n\n        filterAuthorizationData.provide('authorizations', ['filter', function (filter) {\n          var deferred = $q.defer();\n\n          if(!filter || !filter.id) {\n            // no filter\n            deferred.resolve([]);\n\n          }\n          else {\n\n            Authorization.list({\n              resourceType: RESOURCE_TYPE,\n              resourceId: filter.id\n            }, function (err, resp) {\n\n              if(!!err) {\n                deferred.reject(err);\n              }\n              else {\n                deferred.resolve(resp);\n              }\n\n            });\n          }\n\n          return deferred.promise;\n\n        }]);\n\n        // observe ////////////////////////////////////////////////////////////////////////\n\n        $scope.authorizationState = filterAuthorizationData.observe('authorizations', function(_authorizations) {\n          authorizations = $scope.authorizations = copy(_authorizations) || [];\n          initializeAuthorizations(authorizations);\n\n          globalAuthorization = getGlobalAuthorization(authorizations);\n          $scope.isGlobalReadAuthorization = hasReadPermission(globalAuthorization);\n\n          groupAuthorizationMap = getAuthorziationMap(authorizations, 'groupId');\n          userAuthorizationMap = getAuthorziationMap(authorizations, 'userId');\n        });\n\n        // handle global read permission ////////////////////////////////////////////////////\n\n        $scope.globalReadAuthorizationChanged = function () {\n          if ($scope.isGlobalReadAuthorization) {\n\n            if (!globalAuthorization) {\n              globalAuthorization = angular.extend({ userId: '*', type: 0 }, NEW_DEFAULT_AUTHORIZATION);\n              authorizations.push(globalAuthorization);\n            } else {\n              addReadPermissionToAuthorization(globalAuthorization);\n            }\n\n            newPermission.id = null;\n            validateNewPermission();\n          }\n          else {\n\n            if (globalAuthorization) {\n              removeReadPermissionFromAuthorization(globalAuthorization);\n            }\n          }\n        };\n\n        // handle new permission ////////////////////////////////////////////////////////////\n\n        $scope.switchType = function () {\n          newPermission.type = newPermission.type === 'user' ? 'group' : 'user';\n          validateNewPermission();\n        };\n\n        $scope.getReadAuthorizations = function (authorizations) {\n          if (authorizations) {\n            return getAuthorizationsWithReadPermissions(authorizations);\n          }\n        };\n\n        var validateNewPermission = $scope.validateNewPermission = function () {\n          var control = getNewPermissionField();\n          // new permission fields might not be present when this function is called\n          if (!control) { return; }\n\n          control.$setValidity('authorization', true);\n          control.$setValidity('duplicate', true);\n\n          var id = newPermission.id;\n\n          if (id) {\n            var auths = newPermission.type === 'user' ? userAuthorizationMap : groupAuthorizationMap;\n            var auth = auths[id];\n\n            if (auth && hasReadPermission(auth)) {\n              return control.$setValidity('duplicate', false);\n            }\n\n          }\n        };\n\n        $scope.disableAddButton = function () {\n          // when the new permission fields are not yet present,\n          // the \"Add permis.\" is aimed to make them visible\n          // (see addReadPermission below)\n          if (!$scope.showNewPermissionFields) { return false; }\n\n          var control = getNewPermissionField();\n\n          return $scope.isGlobalReadAuthorization || !newPermission.id || (control && control.$error && control.$error.duplicate);\n        };\n\n\n        var addReadPermission = $scope.addReadPermission = function () {\n          // the first click only adds the fields\n          if (!$scope.showNewPermissionFields) {\n            $scope.showNewPermissionFields = true;\n            return;\n          }\n\n          var control = getNewPermissionField();\n\n          var id = newPermission.id;\n\n          var auths = newPermission.type === 'user' ? userAuthorizationMap : groupAuthorizationMap;\n          var auth = auths[id];\n\n          if (auth) {\n            addReadPermissionToAuthorization(auth);\n\n            var _authorizations = authorizations;\n            authorizations = $scope.authorizations = [];\n\n            for (var i = 0, _auth; !!(_auth = _authorizations[i]); i++) {\n              if (_auth !== auth) {\n                authorizations.push(_auth);\n              }\n            }\n\n            authorizations.push(auth);\n          }\n          else {\n            auth = { type : 1 };\n            var prop = newPermission.type === 'user' ? 'userId' : 'groupId';\n            auth[prop] = id;\n\n            angular.extend(auth, NEW_DEFAULT_AUTHORIZATION);\n            authorizations.push(auth);\n            auths[id] = auth;\n          }\n\n          newPermission.id = null;\n\n          control.$setValidity('authorization', true);\n          control.$setPristine();\n        };\n\n        $scope.keyPressed = function ($event) {\n          var keyCode = $event.keyCode;\n\n          if (keyCode === 13) {\n\n            if ($event.preventDefault) {\n              // prevent executing switchType()\n              $event.preventDefault();\n            }\n\n            var control = getNewPermissionField();\n\n            return newPermission.id && control && (!control.$error || !control.$error.duplicate) && addReadPermission();\n          }\n        };\n\n        // remove read permission ///////////////////////////////////////////////////////////\n\n        $scope.removeReadPermission = function (auth) {\n          removeReadPermissionFromAuthorization(auth);\n          validateNewPermission();\n        };\n\n        // submit authorizations //////////////////////////////////////////////////////////\n\n        var errors = [];\n\n        var submitAuthorizations = function (filter, callback) {\n          var actions = [];\n          errors = [];\n\n          if ($scope.isGlobalReadAuthorization) {\n\n            for (var k = 0, auth; !!(auth = authorizations[k]); k++) {\n\n              if (isGrantAuthorization(auth) && hasReadPermission(auth)) {\n                // remove read permission so that the corresponding\n                // authorizations will be updated or deleted\n                removeReadPermissionFromAuthorization(auth);\n              }\n            }\n          }\n\n          for (var i = 0, authorization; !!(authorization = authorizations[i]); i++) {\n            var permissions = authorization.permissions;\n            var $permissions = authorization.$permissions;\n\n            if (isGrantAuthorization(authorization) || isGlobalAuthorization(authorization)) {\n\n              if (authorization.id) {\n\n                // array of permissions is empty -> delete authorization\n                if (!permissions.length && $permissions.length) {\n                  // delete\n                  actions.push({\n                    type: 'delete',\n                    authorization: authorization\n                  });\n                }\n                else {\n\n                  // permissions changed -> update authorization\n                  if (permissions.length !== $permissions.length) {\n                    // update\n                    actions.push({\n                      type: 'update',\n                      authorization: authorization\n                    });\n                  }\n                }\n              }\n              else {\n\n                // authorization.id is null and at least one permission\n                // has been added -> create authorization\n                if (permissions.length) {\n                  // create\n                  actions.push({\n                    type: 'create',\n                    authorization: authorization\n                  });\n                }\n              }\n            }\n          }\n\n          performSubmit(actions, filter).then(function () {\n            if (!errors || !errors.length) {\n              errors = null;\n            }\n\n            if (typeof callback === 'function') {\n              return callback(errors);\n            }\n\n          });\n\n        };\n\n        function performSubmit(actions, filter) {\n          var deferred = $q.defer();\n\n          actions = actions || [];\n          var count = actions.length;\n\n          function submitAction(type, authorization) {\n\n            var $permissions = authorization.$permissions;\n\n            delete authorization.$permissions;\n            delete authorization.$$hashKey;\n\n            authorization.resourceId = authorization.resourceId || filter.id;\n\n            var callback = function (err, resp) {\n              count = count - 1;\n\n              if (!err) {\n\n                if (type === 'create') {\n                  authorization.id = resp.id;\n                  authorization.permissions = copy(resp.permissions ||[]);\n                  authorization.$permissions = copy(resp.permissions || []);\n                }\n                else {\n                  if (type === 'delete') {\n                    authorization.id = null;\n                  }\n\n                  authorization.permissions = copy(authorization.permissions || []);\n                  authorization.$permissions = copy(authorization.permissions || []);\n                }\n              }\n              else {\n                errors.push({\n                  status: 'FILTER_FORM_PERMISSIONS_SAVE_ERROR',\n                  error: err\n                });\n\n                // set $permissions again\n                authorization.$permissions = $permissions;\n              }\n\n              if (count === 0) {\n                deferred.resolve();\n              }\n\n            };\n\n            if (type === 'create') {\n              Authorization.create(authorization, callback);\n            }\n            else if (type === 'update') {\n              Authorization.update(authorization, callback);\n            }\n            else if (type === 'delete') {\n              Authorization.delete(authorization.id, callback);\n            }\n          }\n\n          if (count === 0) {\n            deferred.resolve();\n          }\n\n          for (var i = 0, action; !!(action = actions[i]); i++) {\n            var type = action.type;\n            // do not create a copy of authorization, if there is a\n            // failure during submitting the authorizations, the dialog\n            // stays open and the user could try to save the dialog once\n            // again\n            var authorization = action.authorization;\n\n            submitAction(type, authorization);\n          }\n\n          return deferred.promise;\n        }\n\n        parentCtrl.registerPostFilterSavedProvider(submitAuthorizations);\n\n        // helper /////////////////////////////////////////////////////////////////////////\n\n        function initializeAuthorizations (authorizations) {\n          for (var i = 0, authorization; !!(authorization = authorizations[i]); i++) {\n            // save the original permissions\n            authorization.$permissions = copy(authorization.permissions || []);\n          }\n        }\n\n        function getNewPermissionField () {\n          return _form.newPermission;\n        }\n\n        function isGlobalAuthorization (authorization) {\n          return authorization && authorization.type === 0;\n        }\n\n        function isGrantAuthorization (authorization) {\n          return authorization && authorization.type === 1;\n        }\n\n        function isGlobalUserOrGroupId (authorization) {\n          authorization = authorization || {};\n          var id = authorization.userId || authorization.groupId;\n          return id === '*';\n        }\n\n        function hasProperty (authorization, prop) {\n          return !!authorization[prop];\n        }\n\n        function hasReadPermission(authorization) {\n          if (authorization && authorization.permissions) {\n            var permissions = authorization.permissions;\n            for (var i = 0, perm; !!(perm = permissions[i]); i++) {\n              if (perm === 'READ' || perm === 'ALL') {\n                return true;\n              }\n            }\n          }\n          return false;\n        }\n\n        function getGlobalAuthorization(authorizations) {\n          for (var i = 0, authorization; !!(authorization = authorizations[i]); i++) {\n            if (isGlobalAuthorization(authorization)) {\n              return authorization;\n            }\n          }\n        }\n\n        function getAuthorizationsWithReadPermissions(authorizations) {\n          var result = [];\n\n          for (var i = 0, authorization; !!(authorization = authorizations[i]); i++) {\n\n            if (isGrantAuthorization(authorization)) {\n\n              if (!isGlobalUserOrGroupId(authorization) && hasReadPermission(authorization)) {\n                result.push(authorization);\n              }\n\n            }\n          }\n\n          return result;\n        }\n\n        function getAuthorziationMap(authorizations, criteria) {\n          var _authorizations = getAuthorziations(authorizations, criteria);\n          var obj = {};\n\n          for (var i = 0, authorization; !!(authorization = _authorizations[i]); i++) {\n            var _criteria = authorization[criteria];\n            obj[_criteria] = authorization;\n          }\n\n          return obj;\n        }\n\n        function getAuthorziations(authorizations, criteria) {\n          var result = [];\n\n          for (var i = 0, authorization; !!(authorization = authorizations[i]); i++) {\n\n            if (isGrantAuthorization(authorization)) {\n\n              if (hasProperty(authorization, criteria) && !isGlobalUserOrGroupId(authorization)) {\n                result.push(authorization);\n              }\n\n            }\n\n          }\n\n          return result;\n        }\n\n        function addReadPermissionToAuthorization(authorization) {\n          if (authorization) {\n            var permissions = authorization.permissions;\n\n            if (!permissions || !permissions.length) {\n              authorization.permissions = [ 'READ' ];\n            }\n\n            else if (permissions && permissions.length === 1) {\n              authorization.permissions = authorization.permissions.concat([ 'READ' ]);\n            }\n\n            else {\n              authorization.permissions = [ 'ALL' ];\n            }\n          }\n        }\n\n        function removeReadPermissionFromAuthorization(authorization) {\n          if (authorization) {\n            var permissions = authorization.permissions;\n\n            if (permissions && permissions.length === 1) {\n              var permission = permissions[0];\n\n              if (permission === 'ALL') {\n                authorization.permissions = [ 'UPDATE', 'DELETE' ];\n              }\n              else if (permission === 'READ') {\n                authorization.permissions = [];\n              }\n            }\n            else {\n\n              authorization.permissions = [];\n\n              for (var i = 0, perm; !!(perm = permissions[i]); i++) {\n                if (perm !== 'READ') {\n                  authorization.permissions.push(perm);\n                }\n              }\n\n            }\n          }\n        }\n\n      }\n    };\n\n  }];\n\n});\n\n","\ndefine('text!scripts/filter/modals/cam-tasklist-filter-modal.html',[],function () { return '<div class=\"modal-header\">\\n  <h3 class=\"modal-title\">\\n    {{ (\\n      filter.id && !deletion ?\\n      (accesses.update ? \\'FILTER_EDIT\\' : \\'FILTER_DETAILS\\') :\\n      (deletion ? \\'FILTER_DELETE\\' : \\'FILTER_CREATE\\')\\n    ) | translate }}\\n  </h3>\\n</div>\\n\\n\\n\\n<div class=\"modal-body\">\\n\\n  <div notifications-panel />\\n\\n  <div ng-show=\"!deletion\"\\n       cam-tasklist-filter-modal-form\\n       filter=\"filter\"\\n       filter-modal-data=\"filterModalData\"\\n       register-is-valid-provider=\"registerValidationProvider\"\\n       register-post-filter-saved-provider=\"registerPostFilterSavedProvider\">\\n  </div>\\n\\n  <div ng-show=\"deletion\"\\n       class=\"alert alert-warning\"\\n       role=\"alert\">\\n    <span class=\"glyphicon glyphicon-exclamation-sign\"></span>\\n    {{ \\'FILTER_DELETION_WARNING\\' | translate }}\\n  </div>\\n\\n</div>\\n\\n\\n<div class=\"modal-footer\">\\n\\n  <div class=\"row row-action\">\\n\\n    <div class=\"col-xs-4 align-left\">\\n\\n      <button ng-show=\"!deletion && filter.id && accesses.delete\"\\n              class=\"btn btn-xs btn-link\"\\n              type=\"button\"\\n              ng-click=\"confirmDeletion()\"\\n              translate=\"FILTER_DELETE\">Delete filter</button>\\n\\n\\n      <button ng-show=\"deletion\"\\n              class=\"btn btn-xs btn-link\"\\n              type=\"button\"\\n              ng-click=\"abortDeletion()\"\\n              translate=\"FILTER_EDIT\">Edit filter</button>\\n    </div>\\n\\n    <div class=\"col-xs-8\">\\n      <div class=\"row\">\\n        <div class=\"col-xs-12\">\\n\\n          <button class=\"btn btn-xs btn-link\"\\n                  type=\"button\"\\n                  ng-click=\"$dismiss()\"\\n                  translate=\"CLOSE\">Close</button>\\n\\n          <button ng-if=\"!deletion && (!filter.id || (filter.id && accesses.update))\"\\n                  class=\"btn btn-primary\"\\n                  type=\"submit\"\\n                  ng-disabled=\"!isValid()\"\\n                  ng-click=\"submit()\"\\n                  translate=\"SAVE\">Save</button>\\n\\n\\n          <button ng-if=\"deletion\"\\n                  class=\"btn btn-primary\"\\n                  type=\"submit\"\\n                  ng-click=\"delete()\"\\n                  translate=\"DELETE\">Delete</button>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n';});\n\n","define('scripts/filter/controllers/cam-tasklist-filters-ctrl',[\n  'text!./../modals/cam-tasklist-filter-modal.html'\n], function(\n  template\n) {\n  'use strict';\n\n  return [\n    '$scope',\n    '$modal',\n    '$q',\n    'camAPI',\n  function(\n    $scope,\n    $modal,\n    $q,\n    camAPI\n  ) {\n\n    var filtersData = $scope.filtersData = $scope.tasklistData.newChild($scope);\n\n    var Filter = camAPI.resource('filter');\n\n    $scope.userCanCreateFilter = false;\n\n    // provide /////////////////////////////////////////////////////////////////////////////////\n\n    filtersData.provide('filterAuthorizations', function() {\n      var deferred = $q.defer();\n\n      Filter.authorizations(function(err, res) {\n        if(err) {\n          deferred.reject(err);\n        }\n        else {\n          deferred.resolve(res);\n        }\n\n      });\n\n      return deferred.promise;\n\n    });\n\n    filtersData.provide('userCanCreateFilter', ['filterAuthorizations', function(filterAuthorizations) {\n      filterAuthorizations = filterAuthorizations || {};\n      var links = filterAuthorizations.links || [];\n\n      for (var i = 0, link; !!(link = links[i]); i++) {\n        if (link.rel === 'create') {\n          return true;\n        }\n      }\n\n      return false;\n\n    }]);\n\n    // observe ////////////////////////////////////////////////////////////////////////////////\n\n    filtersData.observe('userCanCreateFilter', function(userCanCreateFilter) {\n      $scope.userCanCreateFilter = userCanCreateFilter;\n    });\n\n    // open modal /////////////////////////////////////////////////////////////////////////////\n\n    $scope.openModal = function ($event, filter) {\n      $event.stopPropagation();\n\n      $modal.open({\n        windowClass: 'filter-modal',\n        size: 'lg',\n        controller: 'camFilterModalCtrl',\n        template: template,\n        resolve: {\n          'filter': function() { return filter; },\n          'filtersData': function() { return filtersData; }\n        }\n\n      }).result.then(function() {\n        filtersData.changed('filters');\n      }, function () {\n        filtersData.changed('filters');\n      });\n\n    };\n\n  }];\n\n});\n\n","define('scripts/filter/modals/cam-tasklist-filter-modal',[\n  'angular'\n], function(\n  angular\n) {\n  'use strict';\n\n  var copy = angular.copy;\n  var each = angular.forEach;\n  var isArray = angular.isArray;\n  var isObject = angular.isObject;\n\n  var RESOURCE_TYPE = 'Task';\n  var DEFAULT_COLOR = '#EEEEEE';\n\n  var likeExp = /Like$/;\n  function fixLike(key, value) {\n    if (likeExp.test(key)) {\n\n      if (value[0] !== '%') {\n        value = '%' + value;\n      }\n\n      var length = value.length - 1;\n      if (value[length] !== '%') {\n        value = value + '%';\n      }\n\n    }\n    return value;\n  }\n\n  function unfixLike(key, value) {\n    if (likeExp.test(key)) {\n      if (value[0] === '%') {\n        value = value.slice(1, value.length);\n      }\n\n      if (value.slice(-1) === '%') {\n        value = value.slice(0, -1);\n      }\n    }\n    return value;\n  }\n\n  var varExp = /Variables$/;\n  function isQueryVariable(key) {\n    return varExp.test(key);\n  }\n\n  var expressionsExp = /^[\\s]*(\\#|\\$)\\{/;\n  function isExpression(value) {\n    return expressionsExp.test(value);\n  }\n\n  function cleanJson(obj) {\n    each(Object.keys(obj), function(key) {\n      // property with name starting with \"$\" or empty arrays are removed\n      if (key[0] === '$' || (isArray(obj[key]) && !obj[key].length)) {\n        delete obj[key];\n      }\n      else if (isObject(obj[key]) || isArray(obj[key])) {\n        obj[key] = cleanJson(obj[key]);\n      }\n    });\n    return obj;\n  }\n\n  return [\n    '$scope',\n    '$translate',\n    '$q',\n    'Notifications',\n    'camAPI',\n    'filter',\n    'filtersData',\n  function(\n    $scope,\n    $translate,\n    $q,\n    Notifications,\n    camAPI,\n    filter,\n    filtersData\n  ) {\n\n    var Filter = camAPI.resource('filter');\n\n    var filterModalData = $scope.filterModalData = filtersData.newChild($scope);\n\n    $scope.$on('$locationChangeStart', function() {\n      $scope.$dismiss();\n    });\n\n    $scope.deletion = false;\n\n    // init ////////////////////////////////////////////////////////////////////////\n\n    // initialize filter\n    $scope.filter =                        copy(filter || {});\n\n    // initialize filter name\n    $scope.filter.name =                   $scope.filter.name;\n\n    // initialize filter properties\n    $scope.filter.properties =             $scope.filter.properties || {};\n\n    $scope.filter.properties.description = $scope.filter.properties.description;\n    $scope.filter.properties.priority =    parseInt($scope.filter.properties.priority || 0, 10);\n    $scope.filter.properties.color =       $scope.filter.properties.color || DEFAULT_COLOR;\n    $scope.filter.properties.refresh =     $scope.filter.properties.refresh || false;\n    $scope.filter.properties.showUndefinedVariable = $scope.filter.properties.showUndefinedVariable || false;\n\n    var filterId =                         $scope.filter.id;\n\n    // initialize variables\n    $scope.filter.properties.variables =   $scope.filter.properties.variables || [];\n\n    // initialize filter query\n    var _query = $scope.filter.query =     $scope.filter.query || {};\n\n     // transform filter query object into an array\n    var query = [];\n    var queryVariables = [];\n\n    for (var key in _query) {\n      var value = _query[key];\n\n      if (!isQueryVariable(key)) {\n        query.push({\n          key: key,\n          value: unfixLike(key, value)\n        });\n      }\n      else {\n        queryVariables.push({\n          key: key,\n          value: value\n        });\n      }\n    }\n\n    $scope.filter.query = query;\n\n    // provide data ///////////////////////////////////////////////////////////////\n\n    filterModalData.provide('filter', $scope.filter);\n\n    filterModalData.provide('userFilterAccess', ['filter', function (filter) {\n      var deferred = $q.defer();\n\n      if(!filter || !filter.id) {\n        // no filter\n        deferred.resolve({\n          links: []\n        });\n\n      }\n      else {\n        Filter.authorizations(filter.id, function(err, resp) {\n\n          if(!!err) {\n            deferred.reject(err);\n          }\n          else {\n            deferred.resolve(resp);\n          }\n\n        });\n      }\n\n      return deferred.promise;\n\n    }]);\n\n    filterModalData.provide('accesses', ['userFilterAccess', function (access) {\n      var accesses = {};\n      each(access.links, function(link) {\n        accesses[link.rel] = true;\n      });\n      return accesses;\n    }]);\n\n    // observe date //////////////////////////////////////////////////////////\n\n    filterModalData.observe('accesses', function(accesses) {\n      $scope.accesses = accesses;\n    });\n\n    // provider ////////////////////////////////////\n\n    var defaultValidationProvider = function () {\n      return false;\n    };\n\n    $scope.isValid = defaultValidationProvider;\n\n    $scope.registerValidationProvider = function (fn) {\n      $scope.isValid = fn || defaultValidationProvider;\n    };\n\n    var postFilterSavedProvider = function (filter, callback) {\n      return callback();\n    };\n\n    $scope.registerPostFilterSavedProvider = function (fn) {\n      postFilterSavedProvider = fn || postFilterSavedProvider;\n    };\n\n    // submit /////////////////////////////////////\n\n    function errorNotification(src, err, exclusive) {\n      $translate(src).then(function(translated) {\n        Notifications.addError({\n          status: translated,\n          message: (err ? err.message : ''),\n          exclusive: exclusive,\n          scope: $scope\n        });\n      });\n    }\n\n    $scope.submit = function() {\n      $scope.$broadcast('pre-submit');\n\n      // transform query array into a query object\n      var _queryArray = ($scope.filter.query || []).concat(queryVariables);\n      var _queryObj = {};\n\n      for (var i = 0, elem; !!(elem = _queryArray[i]); i++) {\n\n        var key = elem.key;\n        var value = elem.value;\n\n        if (!isQueryVariable(key)) {\n\n          // if key == '...Like' -> value = '%' + value + '%'\n          value = fixLike(key, value);\n\n          if (isExpression(value)) {\n\n            if(key.indexOf('Expression') === -1) {\n              key = key +'Expression';\n            }\n\n          } else {\n            if(key.indexOf('Expression') !== -1) {\n              key = key.slice(0, key.indexOf('Expression'));\n            }\n          }\n\n          // for \"in\" criterion, the values are passed as coma separated list\n          if ((key === 'candidateGroups' || key.slice(-2) === 'In')) {\n            if( typeof value === 'string') {\n              value = value.split(',');\n              for (var v = 0; v < value.length; v++) {\n                if (value[v]) {\n                  value[v] = value[v].trim();\n                }\n              }\n            }\n          } else {\n            value = ''+value;\n          }\n        }\n\n        _queryObj[key] = value;\n      }\n\n      if ($scope.filter.includeAssignedTasks) {\n        _queryObj.includeAssignedTasks = true;\n      }\n\n      var toSave = {\n        id:           filterId,\n        name:         $scope.filter.name,\n        resourceType: RESOURCE_TYPE,\n        query:        _queryObj,\n        properties:   {\n          description:  $scope.filter.properties.description,\n          priority:     parseInt($scope.filter.properties.priority || 0, 10),\n          color:        $scope.filter.properties.color || DEFAULT_COLOR,\n          refresh:      $scope.filter.properties.refresh,\n          variables:    $scope.filter.properties.variables,\n          showUndefinedVariable: $scope.filter.properties.showUndefinedVariable\n        }\n      };\n\n      cleanJson(toSave);\n\n      Filter.save(toSave, function(err, filterResponse) {\n        if (err) {\n          return errorNotification('FILTER_SAVE_ERROR', err, true);\n        }\n\n        toSave.id = filterId = filterId || filterResponse.id;\n\n        postFilterSavedProvider(toSave, function (err) {\n\n          if (err) {\n            if (isArray(err) && err.length) {\n              for (var i = 0, error; !!(error = err[i]); i++) {\n                errorNotification(error.status, error.error, i === 0);\n              }\n            }\n            else {\n              errorNotification(err.status, err.error, true);\n            }\n            return;\n          }\n\n          $scope.$close();\n\n        });\n\n      });\n    };\n\n    // deletion ////////////////////////////////////////////////////////////////////\n\n    $scope.abortDeletion = function() {\n      $scope.deletion = false;\n    };\n\n    $scope.confirmDeletion = function() {\n      $scope.deletion = true;\n    };\n\n    $scope.delete = function() {\n      Filter.delete($scope.filter.id, function(err) {\n        if (err) {\n          return errorNotification('FILTER_DELETION_ERROR', err, true);\n        }\n\n        $scope.$close();\n\n      });\n    };\n\n  }];\n\n});\n\n","/**\n * @module  cam.tasklist.filter\n * @belongsto cam.tasklist\n *\n * Filters are predefined filters for tasks.\n */\n\n\n\ndefine('scripts/filter/index',[\n  'angular',\n\n  /* directives */\n  './directives/cam-tasklist-filters',\n  './directives/cam-tasklist-filter-modal-form',\n  './directives/cam-tasklist-filter-modal-form-general',\n  './directives/cam-tasklist-filter-modal-form-criteria',\n  './directives/cam-tasklist-filter-modal-form-variable',\n  './directives/cam-tasklist-filter-modal-form-permission',\n\n  /* controllers */\n  './controllers/cam-tasklist-filters-ctrl',\n\n  /* modals */\n  './modals/cam-tasklist-filter-modal',\n\n], function(\n  angular,\n\n  /* directives */\n  camTasklistFilters,\n  camTasklistFilterModalForm,\n  camTasklistFilterModalFormGeneral,\n  camTasklistFilterModalFormCriteria,\n  camTasklistFilterModalFormVariable,\n  camTasklistFilterModalFormPermission,\n\n  /* controllers */\n  camTasklistFiltersCtrl,\n\n  /* modals */\n  camTasklistFilterModal\n) {\n  'use strict';\n\n  var filterModule = angular.module('cam.tasklist.filter', [\n    'ui.bootstrap',\n  ]);\n\n  /* directives */\n  filterModule.directive('camTasklistFilters', camTasklistFilters);\n  filterModule.directive('camTasklistFilterModalForm', camTasklistFilterModalForm);\n  filterModule.directive('camTasklistFilterModalFormGeneral', camTasklistFilterModalFormGeneral);\n  filterModule.directive('camTasklistFilterModalFormCriteria', camTasklistFilterModalFormCriteria);\n  filterModule.directive('camTasklistFilterModalFormVariable', camTasklistFilterModalFormVariable);\n  filterModule.directive('camTasklistFilterModalFormPermission', camTasklistFilterModalFormPermission);\n\n  /* controllers */\n  filterModule.controller('camFiltersCtrl', camTasklistFiltersCtrl);\n\n\n  /* modals */\n  filterModule.controller('camFilterModalCtrl', camTasklistFilterModal);\n\n  return filterModule;\n});\n\n","define('camunda-tasklist-ui', [\n  'camunda-commons-ui',\n  'camunda-bpm-sdk-js',\n  'angular-data-depend',\n\n  'scripts/config/date',\n  'scripts/config/routes',\n  'scripts/config/locales',\n  'scripts/config/tooltip',\n  'scripts/config/uris',\n\n  'scripts/controller/cam-tasklist-app-ctrl',\n  'scripts/controller/cam-tasklist-view-ctrl',\n  'scripts/services/cam-tasklist-assign-notification',\n  'scripts/services/cam-tasklist-configuration',\n\n  'scripts/user/index',\n  'scripts/variable/index',\n  'scripts/tasklist/index',\n  'scripts/task/index',\n  'scripts/process/index',\n  'scripts/navigation/index',\n  'scripts/form/index',\n  'scripts/filter/index',\n  'scripts/api/index',\n\n  'text!scripts/index.html'\n], function() {\n  'use strict';\n  /**\n   * @namespace cam\n   */\n\n  /**\n   * @module cam.tasklist\n   */\n\n\n  var pluginPackages = window.PLUGIN_PACKAGES || [];\n  var pluginDependencies = window.PLUGIN_DEPENDENCIES || [];\n\n  require.config({\n    packages: pluginPackages\n  });\n\n  var tasklistApp;\n\n  var deps = [\n    'camunda-commons-ui'\n  ].concat(pluginDependencies.map(function(plugin) {\n    return plugin.requirePackageName;\n  }));\n\n\n  function bootstrapApp() {\n    var angular = require('angular');\n    var $ = angular.element;\n\n    $(document).ready(function() {\n      angular.bootstrap(document, [\n        'cam.tasklist',\n        'cam.embedded.forms',\n        'cam.tasklist.custom'\n      ]);\n\n      setTimeout(function() {\n        var $aufocused = $('[autofocus]');\n        if ($aufocused.length) {\n          $aufocused[0].focus();\n        }\n      }, 300);\n    });\n  }\n\n\n  function loaded() {\n    var angular = require('angular');\n    var $ = angular.element;\n\n    function parseUriConfig() {\n      var $baseTag = angular.element('base');\n      var config = {};\n      var names = ['href', 'app-root', 'admin-api', 'engine-api'];\n      for(var i = 0; i < names.length; i++) {\n        config[names[i]] = $baseTag.attr(names[i]);\n      }\n      return config;\n    }\n\n    var ngDeps = [\n      'cam.commons',\n      'pascalprecht.translate',\n      'ngRoute',\n      'dataDepend',\n      require('scripts/user/index').name,\n      require('scripts/variable/index').name,\n      require('scripts/tasklist/index').name,\n      require('scripts/task/index').name,\n      require('scripts/process/index').name,\n      require('scripts/navigation/index').name,\n      require('scripts/form/index').name,\n      require('scripts/filter/index').name,\n      require('scripts/api/index').name,\n    ].concat(pluginDependencies.map(function(el){\n      return el.ngModuleName;\n    }));\n\n    var uriConfig = parseUriConfig();\n\n    tasklistApp = angular.module('cam.tasklist', ngDeps);\n\n    tasklistApp.factory('assignNotification', require('scripts/services/cam-tasklist-assign-notification'));\n    tasklistApp.provider('configuration', require('scripts/services/cam-tasklist-configuration'));\n\n    require('scripts/config/locales')(tasklistApp, uriConfig['app-root']);\n    require('scripts/config/uris')(tasklistApp, uriConfig);\n\n\n    tasklistApp.config(require('scripts/config/routes'));\n    tasklistApp.config(require('scripts/config/date'));\n    tasklistApp.config(require('scripts/config/tooltip'));\n\n    tasklistApp.controller('camTasklistAppCtrl', require('scripts/controller/cam-tasklist-app-ctrl'));\n    tasklistApp.controller('camTasklistViewCtrl', require('scripts/controller/cam-tasklist-view-ctrl'));\n\n\n    // The `cam.tasklist` AngularJS module is now available but not yet bootstraped,\n    // it is the right moment to load plugins\n    if (typeof window.camTasklistConf !== 'undefined' && window.camTasklistConf.customScripts) {\n      var custom = window.camTasklistConf.customScripts || {};\n\n      // copy the relevant RequireJS configuration in a empty object\n      // see: http://requirejs.org/docs/api.html#config\n      var conf = {};\n      [\n        'baseUrl',\n        'paths',\n        'bundles',\n        'shim',\n        'map',\n        'config',\n        'packages',\n        // 'nodeIdCompat',\n        'waitSeconds',\n        'context',\n        // 'deps', // not relevant in this case\n        'callback',\n        'enforceDefine',\n        'xhtml',\n        'urlArgs',\n        'scriptType'\n        // 'skipDataMain' // not relevant either\n      ].forEach(function (prop) {\n        if (custom[prop]) {\n          conf[prop] = custom[prop];\n        }\n      });\n\n      // configure RequireJS\n      require.config(conf);\n\n      // load the dependencies and bootstrap the AngularJS application\n      require(custom.deps || [], function() {\n\n        // create a AngularJS module (with possible AngularJS module dependencies)\n        // on which the custom scripts can register their\n        // directives, controllers, services and all when loaded\n        angular.module('cam.tasklist.custom', custom.ngDeps);\n\n        bootstrapApp.apply(this, arguments);\n      });\n    }\n    else {\n      // for consistency, also create a empty module\n      angular.module('cam.tasklist.custom', []);\n\n      // make sure that we are at the end of the require-js callback queue.\n      // Why? => the plugins will also execute require(..) which will place new\n      // entries into the queue.  if we bootstrap the angular app\n      // synchronously, the plugins' require callbacks will not have been\n      // executed yet and the angular modules provided by those plugins will\n      // not have been defined yet. Placing a new require call here will put\n      // the bootstrapping of the angular app at the end of the queue\n      require([], function() {\n        bootstrapApp();\n      });\n    }\n  }\n\n\n  /* live-reload\n  // loads livereload client library (without breaking other scripts execution)\n  require(['jquery'], function($) {\n    $('body').append('<script src=\"//' + location.hostname + ':LIVERELOAD_PORT/livereload.js?snipver=1\"></script>');\n  });\n  /* */\n\n  // and load the dependencies\n  require(deps, loaded);\n});\n\n"]}